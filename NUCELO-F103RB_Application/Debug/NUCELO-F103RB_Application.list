
NUCELO-F103RB_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  0800810c  0800810c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08018000  08018000  00004068  2**0
                  CONTENTS
  3 .rodata       0000003c  0800a2b8  0800a2b8  000032b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800a2f4  0800a2f4  00004068  2**0
                  CONTENTS, READONLY
  5 .ARM          00000000  0800a2f4  0800a2f4  00004068  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  0800a2f4  0800a2f4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800a2f4  0800a2f4  000032f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800a2f8  0800a2f8  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  0800a2fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001b8  20000068  0800a364  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  0800a364  00004220  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f71  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000151b  00000000  00000000  0000b002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c8  00000000  00000000  0000c520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051f  00000000  00000000  0000cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017891  00000000  00000000  0000d107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007f48  00000000  00000000  00024998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083d8e  00000000  00000000  0002c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b066e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002048  00000000  00000000  000b06b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000b26fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	@ (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	@ (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000068 	.word	0x20000068
 8008128:	00000000 	.word	0x00000000
 800812c:	0800a2a0 	.word	0x0800a2a0

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	@ (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	@ (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	2000006c 	.word	0x2000006c
 8008148:	0800a2a0 	.word	0x0800a2a0

0800814c <_write>:
	void(*TurnOn)(void);
	void(*TurnOff)(void);
};

int _write(int file, char *ptr, int len)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	e00a      	b.n	8008174 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 800815e:	68b9      	ldr	r1, [r7, #8]
 8008160:	1c4b      	adds	r3, r1, #1
 8008162:	60bb      	str	r3, [r7, #8]
 8008164:	2364      	movs	r3, #100	@ 0x64
 8008166:	2201      	movs	r2, #1
 8008168:	4807      	ldr	r0, [pc, #28]	@ (8008188 <_write+0x3c>)
 800816a:	f001 fa1f 	bl	80095ac <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	3301      	adds	r3, #1
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	dbf0      	blt.n	800815e <_write+0x12>
	}
	return len;
 800817c:	687b      	ldr	r3, [r7, #4]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000084 	.word	0x20000084

0800818c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	struct BootloaderSharedAPI *api = (struct BootloaderSharedAPI *)0x8018000;
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <main+0x3c>)
 8008194:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008196:	f000 fa57 	bl	8008648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800819a:	f000 f819 	bl	80081d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800819e:	f000 f883 	bl	80082a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80081a2:	f000 f857 	bl	8008254 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("App starting\r\n");
 80081a6:	4809      	ldr	r0, [pc, #36]	@ (80081cc <main+0x40>)
 80081a8:	f001 fcec 	bl	8009b84 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("App running\r\n");
	  api->TurnOff();
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4798      	blx	r3
	  HAL_Delay(50);
 80081b2:	2032      	movs	r0, #50	@ 0x32
 80081b4:	f000 faaa 	bl	800870c <HAL_Delay>
	  api->TurnOn();
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4798      	blx	r3
	  HAL_Delay(50);
 80081be:	2032      	movs	r0, #50	@ 0x32
 80081c0:	f000 faa4 	bl	800870c <HAL_Delay>
	  api->TurnOff();
 80081c4:	bf00      	nop
 80081c6:	e7f1      	b.n	80081ac <main+0x20>
 80081c8:	08018000 	.word	0x08018000
 80081cc:	0800a2b8 	.word	0x0800a2b8

080081d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b090      	sub	sp, #64	@ 0x40
 80081d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081d6:	f107 0318 	add.w	r3, r7, #24
 80081da:	2228      	movs	r2, #40	@ 0x28
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f001 fdb0 	bl	8009d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081e4:	1d3b      	adds	r3, r7, #4
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	605a      	str	r2, [r3, #4]
 80081ec:	609a      	str	r2, [r3, #8]
 80081ee:	60da      	str	r2, [r3, #12]
 80081f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80081f2:	2302      	movs	r3, #2
 80081f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80081f6:	2301      	movs	r3, #1
 80081f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80081fa:	2310      	movs	r3, #16
 80081fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081fe:	2302      	movs	r3, #2
 8008200:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8008202:	2300      	movs	r3, #0
 8008204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8008206:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800820c:	f107 0318 	add.w	r3, r7, #24
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fd6b 	bl	8008cec <HAL_RCC_OscConfig>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800821c:	f000 f8b2 	bl	8008384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008220:	230f      	movs	r3, #15
 8008222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008224:	2302      	movs	r3, #2
 8008226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800822c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008232:	2300      	movs	r3, #0
 8008234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008236:	1d3b      	adds	r3, r7, #4
 8008238:	2102      	movs	r1, #2
 800823a:	4618      	mov	r0, r3
 800823c:	f000 ffd8 	bl	80091f0 <HAL_RCC_ClockConfig>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8008246:	f000 f89d 	bl	8008384 <Error_Handler>
  }
}
 800824a:	bf00      	nop
 800824c:	3740      	adds	r7, #64	@ 0x40
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008258:	4b11      	ldr	r3, [pc, #68]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 800825a:	4a12      	ldr	r2, [pc, #72]	@ (80082a4 <MX_USART2_UART_Init+0x50>)
 800825c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800825e:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 8008260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008266:	4b0e      	ldr	r3, [pc, #56]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 8008268:	2200      	movs	r2, #0
 800826a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800826c:	4b0c      	ldr	r3, [pc, #48]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 800826e:	2200      	movs	r2, #0
 8008270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008272:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 8008274:	2200      	movs	r2, #0
 8008276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008278:	4b09      	ldr	r3, [pc, #36]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 800827a:	220c      	movs	r2, #12
 800827c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800827e:	4b08      	ldr	r3, [pc, #32]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 8008280:	2200      	movs	r2, #0
 8008282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008284:	4b06      	ldr	r3, [pc, #24]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 8008286:	2200      	movs	r2, #0
 8008288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800828a:	4805      	ldr	r0, [pc, #20]	@ (80082a0 <MX_USART2_UART_Init+0x4c>)
 800828c:	f001 f93e 	bl	800950c <HAL_UART_Init>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008296:	f000 f875 	bl	8008384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800829a:	bf00      	nop
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000084 	.word	0x20000084
 80082a4:	40004400 	.word	0x40004400

080082a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ae:	f107 0310 	add.w	r3, r7, #16
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	605a      	str	r2, [r3, #4]
 80082b8:	609a      	str	r2, [r3, #8]
 80082ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082bc:	4b2d      	ldr	r3, [pc, #180]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082c2:	f043 0310 	orr.w	r3, r3, #16
 80082c6:	6193      	str	r3, [r2, #24]
 80082c8:	4b2a      	ldr	r3, [pc, #168]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082d4:	4b27      	ldr	r3, [pc, #156]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	4a26      	ldr	r2, [pc, #152]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082da:	f043 0320 	orr.w	r3, r3, #32
 80082de:	6193      	str	r3, [r2, #24]
 80082e0:	4b24      	ldr	r3, [pc, #144]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f003 0320 	and.w	r3, r3, #32
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ec:	4b21      	ldr	r3, [pc, #132]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	4a20      	ldr	r2, [pc, #128]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082f2:	f043 0304 	orr.w	r3, r3, #4
 80082f6:	6193      	str	r3, [r2, #24]
 80082f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008374 <MX_GPIO_Init+0xcc>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008304:	4b1b      	ldr	r3, [pc, #108]	@ (8008374 <MX_GPIO_Init+0xcc>)
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	4a1a      	ldr	r2, [pc, #104]	@ (8008374 <MX_GPIO_Init+0xcc>)
 800830a:	f043 0308 	orr.w	r3, r3, #8
 800830e:	6193      	str	r3, [r2, #24]
 8008310:	4b18      	ldr	r3, [pc, #96]	@ (8008374 <MX_GPIO_Init+0xcc>)
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800831c:	2200      	movs	r2, #0
 800831e:	2120      	movs	r1, #32
 8008320:	4815      	ldr	r0, [pc, #84]	@ (8008378 <MX_GPIO_Init+0xd0>)
 8008322:	f000 fca9 	bl	8008c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800832a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800832c:	4b13      	ldr	r3, [pc, #76]	@ (800837c <MX_GPIO_Init+0xd4>)
 800832e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008330:	2300      	movs	r3, #0
 8008332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008334:	f107 0310 	add.w	r3, r7, #16
 8008338:	4619      	mov	r1, r3
 800833a:	4811      	ldr	r0, [pc, #68]	@ (8008380 <MX_GPIO_Init+0xd8>)
 800833c:	f000 fb18 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008340:	2320      	movs	r3, #32
 8008342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008344:	2301      	movs	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008348:	2300      	movs	r3, #0
 800834a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834c:	2302      	movs	r3, #2
 800834e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008350:	f107 0310 	add.w	r3, r7, #16
 8008354:	4619      	mov	r1, r3
 8008356:	4808      	ldr	r0, [pc, #32]	@ (8008378 <MX_GPIO_Init+0xd0>)
 8008358:	f000 fb0a 	bl	8008970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800835c:	2200      	movs	r2, #0
 800835e:	2100      	movs	r1, #0
 8008360:	2028      	movs	r0, #40	@ 0x28
 8008362:	f000 face 	bl	8008902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008366:	2028      	movs	r0, #40	@ 0x28
 8008368:	f000 fae7 	bl	800893a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800836c:	bf00      	nop
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40021000 	.word	0x40021000
 8008378:	40010800 	.word	0x40010800
 800837c:	10110000 	.word	0x10110000
 8008380:	40011000 	.word	0x40011000

08008384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008388:	b672      	cpsid	i
}
 800838a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800838c:	bf00      	nop
 800838e:	e7fd      	b.n	800838c <Error_Handler+0x8>

08008390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008396:	4b15      	ldr	r3, [pc, #84]	@ (80083ec <HAL_MspInit+0x5c>)
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	4a14      	ldr	r2, [pc, #80]	@ (80083ec <HAL_MspInit+0x5c>)
 800839c:	f043 0301 	orr.w	r3, r3, #1
 80083a0:	6193      	str	r3, [r2, #24]
 80083a2:	4b12      	ldr	r3, [pc, #72]	@ (80083ec <HAL_MspInit+0x5c>)
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	60bb      	str	r3, [r7, #8]
 80083ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083ae:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <HAL_MspInit+0x5c>)
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	4a0e      	ldr	r2, [pc, #56]	@ (80083ec <HAL_MspInit+0x5c>)
 80083b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083b8:	61d3      	str	r3, [r2, #28]
 80083ba:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <HAL_MspInit+0x5c>)
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083c2:	607b      	str	r3, [r7, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083c6:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <HAL_MspInit+0x60>)
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	4a04      	ldr	r2, [pc, #16]	@ (80083f0 <HAL_MspInit+0x60>)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083e2:	bf00      	nop
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc80      	pop	{r7}
 80083ea:	4770      	bx	lr
 80083ec:	40021000 	.word	0x40021000
 80083f0:	40010000 	.word	0x40010000

080083f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083fc:	f107 0310 	add.w	r3, r7, #16
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a15      	ldr	r2, [pc, #84]	@ (8008464 <HAL_UART_MspInit+0x70>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d123      	bne.n	800845c <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008414:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <HAL_UART_MspInit+0x74>)
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	4a13      	ldr	r2, [pc, #76]	@ (8008468 <HAL_UART_MspInit+0x74>)
 800841a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800841e:	61d3      	str	r3, [r2, #28]
 8008420:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <HAL_UART_MspInit+0x74>)
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800842c:	4b0e      	ldr	r3, [pc, #56]	@ (8008468 <HAL_UART_MspInit+0x74>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	4a0d      	ldr	r2, [pc, #52]	@ (8008468 <HAL_UART_MspInit+0x74>)
 8008432:	f043 0304 	orr.w	r3, r3, #4
 8008436:	6193      	str	r3, [r2, #24]
 8008438:	4b0b      	ldr	r3, [pc, #44]	@ (8008468 <HAL_UART_MspInit+0x74>)
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008444:	230c      	movs	r3, #12
 8008446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008448:	2302      	movs	r3, #2
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800844c:	2302      	movs	r3, #2
 800844e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	4619      	mov	r1, r3
 8008456:	4805      	ldr	r0, [pc, #20]	@ (800846c <HAL_UART_MspInit+0x78>)
 8008458:	f000 fa8a 	bl	8008970 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800845c:	bf00      	nop
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40004400 	.word	0x40004400
 8008468:	40021000 	.word	0x40021000
 800846c:	40010800 	.word	0x40010800

08008470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <NMI_Handler+0x4>

08008478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800847c:	bf00      	nop
 800847e:	e7fd      	b.n	800847c <HardFault_Handler+0x4>

08008480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008484:	bf00      	nop
 8008486:	e7fd      	b.n	8008484 <MemManage_Handler+0x4>

08008488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <BusFault_Handler+0x4>

08008490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <UsageFault_Handler+0x4>

08008498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800849c:	bf00      	nop
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr

080084b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr

080084bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084c0:	f000 f908 	bl	80086d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084c4:	bf00      	nop
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80084cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80084d0:	f000 fbea 	bl	8008ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80084d4:	bf00      	nop
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e00a      	b.n	8008500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80084ea:	f3af 8000 	nop.w
 80084ee:	4601      	mov	r1, r0
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	60ba      	str	r2, [r7, #8]
 80084f6:	b2ca      	uxtb	r2, r1
 80084f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	dbf0      	blt.n	80084ea <_read+0x12>
  }

  return len;
 8008508:	687b      	ldr	r3, [r7, #4]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008538:	605a      	str	r2, [r3, #4]
  return 0;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr

08008546 <_isatty>:

int _isatty(int file)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800854e:	2301      	movs	r3, #1
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr

0800855a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
	...

08008574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800857c:	4a14      	ldr	r2, [pc, #80]	@ (80085d0 <_sbrk+0x5c>)
 800857e:	4b15      	ldr	r3, [pc, #84]	@ (80085d4 <_sbrk+0x60>)
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008588:	4b13      	ldr	r3, [pc, #76]	@ (80085d8 <_sbrk+0x64>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008590:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <_sbrk+0x64>)
 8008592:	4a12      	ldr	r2, [pc, #72]	@ (80085dc <_sbrk+0x68>)
 8008594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008596:	4b10      	ldr	r3, [pc, #64]	@ (80085d8 <_sbrk+0x64>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d207      	bcs.n	80085b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085a4:	f001 fc1c 	bl	8009de0 <__errno>
 80085a8:	4603      	mov	r3, r0
 80085aa:	220c      	movs	r2, #12
 80085ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	e009      	b.n	80085c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085b4:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <_sbrk+0x64>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085ba:	4b07      	ldr	r3, [pc, #28]	@ (80085d8 <_sbrk+0x64>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	4a05      	ldr	r2, [pc, #20]	@ (80085d8 <_sbrk+0x64>)
 80085c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20005000 	.word	0x20005000
 80085d4:	00000400 	.word	0x00000400
 80085d8:	200000cc 	.word	0x200000cc
 80085dc:	20000220 	.word	0x20000220

080085e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80085e4:	4b03      	ldr	r3, [pc, #12]	@ (80085f4 <SystemInit+0x14>)
 80085e6:	4a04      	ldr	r2, [pc, #16]	@ (80085f8 <SystemInit+0x18>)
 80085e8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80085ea:	bf00      	nop
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	e000ed00 	.word	0xe000ed00
 80085f8:	08008000 	.word	0x08008000

080085fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80085fc:	f7ff fff0 	bl	80085e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008600:	480b      	ldr	r0, [pc, #44]	@ (8008630 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008602:	490c      	ldr	r1, [pc, #48]	@ (8008634 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008604:	4a0c      	ldr	r2, [pc, #48]	@ (8008638 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008608:	e002      	b.n	8008610 <LoopCopyDataInit>

0800860a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800860a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800860c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800860e:	3304      	adds	r3, #4

08008610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008614:	d3f9      	bcc.n	800860a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008616:	4a09      	ldr	r2, [pc, #36]	@ (800863c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008618:	4c09      	ldr	r4, [pc, #36]	@ (8008640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800861a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800861c:	e001      	b.n	8008622 <LoopFillZerobss>

0800861e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800861e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008620:	3204      	adds	r2, #4

08008622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008624:	d3fb      	bcc.n	800861e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008626:	f001 fbe1 	bl	8009dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800862a:	f7ff fdaf 	bl	800818c <main>
  bx lr
 800862e:	4770      	bx	lr
  ldr r0, =_sdata
 8008630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008634:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008638:	0800a2fc 	.word	0x0800a2fc
  ldr r2, =_sbss
 800863c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008640:	20000220 	.word	0x20000220

08008644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008644:	e7fe      	b.n	8008644 <ADC1_2_IRQHandler>
	...

08008648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800864c:	4b08      	ldr	r3, [pc, #32]	@ (8008670 <HAL_Init+0x28>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a07      	ldr	r2, [pc, #28]	@ (8008670 <HAL_Init+0x28>)
 8008652:	f043 0310 	orr.w	r3, r3, #16
 8008656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008658:	2003      	movs	r0, #3
 800865a:	f000 f947 	bl	80088ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800865e:	2000      	movs	r0, #0
 8008660:	f000 f808 	bl	8008674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008664:	f7ff fe94 	bl	8008390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	40022000 	.word	0x40022000

08008674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800867c:	4b12      	ldr	r3, [pc, #72]	@ (80086c8 <HAL_InitTick+0x54>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	4b12      	ldr	r3, [pc, #72]	@ (80086cc <HAL_InitTick+0x58>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4619      	mov	r1, r3
 8008686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800868a:	fbb3 f3f1 	udiv	r3, r3, r1
 800868e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f95f 	bl	8008956 <HAL_SYSTICK_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e00e      	b.n	80086c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b0f      	cmp	r3, #15
 80086a6:	d80a      	bhi.n	80086be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086a8:	2200      	movs	r2, #0
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	f000 f927 	bl	8008902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80086b4:	4a06      	ldr	r2, [pc, #24]	@ (80086d0 <HAL_InitTick+0x5c>)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e000      	b.n	80086c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000000 	.word	0x20000000
 80086cc:	20000008 	.word	0x20000008
 80086d0:	20000004 	.word	0x20000004

080086d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086d8:	4b05      	ldr	r3, [pc, #20]	@ (80086f0 <HAL_IncTick+0x1c>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <HAL_IncTick+0x20>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4413      	add	r3, r2
 80086e4:	4a03      	ldr	r2, [pc, #12]	@ (80086f4 <HAL_IncTick+0x20>)
 80086e6:	6013      	str	r3, [r2, #0]
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	20000008 	.word	0x20000008
 80086f4:	200000d0 	.word	0x200000d0

080086f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return uwTick;
 80086fc:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <HAL_GetTick+0x10>)
 80086fe:	681b      	ldr	r3, [r3, #0]
}
 8008700:	4618      	mov	r0, r3
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr
 8008708:	200000d0 	.word	0x200000d0

0800870c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008714:	f7ff fff0 	bl	80086f8 <HAL_GetTick>
 8008718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d005      	beq.n	8008732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008726:	4b0a      	ldr	r3, [pc, #40]	@ (8008750 <HAL_Delay+0x44>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008732:	bf00      	nop
 8008734:	f7ff ffe0 	bl	80086f8 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	429a      	cmp	r2, r3
 8008742:	d8f7      	bhi.n	8008734 <HAL_Delay+0x28>
  {
  }
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000008 	.word	0x20000008

08008754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008764:	4b0c      	ldr	r3, [pc, #48]	@ (8008798 <__NVIC_SetPriorityGrouping+0x44>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008770:	4013      	ands	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800877c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008786:	4a04      	ldr	r2, [pc, #16]	@ (8008798 <__NVIC_SetPriorityGrouping+0x44>)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	60d3      	str	r3, [r2, #12]
}
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	e000ed00 	.word	0xe000ed00

0800879c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087a0:	4b04      	ldr	r3, [pc, #16]	@ (80087b4 <__NVIC_GetPriorityGrouping+0x18>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	f003 0307 	and.w	r3, r3, #7
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	e000ed00 	.word	0xe000ed00

080087b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	db0b      	blt.n	80087e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	f003 021f 	and.w	r2, r3, #31
 80087d0:	4906      	ldr	r1, [pc, #24]	@ (80087ec <__NVIC_EnableIRQ+0x34>)
 80087d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d6:	095b      	lsrs	r3, r3, #5
 80087d8:	2001      	movs	r0, #1
 80087da:	fa00 f202 	lsl.w	r2, r0, r2
 80087de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	e000e100 	.word	0xe000e100

080087f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008800:	2b00      	cmp	r3, #0
 8008802:	db0a      	blt.n	800881a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	b2da      	uxtb	r2, r3
 8008808:	490c      	ldr	r1, [pc, #48]	@ (800883c <__NVIC_SetPriority+0x4c>)
 800880a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800880e:	0112      	lsls	r2, r2, #4
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	440b      	add	r3, r1
 8008814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008818:	e00a      	b.n	8008830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	4908      	ldr	r1, [pc, #32]	@ (8008840 <__NVIC_SetPriority+0x50>)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	3b04      	subs	r3, #4
 8008828:	0112      	lsls	r2, r2, #4
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	440b      	add	r3, r1
 800882e:	761a      	strb	r2, [r3, #24]
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000e100 	.word	0xe000e100
 8008840:	e000ed00 	.word	0xe000ed00

08008844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008844:	b480      	push	{r7}
 8008846:	b089      	sub	sp, #36	@ 0x24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f1c3 0307 	rsb	r3, r3, #7
 800885e:	2b04      	cmp	r3, #4
 8008860:	bf28      	it	cs
 8008862:	2304      	movcs	r3, #4
 8008864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	3304      	adds	r3, #4
 800886a:	2b06      	cmp	r3, #6
 800886c:	d902      	bls.n	8008874 <NVIC_EncodePriority+0x30>
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3b03      	subs	r3, #3
 8008872:	e000      	b.n	8008876 <NVIC_EncodePriority+0x32>
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008878:	f04f 32ff 	mov.w	r2, #4294967295
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	43da      	mvns	r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	401a      	ands	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800888c:	f04f 31ff 	mov.w	r1, #4294967295
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	fa01 f303 	lsl.w	r3, r1, r3
 8008896:	43d9      	mvns	r1, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800889c:	4313      	orrs	r3, r2
         );
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3724      	adds	r7, #36	@ 0x24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088b8:	d301      	bcc.n	80088be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088ba:	2301      	movs	r3, #1
 80088bc:	e00f      	b.n	80088de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088be:	4a0a      	ldr	r2, [pc, #40]	@ (80088e8 <SysTick_Config+0x40>)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088c6:	210f      	movs	r1, #15
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	f7ff ff90 	bl	80087f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088d0:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <SysTick_Config+0x40>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088d6:	4b04      	ldr	r3, [pc, #16]	@ (80088e8 <SysTick_Config+0x40>)
 80088d8:	2207      	movs	r2, #7
 80088da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	e000e010 	.word	0xe000e010

080088ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ff2d 	bl	8008754 <__NVIC_SetPriorityGrouping>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	4603      	mov	r3, r0
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008914:	f7ff ff42 	bl	800879c <__NVIC_GetPriorityGrouping>
 8008918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	6978      	ldr	r0, [r7, #20]
 8008920:	f7ff ff90 	bl	8008844 <NVIC_EncodePriority>
 8008924:	4602      	mov	r2, r0
 8008926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff ff5f 	bl	80087f0 <__NVIC_SetPriority>
}
 8008932:	bf00      	nop
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	4603      	mov	r3, r0
 8008942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff ff35 	bl	80087b8 <__NVIC_EnableIRQ>
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff ffa2 	bl	80088a8 <SysTick_Config>
 8008964:	4603      	mov	r3, r0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008970:	b480      	push	{r7}
 8008972:	b08b      	sub	sp, #44	@ 0x2c
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800897a:	2300      	movs	r3, #0
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800897e:	2300      	movs	r3, #0
 8008980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008982:	e169      	b.n	8008c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008984:	2201      	movs	r2, #1
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	4013      	ands	r3, r2
 8008996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	429a      	cmp	r2, r3
 800899e:	f040 8158 	bne.w	8008c52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4a9a      	ldr	r2, [pc, #616]	@ (8008c10 <HAL_GPIO_Init+0x2a0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d05e      	beq.n	8008a6a <HAL_GPIO_Init+0xfa>
 80089ac:	4a98      	ldr	r2, [pc, #608]	@ (8008c10 <HAL_GPIO_Init+0x2a0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d875      	bhi.n	8008a9e <HAL_GPIO_Init+0x12e>
 80089b2:	4a98      	ldr	r2, [pc, #608]	@ (8008c14 <HAL_GPIO_Init+0x2a4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d058      	beq.n	8008a6a <HAL_GPIO_Init+0xfa>
 80089b8:	4a96      	ldr	r2, [pc, #600]	@ (8008c14 <HAL_GPIO_Init+0x2a4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d86f      	bhi.n	8008a9e <HAL_GPIO_Init+0x12e>
 80089be:	4a96      	ldr	r2, [pc, #600]	@ (8008c18 <HAL_GPIO_Init+0x2a8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d052      	beq.n	8008a6a <HAL_GPIO_Init+0xfa>
 80089c4:	4a94      	ldr	r2, [pc, #592]	@ (8008c18 <HAL_GPIO_Init+0x2a8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d869      	bhi.n	8008a9e <HAL_GPIO_Init+0x12e>
 80089ca:	4a94      	ldr	r2, [pc, #592]	@ (8008c1c <HAL_GPIO_Init+0x2ac>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d04c      	beq.n	8008a6a <HAL_GPIO_Init+0xfa>
 80089d0:	4a92      	ldr	r2, [pc, #584]	@ (8008c1c <HAL_GPIO_Init+0x2ac>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d863      	bhi.n	8008a9e <HAL_GPIO_Init+0x12e>
 80089d6:	4a92      	ldr	r2, [pc, #584]	@ (8008c20 <HAL_GPIO_Init+0x2b0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d046      	beq.n	8008a6a <HAL_GPIO_Init+0xfa>
 80089dc:	4a90      	ldr	r2, [pc, #576]	@ (8008c20 <HAL_GPIO_Init+0x2b0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d85d      	bhi.n	8008a9e <HAL_GPIO_Init+0x12e>
 80089e2:	2b12      	cmp	r3, #18
 80089e4:	d82a      	bhi.n	8008a3c <HAL_GPIO_Init+0xcc>
 80089e6:	2b12      	cmp	r3, #18
 80089e8:	d859      	bhi.n	8008a9e <HAL_GPIO_Init+0x12e>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <HAL_GPIO_Init+0x80>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a6b 	.word	0x08008a6b
 80089f4:	08008a45 	.word	0x08008a45
 80089f8:	08008a57 	.word	0x08008a57
 80089fc:	08008a99 	.word	0x08008a99
 8008a00:	08008a9f 	.word	0x08008a9f
 8008a04:	08008a9f 	.word	0x08008a9f
 8008a08:	08008a9f 	.word	0x08008a9f
 8008a0c:	08008a9f 	.word	0x08008a9f
 8008a10:	08008a9f 	.word	0x08008a9f
 8008a14:	08008a9f 	.word	0x08008a9f
 8008a18:	08008a9f 	.word	0x08008a9f
 8008a1c:	08008a9f 	.word	0x08008a9f
 8008a20:	08008a9f 	.word	0x08008a9f
 8008a24:	08008a9f 	.word	0x08008a9f
 8008a28:	08008a9f 	.word	0x08008a9f
 8008a2c:	08008a9f 	.word	0x08008a9f
 8008a30:	08008a9f 	.word	0x08008a9f
 8008a34:	08008a4d 	.word	0x08008a4d
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	4a79      	ldr	r2, [pc, #484]	@ (8008c24 <HAL_GPIO_Init+0x2b4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d013      	beq.n	8008a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008a42:	e02c      	b.n	8008a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	623b      	str	r3, [r7, #32]
          break;
 8008a4a:	e029      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	3304      	adds	r3, #4
 8008a52:	623b      	str	r3, [r7, #32]
          break;
 8008a54:	e024      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	623b      	str	r3, [r7, #32]
          break;
 8008a5e:	e01f      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	330c      	adds	r3, #12
 8008a66:	623b      	str	r3, [r7, #32]
          break;
 8008a68:	e01a      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008a72:	2304      	movs	r3, #4
 8008a74:	623b      	str	r3, [r7, #32]
          break;
 8008a76:	e013      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d105      	bne.n	8008a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a80:	2308      	movs	r3, #8
 8008a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	611a      	str	r2, [r3, #16]
          break;
 8008a8a:	e009      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	615a      	str	r2, [r3, #20]
          break;
 8008a96:	e003      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	623b      	str	r3, [r7, #32]
          break;
 8008a9c:	e000      	b.n	8008aa0 <HAL_GPIO_Init+0x130>
          break;
 8008a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2bff      	cmp	r3, #255	@ 0xff
 8008aa4:	d801      	bhi.n	8008aaa <HAL_GPIO_Init+0x13a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	e001      	b.n	8008aae <HAL_GPIO_Init+0x13e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3304      	adds	r3, #4
 8008aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2bff      	cmp	r3, #255	@ 0xff
 8008ab4:	d802      	bhi.n	8008abc <HAL_GPIO_Init+0x14c>
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	e002      	b.n	8008ac2 <HAL_GPIO_Init+0x152>
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	3b08      	subs	r3, #8
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	210f      	movs	r1, #15
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	6a39      	ldr	r1, [r7, #32]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	431a      	orrs	r2, r3
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80b1 	beq.w	8008c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008af0:	4b4d      	ldr	r3, [pc, #308]	@ (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	4a4c      	ldr	r2, [pc, #304]	@ (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	6193      	str	r3, [r2, #24]
 8008afc:	4b4a      	ldr	r3, [pc, #296]	@ (8008c28 <HAL_GPIO_Init+0x2b8>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008b08:	4a48      	ldr	r2, [pc, #288]	@ (8008c2c <HAL_GPIO_Init+0x2bc>)
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	089b      	lsrs	r3, r3, #2
 8008b0e:	3302      	adds	r3, #2
 8008b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	f003 0303 	and.w	r3, r3, #3
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	220f      	movs	r2, #15
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	43db      	mvns	r3, r3
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a40      	ldr	r2, [pc, #256]	@ (8008c30 <HAL_GPIO_Init+0x2c0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <HAL_GPIO_Init+0x1ec>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a3f      	ldr	r2, [pc, #252]	@ (8008c34 <HAL_GPIO_Init+0x2c4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d00d      	beq.n	8008b58 <HAL_GPIO_Init+0x1e8>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8008c38 <HAL_GPIO_Init+0x2c8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d007      	beq.n	8008b54 <HAL_GPIO_Init+0x1e4>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a3d      	ldr	r2, [pc, #244]	@ (8008c3c <HAL_GPIO_Init+0x2cc>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d101      	bne.n	8008b50 <HAL_GPIO_Init+0x1e0>
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e006      	b.n	8008b5e <HAL_GPIO_Init+0x1ee>
 8008b50:	2304      	movs	r3, #4
 8008b52:	e004      	b.n	8008b5e <HAL_GPIO_Init+0x1ee>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e002      	b.n	8008b5e <HAL_GPIO_Init+0x1ee>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e000      	b.n	8008b5e <HAL_GPIO_Init+0x1ee>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b60:	f002 0203 	and.w	r2, r2, #3
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	4093      	lsls	r3, r2
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008b6e:	492f      	ldr	r1, [pc, #188]	@ (8008c2c <HAL_GPIO_Init+0x2bc>)
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	089b      	lsrs	r3, r3, #2
 8008b74:	3302      	adds	r3, #2
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d006      	beq.n	8008b96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008b88:	4b2d      	ldr	r3, [pc, #180]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	492c      	ldr	r1, [pc, #176]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	608b      	str	r3, [r1, #8]
 8008b94:	e006      	b.n	8008ba4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008b96:	4b2a      	ldr	r3, [pc, #168]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	4928      	ldr	r1, [pc, #160]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d006      	beq.n	8008bbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008bb0:	4b23      	ldr	r3, [pc, #140]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	4922      	ldr	r1, [pc, #136]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60cb      	str	r3, [r1, #12]
 8008bbc:	e006      	b.n	8008bcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008bbe:	4b20      	ldr	r3, [pc, #128]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	43db      	mvns	r3, r3
 8008bc6:	491e      	ldr	r1, [pc, #120]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d006      	beq.n	8008be6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008bd8:	4b19      	ldr	r3, [pc, #100]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	4918      	ldr	r1, [pc, #96]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	604b      	str	r3, [r1, #4]
 8008be4:	e006      	b.n	8008bf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008be6:	4b16      	ldr	r3, [pc, #88]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	43db      	mvns	r3, r3
 8008bee:	4914      	ldr	r1, [pc, #80]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d021      	beq.n	8008c44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008c00:	4b0f      	ldr	r3, [pc, #60]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	490e      	ldr	r1, [pc, #56]	@ (8008c40 <HAL_GPIO_Init+0x2d0>)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	600b      	str	r3, [r1, #0]
 8008c0c:	e021      	b.n	8008c52 <HAL_GPIO_Init+0x2e2>
 8008c0e:	bf00      	nop
 8008c10:	10320000 	.word	0x10320000
 8008c14:	10310000 	.word	0x10310000
 8008c18:	10220000 	.word	0x10220000
 8008c1c:	10210000 	.word	0x10210000
 8008c20:	10120000 	.word	0x10120000
 8008c24:	10110000 	.word	0x10110000
 8008c28:	40021000 	.word	0x40021000
 8008c2c:	40010000 	.word	0x40010000
 8008c30:	40010800 	.word	0x40010800
 8008c34:	40010c00 	.word	0x40010c00
 8008c38:	40011000 	.word	0x40011000
 8008c3c:	40011400 	.word	0x40011400
 8008c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008c44:	4b0b      	ldr	r3, [pc, #44]	@ (8008c74 <HAL_GPIO_Init+0x304>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	4909      	ldr	r1, [pc, #36]	@ (8008c74 <HAL_GPIO_Init+0x304>)
 8008c4e:	4013      	ands	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	3301      	adds	r3, #1
 8008c56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f47f ae8e 	bne.w	8008984 <HAL_GPIO_Init+0x14>
  }
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	372c      	adds	r7, #44	@ 0x2c
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr
 8008c74:	40010400 	.word	0x40010400

08008c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	807b      	strh	r3, [r7, #2]
 8008c84:	4613      	mov	r3, r2
 8008c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c88:	787b      	ldrb	r3, [r7, #1]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c8e:	887a      	ldrh	r2, [r7, #2]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008c94:	e003      	b.n	8008c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008c96:	887b      	ldrh	r3, [r7, #2]
 8008c98:	041a      	lsls	r2, r3, #16
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	611a      	str	r2, [r3, #16]
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008cb2:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008cb4:	695a      	ldr	r2, [r3, #20]
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d006      	beq.n	8008ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008cbe:	4a05      	ldr	r2, [pc, #20]	@ (8008cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008cc0:	88fb      	ldrh	r3, [r7, #6]
 8008cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f806 	bl	8008cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008ce2:	bf00      	nop
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr

08008cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e272      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 8087 	beq.w	8008e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d0c:	4b92      	ldr	r3, [pc, #584]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f003 030c 	and.w	r3, r3, #12
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d00c      	beq.n	8008d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008d18:	4b8f      	ldr	r3, [pc, #572]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f003 030c 	and.w	r3, r3, #12
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d112      	bne.n	8008d4a <HAL_RCC_OscConfig+0x5e>
 8008d24:	4b8c      	ldr	r3, [pc, #560]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d30:	d10b      	bne.n	8008d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d32:	4b89      	ldr	r3, [pc, #548]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d06c      	beq.n	8008e18 <HAL_RCC_OscConfig+0x12c>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d168      	bne.n	8008e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e24c      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d52:	d106      	bne.n	8008d62 <HAL_RCC_OscConfig+0x76>
 8008d54:	4b80      	ldr	r3, [pc, #512]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a7f      	ldr	r2, [pc, #508]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	e02e      	b.n	8008dc0 <HAL_RCC_OscConfig+0xd4>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <HAL_RCC_OscConfig+0x98>
 8008d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	4b78      	ldr	r3, [pc, #480]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a77      	ldr	r2, [pc, #476]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	e01d      	b.n	8008dc0 <HAL_RCC_OscConfig+0xd4>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d8c:	d10c      	bne.n	8008da8 <HAL_RCC_OscConfig+0xbc>
 8008d8e:	4b72      	ldr	r3, [pc, #456]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a71      	ldr	r2, [pc, #452]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	e00b      	b.n	8008dc0 <HAL_RCC_OscConfig+0xd4>
 8008da8:	4b6b      	ldr	r3, [pc, #428]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a6a      	ldr	r2, [pc, #424]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	4b68      	ldr	r3, [pc, #416]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a67      	ldr	r2, [pc, #412]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d013      	beq.n	8008df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc8:	f7ff fc96 	bl	80086f8 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dd0:	f7ff fc92 	bl	80086f8 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b64      	cmp	r3, #100	@ 0x64
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e200      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008de2:	4b5d      	ldr	r3, [pc, #372]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f0      	beq.n	8008dd0 <HAL_RCC_OscConfig+0xe4>
 8008dee:	e014      	b.n	8008e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008df0:	f7ff fc82 	bl	80086f8 <HAL_GetTick>
 8008df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008df6:	e008      	b.n	8008e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008df8:	f7ff fc7e 	bl	80086f8 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b64      	cmp	r3, #100	@ 0x64
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e1ec      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e0a:	4b53      	ldr	r3, [pc, #332]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f0      	bne.n	8008df8 <HAL_RCC_OscConfig+0x10c>
 8008e16:	e000      	b.n	8008e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d063      	beq.n	8008eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e26:	4b4c      	ldr	r3, [pc, #304]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f003 030c 	and.w	r3, r3, #12
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008e32:	4b49      	ldr	r3, [pc, #292]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f003 030c 	and.w	r3, r3, #12
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d11c      	bne.n	8008e78 <HAL_RCC_OscConfig+0x18c>
 8008e3e:	4b46      	ldr	r3, [pc, #280]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d116      	bne.n	8008e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e4a:	4b43      	ldr	r3, [pc, #268]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_RCC_OscConfig+0x176>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d001      	beq.n	8008e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e1c0      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e62:	4b3d      	ldr	r3, [pc, #244]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4939      	ldr	r1, [pc, #228]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e76:	e03a      	b.n	8008eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d020      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e80:	4b36      	ldr	r3, [pc, #216]	@ (8008f5c <HAL_RCC_OscConfig+0x270>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e86:	f7ff fc37 	bl	80086f8 <HAL_GetTick>
 8008e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e8c:	e008      	b.n	8008ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e8e:	f7ff fc33 	bl	80086f8 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e1a1      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0f0      	beq.n	8008e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eac:	4b2a      	ldr	r3, [pc, #168]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	4927      	ldr	r1, [pc, #156]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	600b      	str	r3, [r1, #0]
 8008ec0:	e015      	b.n	8008eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ec2:	4b26      	ldr	r3, [pc, #152]	@ (8008f5c <HAL_RCC_OscConfig+0x270>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec8:	f7ff fc16 	bl	80086f8 <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ed0:	f7ff fc12 	bl	80086f8 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e180      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f0      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0308 	and.w	r3, r3, #8
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d03a      	beq.n	8008f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d019      	beq.n	8008f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f02:	4b17      	ldr	r3, [pc, #92]	@ (8008f60 <HAL_RCC_OscConfig+0x274>)
 8008f04:	2201      	movs	r2, #1
 8008f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f08:	f7ff fbf6 	bl	80086f8 <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f10:	f7ff fbf2 	bl	80086f8 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e160      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f22:	4b0d      	ldr	r3, [pc, #52]	@ (8008f58 <HAL_RCC_OscConfig+0x26c>)
 8008f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f0      	beq.n	8008f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008f2e:	2001      	movs	r0, #1
 8008f30:	f000 face 	bl	80094d0 <RCC_Delay>
 8008f34:	e01c      	b.n	8008f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f36:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <HAL_RCC_OscConfig+0x274>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f3c:	f7ff fbdc 	bl	80086f8 <HAL_GetTick>
 8008f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f42:	e00f      	b.n	8008f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f44:	f7ff fbd8 	bl	80086f8 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d908      	bls.n	8008f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e146      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
 8008f56:	bf00      	nop
 8008f58:	40021000 	.word	0x40021000
 8008f5c:	42420000 	.word	0x42420000
 8008f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f64:	4b92      	ldr	r3, [pc, #584]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e9      	bne.n	8008f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80a6 	beq.w	80090ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f82:	4b8b      	ldr	r3, [pc, #556]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f8e:	4b88      	ldr	r3, [pc, #544]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	4a87      	ldr	r2, [pc, #540]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f98:	61d3      	str	r3, [r2, #28]
 8008f9a:	4b85      	ldr	r3, [pc, #532]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fa2:	60bb      	str	r3, [r7, #8]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008faa:	4b82      	ldr	r3, [pc, #520]	@ (80091b4 <HAL_RCC_OscConfig+0x4c8>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d118      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80091b4 <HAL_RCC_OscConfig+0x4c8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a7e      	ldr	r2, [pc, #504]	@ (80091b4 <HAL_RCC_OscConfig+0x4c8>)
 8008fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fc2:	f7ff fb99 	bl	80086f8 <HAL_GetTick>
 8008fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc8:	e008      	b.n	8008fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fca:	f7ff fb95 	bl	80086f8 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b64      	cmp	r3, #100	@ 0x64
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e103      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fdc:	4b75      	ldr	r3, [pc, #468]	@ (80091b4 <HAL_RCC_OscConfig+0x4c8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0f0      	beq.n	8008fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d106      	bne.n	8008ffe <HAL_RCC_OscConfig+0x312>
 8008ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	6213      	str	r3, [r2, #32]
 8008ffc:	e02d      	b.n	800905a <HAL_RCC_OscConfig+0x36e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10c      	bne.n	8009020 <HAL_RCC_OscConfig+0x334>
 8009006:	4b6a      	ldr	r3, [pc, #424]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	4a69      	ldr	r2, [pc, #420]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800900c:	f023 0301 	bic.w	r3, r3, #1
 8009010:	6213      	str	r3, [r2, #32]
 8009012:	4b67      	ldr	r3, [pc, #412]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	4a66      	ldr	r2, [pc, #408]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009018:	f023 0304 	bic.w	r3, r3, #4
 800901c:	6213      	str	r3, [r2, #32]
 800901e:	e01c      	b.n	800905a <HAL_RCC_OscConfig+0x36e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b05      	cmp	r3, #5
 8009026:	d10c      	bne.n	8009042 <HAL_RCC_OscConfig+0x356>
 8009028:	4b61      	ldr	r3, [pc, #388]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	4a60      	ldr	r2, [pc, #384]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800902e:	f043 0304 	orr.w	r3, r3, #4
 8009032:	6213      	str	r3, [r2, #32]
 8009034:	4b5e      	ldr	r3, [pc, #376]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	4a5d      	ldr	r2, [pc, #372]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	6213      	str	r3, [r2, #32]
 8009040:	e00b      	b.n	800905a <HAL_RCC_OscConfig+0x36e>
 8009042:	4b5b      	ldr	r3, [pc, #364]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	4a5a      	ldr	r2, [pc, #360]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	6213      	str	r3, [r2, #32]
 800904e:	4b58      	ldr	r3, [pc, #352]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	4a57      	ldr	r2, [pc, #348]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009054:	f023 0304 	bic.w	r3, r3, #4
 8009058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d015      	beq.n	800908e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009062:	f7ff fb49 	bl	80086f8 <HAL_GetTick>
 8009066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009068:	e00a      	b.n	8009080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800906a:	f7ff fb45 	bl	80086f8 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009078:	4293      	cmp	r3, r2
 800907a:	d901      	bls.n	8009080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e0b1      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009080:	4b4b      	ldr	r3, [pc, #300]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0ee      	beq.n	800906a <HAL_RCC_OscConfig+0x37e>
 800908c:	e014      	b.n	80090b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800908e:	f7ff fb33 	bl	80086f8 <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009094:	e00a      	b.n	80090ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009096:	f7ff fb2f 	bl	80086f8 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e09b      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090ac:	4b40      	ldr	r3, [pc, #256]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1ee      	bne.n	8009096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d105      	bne.n	80090ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090be:	4b3c      	ldr	r3, [pc, #240]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	4a3b      	ldr	r2, [pc, #236]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 80090c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 8087 	beq.w	80091e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090d4:	4b36      	ldr	r3, [pc, #216]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f003 030c 	and.w	r3, r3, #12
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d061      	beq.n	80091a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d146      	bne.n	8009176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090e8:	4b33      	ldr	r3, [pc, #204]	@ (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ee:	f7ff fb03 	bl	80086f8 <HAL_GetTick>
 80090f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090f4:	e008      	b.n	8009108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f6:	f7ff faff 	bl	80086f8 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d901      	bls.n	8009108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e06d      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009108:	4b29      	ldr	r3, [pc, #164]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1f0      	bne.n	80090f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a1b      	ldr	r3, [r3, #32]
 8009118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800911c:	d108      	bne.n	8009130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800911e:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	4921      	ldr	r1, [pc, #132]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800912c:	4313      	orrs	r3, r2
 800912e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009130:	4b1f      	ldr	r3, [pc, #124]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a19      	ldr	r1, [r3, #32]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009140:	430b      	orrs	r3, r1
 8009142:	491b      	ldr	r1, [pc, #108]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009144:	4313      	orrs	r3, r2
 8009146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009148:	4b1b      	ldr	r3, [pc, #108]	@ (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800914e:	f7ff fad3 	bl	80086f8 <HAL_GetTick>
 8009152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009154:	e008      	b.n	8009168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009156:	f7ff facf 	bl	80086f8 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d901      	bls.n	8009168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e03d      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009168:	4b11      	ldr	r3, [pc, #68]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0f0      	beq.n	8009156 <HAL_RCC_OscConfig+0x46a>
 8009174:	e035      	b.n	80091e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009176:	4b10      	ldr	r3, [pc, #64]	@ (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800917c:	f7ff fabc 	bl	80086f8 <HAL_GetTick>
 8009180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009182:	e008      	b.n	8009196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009184:	f7ff fab8 	bl	80086f8 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e026      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009196:	4b06      	ldr	r3, [pc, #24]	@ (80091b0 <HAL_RCC_OscConfig+0x4c4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f0      	bne.n	8009184 <HAL_RCC_OscConfig+0x498>
 80091a2:	e01e      	b.n	80091e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d107      	bne.n	80091bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e019      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
 80091b0:	40021000 	.word	0x40021000
 80091b4:	40007000 	.word	0x40007000
 80091b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80091bc:	4b0b      	ldr	r3, [pc, #44]	@ (80091ec <HAL_RCC_OscConfig+0x500>)
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d106      	bne.n	80091de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091da:	429a      	cmp	r2, r3
 80091dc:	d001      	beq.n	80091e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	40021000 	.word	0x40021000

080091f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e0d0      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009204:	4b6a      	ldr	r3, [pc, #424]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d910      	bls.n	8009234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009212:	4b67      	ldr	r3, [pc, #412]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f023 0207 	bic.w	r2, r3, #7
 800921a:	4965      	ldr	r1, [pc, #404]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	4313      	orrs	r3, r2
 8009220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009222:	4b63      	ldr	r3, [pc, #396]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d001      	beq.n	8009234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e0b8      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d020      	beq.n	8009282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800924c:	4b59      	ldr	r3, [pc, #356]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	4a58      	ldr	r2, [pc, #352]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0308 	and.w	r3, r3, #8
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009264:	4b53      	ldr	r3, [pc, #332]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	4a52      	ldr	r2, [pc, #328]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800926a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800926e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009270:	4b50      	ldr	r3, [pc, #320]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	494d      	ldr	r1, [pc, #308]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800927e:	4313      	orrs	r3, r2
 8009280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d040      	beq.n	8009310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d107      	bne.n	80092a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009296:	4b47      	ldr	r3, [pc, #284]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d115      	bne.n	80092ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e07f      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d107      	bne.n	80092be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092ae:	4b41      	ldr	r3, [pc, #260]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e073      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092be:	4b3d      	ldr	r3, [pc, #244]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e06b      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092ce:	4b39      	ldr	r3, [pc, #228]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f023 0203 	bic.w	r2, r3, #3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	4936      	ldr	r1, [pc, #216]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092e0:	f7ff fa0a 	bl	80086f8 <HAL_GetTick>
 80092e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e6:	e00a      	b.n	80092fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092e8:	f7ff fa06 	bl	80086f8 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d901      	bls.n	80092fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e053      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092fe:	4b2d      	ldr	r3, [pc, #180]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f003 020c 	and.w	r2, r3, #12
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	429a      	cmp	r2, r3
 800930e:	d1eb      	bne.n	80092e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009310:	4b27      	ldr	r3, [pc, #156]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d210      	bcs.n	8009340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800931e:	4b24      	ldr	r3, [pc, #144]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f023 0207 	bic.w	r2, r3, #7
 8009326:	4922      	ldr	r1, [pc, #136]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	4313      	orrs	r3, r2
 800932c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800932e:	4b20      	ldr	r3, [pc, #128]	@ (80093b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d001      	beq.n	8009340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e032      	b.n	80093a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800934c:	4b19      	ldr	r3, [pc, #100]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	4916      	ldr	r1, [pc, #88]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800935a:	4313      	orrs	r3, r2
 800935c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0308 	and.w	r3, r3, #8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d009      	beq.n	800937e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800936a:	4b12      	ldr	r3, [pc, #72]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	490e      	ldr	r1, [pc, #56]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800937a:	4313      	orrs	r3, r2
 800937c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800937e:	f000 f821 	bl	80093c4 <HAL_RCC_GetSysClockFreq>
 8009382:	4602      	mov	r2, r0
 8009384:	4b0b      	ldr	r3, [pc, #44]	@ (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	091b      	lsrs	r3, r3, #4
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	490a      	ldr	r1, [pc, #40]	@ (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009390:	5ccb      	ldrb	r3, [r1, r3]
 8009392:	fa22 f303 	lsr.w	r3, r2, r3
 8009396:	4a09      	ldr	r2, [pc, #36]	@ (80093bc <HAL_RCC_ClockConfig+0x1cc>)
 8009398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800939a:	4b09      	ldr	r3, [pc, #36]	@ (80093c0 <HAL_RCC_ClockConfig+0x1d0>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff f968 	bl	8008674 <HAL_InitTick>

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	40022000 	.word	0x40022000
 80093b4:	40021000 	.word	0x40021000
 80093b8:	0800a2c8 	.word	0x0800a2c8
 80093bc:	20000000 	.word	0x20000000
 80093c0:	20000004 	.word	0x20000004

080093c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]
 80093d2:	2300      	movs	r3, #0
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	2300      	movs	r3, #0
 80093d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80093de:	4b1e      	ldr	r3, [pc, #120]	@ (8009458 <HAL_RCC_GetSysClockFreq+0x94>)
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f003 030c 	and.w	r3, r3, #12
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d002      	beq.n	80093f4 <HAL_RCC_GetSysClockFreq+0x30>
 80093ee:	2b08      	cmp	r3, #8
 80093f0:	d003      	beq.n	80093fa <HAL_RCC_GetSysClockFreq+0x36>
 80093f2:	e027      	b.n	8009444 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80093f4:	4b19      	ldr	r3, [pc, #100]	@ (800945c <HAL_RCC_GetSysClockFreq+0x98>)
 80093f6:	613b      	str	r3, [r7, #16]
      break;
 80093f8:	e027      	b.n	800944a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	0c9b      	lsrs	r3, r3, #18
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	4a17      	ldr	r2, [pc, #92]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009404:	5cd3      	ldrb	r3, [r2, r3]
 8009406:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d010      	beq.n	8009434 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009412:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <HAL_RCC_GetSysClockFreq+0x94>)
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	0c5b      	lsrs	r3, r3, #17
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	4a11      	ldr	r2, [pc, #68]	@ (8009464 <HAL_RCC_GetSysClockFreq+0xa0>)
 800941e:	5cd3      	ldrb	r3, [r2, r3]
 8009420:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a0d      	ldr	r2, [pc, #52]	@ (800945c <HAL_RCC_GetSysClockFreq+0x98>)
 8009426:	fb03 f202 	mul.w	r2, r3, r2
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e004      	b.n	800943e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a0c      	ldr	r2, [pc, #48]	@ (8009468 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009438:	fb02 f303 	mul.w	r3, r2, r3
 800943c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	613b      	str	r3, [r7, #16]
      break;
 8009442:	e002      	b.n	800944a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009444:	4b05      	ldr	r3, [pc, #20]	@ (800945c <HAL_RCC_GetSysClockFreq+0x98>)
 8009446:	613b      	str	r3, [r7, #16]
      break;
 8009448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800944a:	693b      	ldr	r3, [r7, #16]
}
 800944c:	4618      	mov	r0, r3
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40021000 	.word	0x40021000
 800945c:	007a1200 	.word	0x007a1200
 8009460:	0800a2e0 	.word	0x0800a2e0
 8009464:	0800a2f0 	.word	0x0800a2f0
 8009468:	003d0900 	.word	0x003d0900

0800946c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009470:	4b02      	ldr	r3, [pc, #8]	@ (800947c <HAL_RCC_GetHCLKFreq+0x10>)
 8009472:	681b      	ldr	r3, [r3, #0]
}
 8009474:	4618      	mov	r0, r3
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr
 800947c:	20000000 	.word	0x20000000

08009480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009484:	f7ff fff2 	bl	800946c <HAL_RCC_GetHCLKFreq>
 8009488:	4602      	mov	r2, r0
 800948a:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	0a1b      	lsrs	r3, r3, #8
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	4903      	ldr	r1, [pc, #12]	@ (80094a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009496:	5ccb      	ldrb	r3, [r1, r3]
 8009498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800949c:	4618      	mov	r0, r3
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	40021000 	.word	0x40021000
 80094a4:	0800a2d8 	.word	0x0800a2d8

080094a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80094ac:	f7ff ffde 	bl	800946c <HAL_RCC_GetHCLKFreq>
 80094b0:	4602      	mov	r2, r0
 80094b2:	4b05      	ldr	r3, [pc, #20]	@ (80094c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	0adb      	lsrs	r3, r3, #11
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	4903      	ldr	r1, [pc, #12]	@ (80094cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80094be:	5ccb      	ldrb	r3, [r1, r3]
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40021000 	.word	0x40021000
 80094cc:	0800a2d8 	.word	0x0800a2d8

080094d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80094d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009504 <RCC_Delay+0x34>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009508 <RCC_Delay+0x38>)
 80094de:	fba2 2303 	umull	r2, r3, r2, r3
 80094e2:	0a5b      	lsrs	r3, r3, #9
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	fb02 f303 	mul.w	r3, r2, r3
 80094ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80094ec:	bf00      	nop
  }
  while (Delay --);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1e5a      	subs	r2, r3, #1
 80094f2:	60fa      	str	r2, [r7, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f9      	bne.n	80094ec <RCC_Delay+0x1c>
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc80      	pop	{r7}
 8009502:	4770      	bx	lr
 8009504:	20000000 	.word	0x20000000
 8009508:	10624dd3 	.word	0x10624dd3

0800950c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e042      	b.n	80095a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7fe ff5e 	bl	80083f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2224      	movs	r2, #36	@ 0x24
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800954e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f971 	bl	8009838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695a      	ldr	r2, [r3, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2220      	movs	r2, #32
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	@ 0x28
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	d175      	bne.n	80096b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_UART_Transmit+0x2c>
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e06e      	b.n	80096ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2221      	movs	r2, #33	@ 0x21
 80095e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095ea:	f7ff f885 	bl	80086f8 <HAL_GetTick>
 80095ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	88fa      	ldrh	r2, [r7, #6]
 80095fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009604:	d108      	bne.n	8009618 <HAL_UART_Transmit+0x6c>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d104      	bne.n	8009618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	61bb      	str	r3, [r7, #24]
 8009616:	e003      	b.n	8009620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009620:	e02e      	b.n	8009680 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2200      	movs	r2, #0
 800962a:	2180      	movs	r1, #128	@ 0x80
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 f848 	bl	80096c2 <UART_WaitOnFlagUntilTimeout>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e03a      	b.n	80096ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	3302      	adds	r3, #2
 800965e:	61bb      	str	r3, [r7, #24]
 8009660:	e007      	b.n	8009672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	3301      	adds	r3, #1
 8009670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009676:	b29b      	uxth	r3, r3
 8009678:	3b01      	subs	r3, #1
 800967a:	b29a      	uxth	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009684:	b29b      	uxth	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1cb      	bne.n	8009622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2200      	movs	r2, #0
 8009692:	2140      	movs	r1, #64	@ 0x40
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f814 	bl	80096c2 <UART_WaitOnFlagUntilTimeout>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e006      	b.n	80096ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d2:	e03b      	b.n	800974c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096da:	d037      	beq.n	800974c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096dc:	f7ff f80c 	bl	80086f8 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	6a3a      	ldr	r2, [r7, #32]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d302      	bcc.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e03a      	b.n	800976c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d023      	beq.n	800974c <UART_WaitOnFlagUntilTimeout+0x8a>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b80      	cmp	r3, #128	@ 0x80
 8009708:	d020      	beq.n	800974c <UART_WaitOnFlagUntilTimeout+0x8a>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b40      	cmp	r3, #64	@ 0x40
 800970e:	d01d      	beq.n	800974c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	2b08      	cmp	r3, #8
 800971c:	d116      	bne.n	800974c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800971e:	2300      	movs	r3, #0
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 f81d 	bl	8009774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2208      	movs	r2, #8
 800973e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e00f      	b.n	800976c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4013      	ands	r3, r2
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	429a      	cmp	r2, r3
 800975a:	bf0c      	ite	eq
 800975c:	2301      	moveq	r3, #1
 800975e:	2300      	movne	r3, #0
 8009760:	b2db      	uxtb	r3, r3
 8009762:	461a      	mov	r2, r3
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	429a      	cmp	r2, r3
 8009768:	d0b4      	beq.n	80096d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b095      	sub	sp, #84	@ 0x54
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	330c      	adds	r3, #12
 800979a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800979c:	643a      	str	r2, [r7, #64]	@ 0x40
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e5      	bne.n	800977c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3314      	adds	r3, #20
 80097b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	f023 0301 	bic.w	r3, r3, #1
 80097c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3314      	adds	r3, #20
 80097ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d119      	bne.n	8009820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	330c      	adds	r3, #12
 80097f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f023 0310 	bic.w	r3, r3, #16
 8009802:	647b      	str	r3, [r7, #68]	@ 0x44
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	330c      	adds	r3, #12
 800980a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800980c:	61ba      	str	r2, [r7, #24]
 800980e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6979      	ldr	r1, [r7, #20]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	613b      	str	r3, [r7, #16]
   return(result);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e5      	bne.n	80097ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2220      	movs	r2, #32
 8009824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800982e:	bf00      	nop
 8009830:	3754      	adds	r7, #84	@ 0x54
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	4313      	orrs	r3, r2
 8009866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009872:	f023 030c 	bic.w	r3, r3, #12
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	430b      	orrs	r3, r1
 800987e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a2c      	ldr	r2, [pc, #176]	@ (800994c <UART_SetConfig+0x114>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d103      	bne.n	80098a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80098a0:	f7ff fe02 	bl	80094a8 <HAL_RCC_GetPCLK2Freq>
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	e002      	b.n	80098ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80098a8:	f7ff fdea 	bl	8009480 <HAL_RCC_GetPCLK1Freq>
 80098ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009a      	lsls	r2, r3, #2
 80098b8:	441a      	add	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c4:	4a22      	ldr	r2, [pc, #136]	@ (8009950 <UART_SetConfig+0x118>)
 80098c6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	0119      	lsls	r1, r3, #4
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009a      	lsls	r2, r3, #2
 80098d8:	441a      	add	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80098e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009950 <UART_SetConfig+0x118>)
 80098e6:	fba3 0302 	umull	r0, r3, r3, r2
 80098ea:	095b      	lsrs	r3, r3, #5
 80098ec:	2064      	movs	r0, #100	@ 0x64
 80098ee:	fb00 f303 	mul.w	r3, r0, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	3332      	adds	r3, #50	@ 0x32
 80098f8:	4a15      	ldr	r2, [pc, #84]	@ (8009950 <UART_SetConfig+0x118>)
 80098fa:	fba2 2303 	umull	r2, r3, r2, r3
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009904:	4419      	add	r1, r3
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009a      	lsls	r2, r3, #2
 8009910:	441a      	add	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	fbb2 f2f3 	udiv	r2, r2, r3
 800991c:	4b0c      	ldr	r3, [pc, #48]	@ (8009950 <UART_SetConfig+0x118>)
 800991e:	fba3 0302 	umull	r0, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	2064      	movs	r0, #100	@ 0x64
 8009926:	fb00 f303 	mul.w	r3, r0, r3
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	3332      	adds	r3, #50	@ 0x32
 8009930:	4a07      	ldr	r2, [pc, #28]	@ (8009950 <UART_SetConfig+0x118>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f003 020f 	and.w	r2, r3, #15
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	440a      	add	r2, r1
 8009942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	40013800 	.word	0x40013800
 8009950:	51eb851f 	.word	0x51eb851f

08009954 <std>:
 8009954:	2300      	movs	r3, #0
 8009956:	b510      	push	{r4, lr}
 8009958:	4604      	mov	r4, r0
 800995a:	e9c0 3300 	strd	r3, r3, [r0]
 800995e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009962:	6083      	str	r3, [r0, #8]
 8009964:	8181      	strh	r1, [r0, #12]
 8009966:	6643      	str	r3, [r0, #100]	@ 0x64
 8009968:	81c2      	strh	r2, [r0, #14]
 800996a:	6183      	str	r3, [r0, #24]
 800996c:	4619      	mov	r1, r3
 800996e:	2208      	movs	r2, #8
 8009970:	305c      	adds	r0, #92	@ 0x5c
 8009972:	f000 f9e7 	bl	8009d44 <memset>
 8009976:	4b0d      	ldr	r3, [pc, #52]	@ (80099ac <std+0x58>)
 8009978:	6224      	str	r4, [r4, #32]
 800997a:	6263      	str	r3, [r4, #36]	@ 0x24
 800997c:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <std+0x5c>)
 800997e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009980:	4b0c      	ldr	r3, [pc, #48]	@ (80099b4 <std+0x60>)
 8009982:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <std+0x64>)
 8009986:	6323      	str	r3, [r4, #48]	@ 0x30
 8009988:	4b0c      	ldr	r3, [pc, #48]	@ (80099bc <std+0x68>)
 800998a:	429c      	cmp	r4, r3
 800998c:	d006      	beq.n	800999c <std+0x48>
 800998e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009992:	4294      	cmp	r4, r2
 8009994:	d002      	beq.n	800999c <std+0x48>
 8009996:	33d0      	adds	r3, #208	@ 0xd0
 8009998:	429c      	cmp	r4, r3
 800999a:	d105      	bne.n	80099a8 <std+0x54>
 800999c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a4:	f000 ba46 	b.w	8009e34 <__retarget_lock_init_recursive>
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	bf00      	nop
 80099ac:	08009b95 	.word	0x08009b95
 80099b0:	08009bb7 	.word	0x08009bb7
 80099b4:	08009bef 	.word	0x08009bef
 80099b8:	08009c13 	.word	0x08009c13
 80099bc:	200000d4 	.word	0x200000d4

080099c0 <stdio_exit_handler>:
 80099c0:	4a02      	ldr	r2, [pc, #8]	@ (80099cc <stdio_exit_handler+0xc>)
 80099c2:	4903      	ldr	r1, [pc, #12]	@ (80099d0 <stdio_exit_handler+0x10>)
 80099c4:	4803      	ldr	r0, [pc, #12]	@ (80099d4 <stdio_exit_handler+0x14>)
 80099c6:	f000 b869 	b.w	8009a9c <_fwalk_sglue>
 80099ca:	bf00      	nop
 80099cc:	2000000c 	.word	0x2000000c
 80099d0:	0800a129 	.word	0x0800a129
 80099d4:	2000001c 	.word	0x2000001c

080099d8 <cleanup_stdio>:
 80099d8:	6841      	ldr	r1, [r0, #4]
 80099da:	4b0c      	ldr	r3, [pc, #48]	@ (8009a0c <cleanup_stdio+0x34>)
 80099dc:	b510      	push	{r4, lr}
 80099de:	4299      	cmp	r1, r3
 80099e0:	4604      	mov	r4, r0
 80099e2:	d001      	beq.n	80099e8 <cleanup_stdio+0x10>
 80099e4:	f000 fba0 	bl	800a128 <_fflush_r>
 80099e8:	68a1      	ldr	r1, [r4, #8]
 80099ea:	4b09      	ldr	r3, [pc, #36]	@ (8009a10 <cleanup_stdio+0x38>)
 80099ec:	4299      	cmp	r1, r3
 80099ee:	d002      	beq.n	80099f6 <cleanup_stdio+0x1e>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 fb99 	bl	800a128 <_fflush_r>
 80099f6:	68e1      	ldr	r1, [r4, #12]
 80099f8:	4b06      	ldr	r3, [pc, #24]	@ (8009a14 <cleanup_stdio+0x3c>)
 80099fa:	4299      	cmp	r1, r3
 80099fc:	d004      	beq.n	8009a08 <cleanup_stdio+0x30>
 80099fe:	4620      	mov	r0, r4
 8009a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a04:	f000 bb90 	b.w	800a128 <_fflush_r>
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200000d4 	.word	0x200000d4
 8009a10:	2000013c 	.word	0x2000013c
 8009a14:	200001a4 	.word	0x200001a4

08009a18 <global_stdio_init.part.0>:
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <global_stdio_init.part.0+0x30>)
 8009a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a4c <global_stdio_init.part.0+0x34>)
 8009a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a50 <global_stdio_init.part.0+0x38>)
 8009a20:	4620      	mov	r0, r4
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	2104      	movs	r1, #4
 8009a26:	2200      	movs	r2, #0
 8009a28:	f7ff ff94 	bl	8009954 <std>
 8009a2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a30:	2201      	movs	r2, #1
 8009a32:	2109      	movs	r1, #9
 8009a34:	f7ff ff8e 	bl	8009954 <std>
 8009a38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a42:	2112      	movs	r1, #18
 8009a44:	f7ff bf86 	b.w	8009954 <std>
 8009a48:	2000020c 	.word	0x2000020c
 8009a4c:	200000d4 	.word	0x200000d4
 8009a50:	080099c1 	.word	0x080099c1

08009a54 <__sfp_lock_acquire>:
 8009a54:	4801      	ldr	r0, [pc, #4]	@ (8009a5c <__sfp_lock_acquire+0x8>)
 8009a56:	f000 b9ee 	b.w	8009e36 <__retarget_lock_acquire_recursive>
 8009a5a:	bf00      	nop
 8009a5c:	20000215 	.word	0x20000215

08009a60 <__sfp_lock_release>:
 8009a60:	4801      	ldr	r0, [pc, #4]	@ (8009a68 <__sfp_lock_release+0x8>)
 8009a62:	f000 b9e9 	b.w	8009e38 <__retarget_lock_release_recursive>
 8009a66:	bf00      	nop
 8009a68:	20000215 	.word	0x20000215

08009a6c <__sinit>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	4604      	mov	r4, r0
 8009a70:	f7ff fff0 	bl	8009a54 <__sfp_lock_acquire>
 8009a74:	6a23      	ldr	r3, [r4, #32]
 8009a76:	b11b      	cbz	r3, 8009a80 <__sinit+0x14>
 8009a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a7c:	f7ff bff0 	b.w	8009a60 <__sfp_lock_release>
 8009a80:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <__sinit+0x28>)
 8009a82:	6223      	str	r3, [r4, #32]
 8009a84:	4b04      	ldr	r3, [pc, #16]	@ (8009a98 <__sinit+0x2c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1f5      	bne.n	8009a78 <__sinit+0xc>
 8009a8c:	f7ff ffc4 	bl	8009a18 <global_stdio_init.part.0>
 8009a90:	e7f2      	b.n	8009a78 <__sinit+0xc>
 8009a92:	bf00      	nop
 8009a94:	080099d9 	.word	0x080099d9
 8009a98:	2000020c 	.word	0x2000020c

08009a9c <_fwalk_sglue>:
 8009a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	4688      	mov	r8, r1
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aac:	f1b9 0901 	subs.w	r9, r9, #1
 8009ab0:	d505      	bpl.n	8009abe <_fwalk_sglue+0x22>
 8009ab2:	6824      	ldr	r4, [r4, #0]
 8009ab4:	2c00      	cmp	r4, #0
 8009ab6:	d1f7      	bne.n	8009aa8 <_fwalk_sglue+0xc>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009abe:	89ab      	ldrh	r3, [r5, #12]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d907      	bls.n	8009ad4 <_fwalk_sglue+0x38>
 8009ac4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	d003      	beq.n	8009ad4 <_fwalk_sglue+0x38>
 8009acc:	4629      	mov	r1, r5
 8009ace:	4638      	mov	r0, r7
 8009ad0:	47c0      	blx	r8
 8009ad2:	4306      	orrs	r6, r0
 8009ad4:	3568      	adds	r5, #104	@ 0x68
 8009ad6:	e7e9      	b.n	8009aac <_fwalk_sglue+0x10>

08009ad8 <_puts_r>:
 8009ad8:	6a03      	ldr	r3, [r0, #32]
 8009ada:	b570      	push	{r4, r5, r6, lr}
 8009adc:	4605      	mov	r5, r0
 8009ade:	460e      	mov	r6, r1
 8009ae0:	6884      	ldr	r4, [r0, #8]
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <_puts_r+0x10>
 8009ae4:	f7ff ffc2 	bl	8009a6c <__sinit>
 8009ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aea:	07db      	lsls	r3, r3, #31
 8009aec:	d405      	bmi.n	8009afa <_puts_r+0x22>
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	0598      	lsls	r0, r3, #22
 8009af2:	d402      	bmi.n	8009afa <_puts_r+0x22>
 8009af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009af6:	f000 f99e 	bl	8009e36 <__retarget_lock_acquire_recursive>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	0719      	lsls	r1, r3, #28
 8009afe:	d502      	bpl.n	8009b06 <_puts_r+0x2e>
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d135      	bne.n	8009b72 <_puts_r+0x9a>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f000 f8c5 	bl	8009c98 <__swsetup_r>
 8009b0e:	b380      	cbz	r0, 8009b72 <_puts_r+0x9a>
 8009b10:	f04f 35ff 	mov.w	r5, #4294967295
 8009b14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b16:	07da      	lsls	r2, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_puts_r+0x4e>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	059b      	lsls	r3, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_puts_r+0x4e>
 8009b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b22:	f000 f989 	bl	8009e38 <__retarget_lock_release_recursive>
 8009b26:	4628      	mov	r0, r5
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da04      	bge.n	8009b38 <_puts_r+0x60>
 8009b2e:	69a2      	ldr	r2, [r4, #24]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	dc17      	bgt.n	8009b64 <_puts_r+0x8c>
 8009b34:	290a      	cmp	r1, #10
 8009b36:	d015      	beq.n	8009b64 <_puts_r+0x8c>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	6022      	str	r2, [r4, #0]
 8009b3e:	7019      	strb	r1, [r3, #0]
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b46:	3b01      	subs	r3, #1
 8009b48:	60a3      	str	r3, [r4, #8]
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d1ed      	bne.n	8009b2a <_puts_r+0x52>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	da11      	bge.n	8009b76 <_puts_r+0x9e>
 8009b52:	4622      	mov	r2, r4
 8009b54:	210a      	movs	r1, #10
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 f85f 	bl	8009c1a <__swbuf_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d0d7      	beq.n	8009b10 <_puts_r+0x38>
 8009b60:	250a      	movs	r5, #10
 8009b62:	e7d7      	b.n	8009b14 <_puts_r+0x3c>
 8009b64:	4622      	mov	r2, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f857 	bl	8009c1a <__swbuf_r>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d1e7      	bne.n	8009b40 <_puts_r+0x68>
 8009b70:	e7ce      	b.n	8009b10 <_puts_r+0x38>
 8009b72:	3e01      	subs	r6, #1
 8009b74:	e7e4      	b.n	8009b40 <_puts_r+0x68>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	6022      	str	r2, [r4, #0]
 8009b7c:	220a      	movs	r2, #10
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	e7ee      	b.n	8009b60 <_puts_r+0x88>
	...

08009b84 <puts>:
 8009b84:	4b02      	ldr	r3, [pc, #8]	@ (8009b90 <puts+0xc>)
 8009b86:	4601      	mov	r1, r0
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	f7ff bfa5 	b.w	8009ad8 <_puts_r>
 8009b8e:	bf00      	nop
 8009b90:	20000018 	.word	0x20000018

08009b94 <__sread>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	460c      	mov	r4, r1
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	f000 f8fc 	bl	8009d98 <_read_r>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	bfab      	itete	ge
 8009ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ba8:	181b      	addge	r3, r3, r0
 8009baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bae:	bfac      	ite	ge
 8009bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009bb2:	81a3      	strhlt	r3, [r4, #12]
 8009bb4:	bd10      	pop	{r4, pc}

08009bb6 <__swrite>:
 8009bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bba:	461f      	mov	r7, r3
 8009bbc:	898b      	ldrh	r3, [r1, #12]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	05db      	lsls	r3, r3, #23
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	d505      	bpl.n	8009bd4 <__swrite+0x1e>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd0:	f000 f8d0 	bl	8009d74 <_lseek_r>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	4628      	mov	r0, r5
 8009be0:	463b      	mov	r3, r7
 8009be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	f000 b8e7 	b.w	8009dbc <_write_r>

08009bee <__sseek>:
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf6:	f000 f8bd 	bl	8009d74 <_lseek_r>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	bf15      	itete	ne
 8009c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c0a:	81a3      	strheq	r3, [r4, #12]
 8009c0c:	bf18      	it	ne
 8009c0e:	81a3      	strhne	r3, [r4, #12]
 8009c10:	bd10      	pop	{r4, pc}

08009c12 <__sclose>:
 8009c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c16:	f000 b89d 	b.w	8009d54 <_close_r>

08009c1a <__swbuf_r>:
 8009c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	4614      	mov	r4, r2
 8009c20:	4605      	mov	r5, r0
 8009c22:	b118      	cbz	r0, 8009c2c <__swbuf_r+0x12>
 8009c24:	6a03      	ldr	r3, [r0, #32]
 8009c26:	b90b      	cbnz	r3, 8009c2c <__swbuf_r+0x12>
 8009c28:	f7ff ff20 	bl	8009a6c <__sinit>
 8009c2c:	69a3      	ldr	r3, [r4, #24]
 8009c2e:	60a3      	str	r3, [r4, #8]
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	071a      	lsls	r2, r3, #28
 8009c34:	d501      	bpl.n	8009c3a <__swbuf_r+0x20>
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	b943      	cbnz	r3, 8009c4c <__swbuf_r+0x32>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 f82b 	bl	8009c98 <__swsetup_r>
 8009c42:	b118      	cbz	r0, 8009c4c <__swbuf_r+0x32>
 8009c44:	f04f 37ff 	mov.w	r7, #4294967295
 8009c48:	4638      	mov	r0, r7
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	b2f6      	uxtb	r6, r6
 8009c52:	1a98      	subs	r0, r3, r2
 8009c54:	6963      	ldr	r3, [r4, #20]
 8009c56:	4637      	mov	r7, r6
 8009c58:	4283      	cmp	r3, r0
 8009c5a:	dc05      	bgt.n	8009c68 <__swbuf_r+0x4e>
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f000 fa62 	bl	800a128 <_fflush_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d1ed      	bne.n	8009c44 <__swbuf_r+0x2a>
 8009c68:	68a3      	ldr	r3, [r4, #8]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	701e      	strb	r6, [r3, #0]
 8009c76:	6962      	ldr	r2, [r4, #20]
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d004      	beq.n	8009c88 <__swbuf_r+0x6e>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	07db      	lsls	r3, r3, #31
 8009c82:	d5e1      	bpl.n	8009c48 <__swbuf_r+0x2e>
 8009c84:	2e0a      	cmp	r6, #10
 8009c86:	d1df      	bne.n	8009c48 <__swbuf_r+0x2e>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 fa4c 	bl	800a128 <_fflush_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d0d9      	beq.n	8009c48 <__swbuf_r+0x2e>
 8009c94:	e7d6      	b.n	8009c44 <__swbuf_r+0x2a>
	...

08009c98 <__swsetup_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4b29      	ldr	r3, [pc, #164]	@ (8009d40 <__swsetup_r+0xa8>)
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	b118      	cbz	r0, 8009cac <__swsetup_r+0x14>
 8009ca4:	6a03      	ldr	r3, [r0, #32]
 8009ca6:	b90b      	cbnz	r3, 8009cac <__swsetup_r+0x14>
 8009ca8:	f7ff fee0 	bl	8009a6c <__sinit>
 8009cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb0:	0719      	lsls	r1, r3, #28
 8009cb2:	d422      	bmi.n	8009cfa <__swsetup_r+0x62>
 8009cb4:	06da      	lsls	r2, r3, #27
 8009cb6:	d407      	bmi.n	8009cc8 <__swsetup_r+0x30>
 8009cb8:	2209      	movs	r2, #9
 8009cba:	602a      	str	r2, [r5, #0]
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	e033      	b.n	8009d30 <__swsetup_r+0x98>
 8009cc8:	0758      	lsls	r0, r3, #29
 8009cca:	d512      	bpl.n	8009cf2 <__swsetup_r+0x5a>
 8009ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cce:	b141      	cbz	r1, 8009ce2 <__swsetup_r+0x4a>
 8009cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cd4:	4299      	cmp	r1, r3
 8009cd6:	d002      	beq.n	8009cde <__swsetup_r+0x46>
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 f8af 	bl	8009e3c <_free_r>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	2300      	movs	r3, #0
 8009cec:	6063      	str	r3, [r4, #4]
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f043 0308 	orr.w	r3, r3, #8
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	b94b      	cbnz	r3, 8009d12 <__swsetup_r+0x7a>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d08:	d003      	beq.n	8009d12 <__swsetup_r+0x7a>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 fa58 	bl	800a1c2 <__smakebuf_r>
 8009d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d16:	f013 0201 	ands.w	r2, r3, #1
 8009d1a:	d00a      	beq.n	8009d32 <__swsetup_r+0x9a>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	60a2      	str	r2, [r4, #8]
 8009d20:	6962      	ldr	r2, [r4, #20]
 8009d22:	4252      	negs	r2, r2
 8009d24:	61a2      	str	r2, [r4, #24]
 8009d26:	6922      	ldr	r2, [r4, #16]
 8009d28:	b942      	cbnz	r2, 8009d3c <__swsetup_r+0xa4>
 8009d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d2e:	d1c5      	bne.n	8009cbc <__swsetup_r+0x24>
 8009d30:	bd38      	pop	{r3, r4, r5, pc}
 8009d32:	0799      	lsls	r1, r3, #30
 8009d34:	bf58      	it	pl
 8009d36:	6962      	ldrpl	r2, [r4, #20]
 8009d38:	60a2      	str	r2, [r4, #8]
 8009d3a:	e7f4      	b.n	8009d26 <__swsetup_r+0x8e>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e7f7      	b.n	8009d30 <__swsetup_r+0x98>
 8009d40:	20000018 	.word	0x20000018

08009d44 <memset>:
 8009d44:	4603      	mov	r3, r0
 8009d46:	4402      	add	r2, r0
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d100      	bne.n	8009d4e <memset+0xa>
 8009d4c:	4770      	bx	lr
 8009d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d52:	e7f9      	b.n	8009d48 <memset+0x4>

08009d54 <_close_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	2300      	movs	r3, #0
 8009d58:	4d05      	ldr	r5, [pc, #20]	@ (8009d70 <_close_r+0x1c>)
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	602b      	str	r3, [r5, #0]
 8009d60:	f7fe fbd7 	bl	8008512 <_close>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_close_r+0x1a>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_close_r+0x1a>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20000210 	.word	0x20000210

08009d74 <_lseek_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4d05      	ldr	r5, [pc, #20]	@ (8009d94 <_lseek_r+0x20>)
 8009d80:	602a      	str	r2, [r5, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	f7fe fbe9 	bl	800855a <_lseek>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d102      	bne.n	8009d92 <_lseek_r+0x1e>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	b103      	cbz	r3, 8009d92 <_lseek_r+0x1e>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	20000210 	.word	0x20000210

08009d98 <_read_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	4611      	mov	r1, r2
 8009da0:	2200      	movs	r2, #0
 8009da2:	4d05      	ldr	r5, [pc, #20]	@ (8009db8 <_read_r+0x20>)
 8009da4:	602a      	str	r2, [r5, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f7fe fb96 	bl	80084d8 <_read>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_read_r+0x1e>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_read_r+0x1e>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20000210 	.word	0x20000210

08009dbc <_write_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4d05      	ldr	r5, [pc, #20]	@ (8009ddc <_write_r+0x20>)
 8009dc8:	602a      	str	r2, [r5, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f7fe f9be 	bl	800814c <_write>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_write_r+0x1e>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_write_r+0x1e>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	20000210 	.word	0x20000210

08009de0 <__errno>:
 8009de0:	4b01      	ldr	r3, [pc, #4]	@ (8009de8 <__errno+0x8>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000018 	.word	0x20000018

08009dec <__libc_init_array>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	2600      	movs	r6, #0
 8009df0:	4d0c      	ldr	r5, [pc, #48]	@ (8009e24 <__libc_init_array+0x38>)
 8009df2:	4c0d      	ldr	r4, [pc, #52]	@ (8009e28 <__libc_init_array+0x3c>)
 8009df4:	1b64      	subs	r4, r4, r5
 8009df6:	10a4      	asrs	r4, r4, #2
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	d109      	bne.n	8009e10 <__libc_init_array+0x24>
 8009dfc:	f000 fa50 	bl	800a2a0 <_init>
 8009e00:	2600      	movs	r6, #0
 8009e02:	4d0a      	ldr	r5, [pc, #40]	@ (8009e2c <__libc_init_array+0x40>)
 8009e04:	4c0a      	ldr	r4, [pc, #40]	@ (8009e30 <__libc_init_array+0x44>)
 8009e06:	1b64      	subs	r4, r4, r5
 8009e08:	10a4      	asrs	r4, r4, #2
 8009e0a:	42a6      	cmp	r6, r4
 8009e0c:	d105      	bne.n	8009e1a <__libc_init_array+0x2e>
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}
 8009e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e14:	4798      	blx	r3
 8009e16:	3601      	adds	r6, #1
 8009e18:	e7ee      	b.n	8009df8 <__libc_init_array+0xc>
 8009e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e1e:	4798      	blx	r3
 8009e20:	3601      	adds	r6, #1
 8009e22:	e7f2      	b.n	8009e0a <__libc_init_array+0x1e>
 8009e24:	0800a2f4 	.word	0x0800a2f4
 8009e28:	0800a2f4 	.word	0x0800a2f4
 8009e2c:	0800a2f4 	.word	0x0800a2f4
 8009e30:	0800a2f8 	.word	0x0800a2f8

08009e34 <__retarget_lock_init_recursive>:
 8009e34:	4770      	bx	lr

08009e36 <__retarget_lock_acquire_recursive>:
 8009e36:	4770      	bx	lr

08009e38 <__retarget_lock_release_recursive>:
 8009e38:	4770      	bx	lr
	...

08009e3c <_free_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4605      	mov	r5, r0
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d040      	beq.n	8009ec6 <_free_r+0x8a>
 8009e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e48:	1f0c      	subs	r4, r1, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	bfb8      	it	lt
 8009e4e:	18e4      	addlt	r4, r4, r3
 8009e50:	f000 f8de 	bl	800a010 <__malloc_lock>
 8009e54:	4a1c      	ldr	r2, [pc, #112]	@ (8009ec8 <_free_r+0x8c>)
 8009e56:	6813      	ldr	r3, [r2, #0]
 8009e58:	b933      	cbnz	r3, 8009e68 <_free_r+0x2c>
 8009e5a:	6063      	str	r3, [r4, #4]
 8009e5c:	6014      	str	r4, [r2, #0]
 8009e5e:	4628      	mov	r0, r5
 8009e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e64:	f000 b8da 	b.w	800a01c <__malloc_unlock>
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	d908      	bls.n	8009e7e <_free_r+0x42>
 8009e6c:	6820      	ldr	r0, [r4, #0]
 8009e6e:	1821      	adds	r1, r4, r0
 8009e70:	428b      	cmp	r3, r1
 8009e72:	bf01      	itttt	eq
 8009e74:	6819      	ldreq	r1, [r3, #0]
 8009e76:	685b      	ldreq	r3, [r3, #4]
 8009e78:	1809      	addeq	r1, r1, r0
 8009e7a:	6021      	streq	r1, [r4, #0]
 8009e7c:	e7ed      	b.n	8009e5a <_free_r+0x1e>
 8009e7e:	461a      	mov	r2, r3
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	b10b      	cbz	r3, 8009e88 <_free_r+0x4c>
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	d9fa      	bls.n	8009e7e <_free_r+0x42>
 8009e88:	6811      	ldr	r1, [r2, #0]
 8009e8a:	1850      	adds	r0, r2, r1
 8009e8c:	42a0      	cmp	r0, r4
 8009e8e:	d10b      	bne.n	8009ea8 <_free_r+0x6c>
 8009e90:	6820      	ldr	r0, [r4, #0]
 8009e92:	4401      	add	r1, r0
 8009e94:	1850      	adds	r0, r2, r1
 8009e96:	4283      	cmp	r3, r0
 8009e98:	6011      	str	r1, [r2, #0]
 8009e9a:	d1e0      	bne.n	8009e5e <_free_r+0x22>
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	4408      	add	r0, r1
 8009ea2:	6010      	str	r0, [r2, #0]
 8009ea4:	6053      	str	r3, [r2, #4]
 8009ea6:	e7da      	b.n	8009e5e <_free_r+0x22>
 8009ea8:	d902      	bls.n	8009eb0 <_free_r+0x74>
 8009eaa:	230c      	movs	r3, #12
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	e7d6      	b.n	8009e5e <_free_r+0x22>
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	1821      	adds	r1, r4, r0
 8009eb4:	428b      	cmp	r3, r1
 8009eb6:	bf01      	itttt	eq
 8009eb8:	6819      	ldreq	r1, [r3, #0]
 8009eba:	685b      	ldreq	r3, [r3, #4]
 8009ebc:	1809      	addeq	r1, r1, r0
 8009ebe:	6021      	streq	r1, [r4, #0]
 8009ec0:	6063      	str	r3, [r4, #4]
 8009ec2:	6054      	str	r4, [r2, #4]
 8009ec4:	e7cb      	b.n	8009e5e <_free_r+0x22>
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	2000021c 	.word	0x2000021c

08009ecc <sbrk_aligned>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	4e0f      	ldr	r6, [pc, #60]	@ (8009f0c <sbrk_aligned+0x40>)
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	6831      	ldr	r1, [r6, #0]
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	b911      	cbnz	r1, 8009ede <sbrk_aligned+0x12>
 8009ed8:	f000 f9d2 	bl	800a280 <_sbrk_r>
 8009edc:	6030      	str	r0, [r6, #0]
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 f9cd 	bl	800a280 <_sbrk_r>
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	d103      	bne.n	8009ef2 <sbrk_aligned+0x26>
 8009eea:	f04f 34ff 	mov.w	r4, #4294967295
 8009eee:	4620      	mov	r0, r4
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	1cc4      	adds	r4, r0, #3
 8009ef4:	f024 0403 	bic.w	r4, r4, #3
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d0f8      	beq.n	8009eee <sbrk_aligned+0x22>
 8009efc:	1a21      	subs	r1, r4, r0
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f9be 	bl	800a280 <_sbrk_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d1f2      	bne.n	8009eee <sbrk_aligned+0x22>
 8009f08:	e7ef      	b.n	8009eea <sbrk_aligned+0x1e>
 8009f0a:	bf00      	nop
 8009f0c:	20000218 	.word	0x20000218

08009f10 <_malloc_r>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	1ccd      	adds	r5, r1, #3
 8009f16:	f025 0503 	bic.w	r5, r5, #3
 8009f1a:	3508      	adds	r5, #8
 8009f1c:	2d0c      	cmp	r5, #12
 8009f1e:	bf38      	it	cc
 8009f20:	250c      	movcc	r5, #12
 8009f22:	2d00      	cmp	r5, #0
 8009f24:	4606      	mov	r6, r0
 8009f26:	db01      	blt.n	8009f2c <_malloc_r+0x1c>
 8009f28:	42a9      	cmp	r1, r5
 8009f2a:	d904      	bls.n	8009f36 <_malloc_r+0x26>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	6033      	str	r3, [r6, #0]
 8009f30:	2000      	movs	r0, #0
 8009f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a00c <_malloc_r+0xfc>
 8009f3a:	f000 f869 	bl	800a010 <__malloc_lock>
 8009f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f42:	461c      	mov	r4, r3
 8009f44:	bb44      	cbnz	r4, 8009f98 <_malloc_r+0x88>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7ff ffbf 	bl	8009ecc <sbrk_aligned>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	4604      	mov	r4, r0
 8009f52:	d158      	bne.n	800a006 <_malloc_r+0xf6>
 8009f54:	f8d8 4000 	ldr.w	r4, [r8]
 8009f58:	4627      	mov	r7, r4
 8009f5a:	2f00      	cmp	r7, #0
 8009f5c:	d143      	bne.n	8009fe6 <_malloc_r+0xd6>
 8009f5e:	2c00      	cmp	r4, #0
 8009f60:	d04b      	beq.n	8009ffa <_malloc_r+0xea>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	4639      	mov	r1, r7
 8009f66:	4630      	mov	r0, r6
 8009f68:	eb04 0903 	add.w	r9, r4, r3
 8009f6c:	f000 f988 	bl	800a280 <_sbrk_r>
 8009f70:	4581      	cmp	r9, r0
 8009f72:	d142      	bne.n	8009ffa <_malloc_r+0xea>
 8009f74:	6821      	ldr	r1, [r4, #0]
 8009f76:	4630      	mov	r0, r6
 8009f78:	1a6d      	subs	r5, r5, r1
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	f7ff ffa6 	bl	8009ecc <sbrk_aligned>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d03a      	beq.n	8009ffa <_malloc_r+0xea>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	442b      	add	r3, r5
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	bb62      	cbnz	r2, 8009fec <_malloc_r+0xdc>
 8009f92:	f8c8 7000 	str.w	r7, [r8]
 8009f96:	e00f      	b.n	8009fb8 <_malloc_r+0xa8>
 8009f98:	6822      	ldr	r2, [r4, #0]
 8009f9a:	1b52      	subs	r2, r2, r5
 8009f9c:	d420      	bmi.n	8009fe0 <_malloc_r+0xd0>
 8009f9e:	2a0b      	cmp	r2, #11
 8009fa0:	d917      	bls.n	8009fd2 <_malloc_r+0xc2>
 8009fa2:	1961      	adds	r1, r4, r5
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	6025      	str	r5, [r4, #0]
 8009fa8:	bf18      	it	ne
 8009faa:	6059      	strne	r1, [r3, #4]
 8009fac:	6863      	ldr	r3, [r4, #4]
 8009fae:	bf08      	it	eq
 8009fb0:	f8c8 1000 	streq.w	r1, [r8]
 8009fb4:	5162      	str	r2, [r4, r5]
 8009fb6:	604b      	str	r3, [r1, #4]
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 f82f 	bl	800a01c <__malloc_unlock>
 8009fbe:	f104 000b 	add.w	r0, r4, #11
 8009fc2:	1d23      	adds	r3, r4, #4
 8009fc4:	f020 0007 	bic.w	r0, r0, #7
 8009fc8:	1ac2      	subs	r2, r0, r3
 8009fca:	bf1c      	itt	ne
 8009fcc:	1a1b      	subne	r3, r3, r0
 8009fce:	50a3      	strne	r3, [r4, r2]
 8009fd0:	e7af      	b.n	8009f32 <_malloc_r+0x22>
 8009fd2:	6862      	ldr	r2, [r4, #4]
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	bf0c      	ite	eq
 8009fd8:	f8c8 2000 	streq.w	r2, [r8]
 8009fdc:	605a      	strne	r2, [r3, #4]
 8009fde:	e7eb      	b.n	8009fb8 <_malloc_r+0xa8>
 8009fe0:	4623      	mov	r3, r4
 8009fe2:	6864      	ldr	r4, [r4, #4]
 8009fe4:	e7ae      	b.n	8009f44 <_malloc_r+0x34>
 8009fe6:	463c      	mov	r4, r7
 8009fe8:	687f      	ldr	r7, [r7, #4]
 8009fea:	e7b6      	b.n	8009f5a <_malloc_r+0x4a>
 8009fec:	461a      	mov	r2, r3
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d1fb      	bne.n	8009fec <_malloc_r+0xdc>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6053      	str	r3, [r2, #4]
 8009ff8:	e7de      	b.n	8009fb8 <_malloc_r+0xa8>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	6033      	str	r3, [r6, #0]
 800a000:	f000 f80c 	bl	800a01c <__malloc_unlock>
 800a004:	e794      	b.n	8009f30 <_malloc_r+0x20>
 800a006:	6005      	str	r5, [r0, #0]
 800a008:	e7d6      	b.n	8009fb8 <_malloc_r+0xa8>
 800a00a:	bf00      	nop
 800a00c:	2000021c 	.word	0x2000021c

0800a010 <__malloc_lock>:
 800a010:	4801      	ldr	r0, [pc, #4]	@ (800a018 <__malloc_lock+0x8>)
 800a012:	f7ff bf10 	b.w	8009e36 <__retarget_lock_acquire_recursive>
 800a016:	bf00      	nop
 800a018:	20000214 	.word	0x20000214

0800a01c <__malloc_unlock>:
 800a01c:	4801      	ldr	r0, [pc, #4]	@ (800a024 <__malloc_unlock+0x8>)
 800a01e:	f7ff bf0b 	b.w	8009e38 <__retarget_lock_release_recursive>
 800a022:	bf00      	nop
 800a024:	20000214 	.word	0x20000214

0800a028 <__sflush_r>:
 800a028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	0716      	lsls	r6, r2, #28
 800a030:	4605      	mov	r5, r0
 800a032:	460c      	mov	r4, r1
 800a034:	d454      	bmi.n	800a0e0 <__sflush_r+0xb8>
 800a036:	684b      	ldr	r3, [r1, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dc02      	bgt.n	800a042 <__sflush_r+0x1a>
 800a03c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dd48      	ble.n	800a0d4 <__sflush_r+0xac>
 800a042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a044:	2e00      	cmp	r6, #0
 800a046:	d045      	beq.n	800a0d4 <__sflush_r+0xac>
 800a048:	2300      	movs	r3, #0
 800a04a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a04e:	682f      	ldr	r7, [r5, #0]
 800a050:	6a21      	ldr	r1, [r4, #32]
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	d030      	beq.n	800a0b8 <__sflush_r+0x90>
 800a056:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	0759      	lsls	r1, r3, #29
 800a05c:	d505      	bpl.n	800a06a <__sflush_r+0x42>
 800a05e:	6863      	ldr	r3, [r4, #4]
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a064:	b10b      	cbz	r3, 800a06a <__sflush_r+0x42>
 800a066:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a068:	1ad2      	subs	r2, r2, r3
 800a06a:	2300      	movs	r3, #0
 800a06c:	4628      	mov	r0, r5
 800a06e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a070:	6a21      	ldr	r1, [r4, #32]
 800a072:	47b0      	blx	r6
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	d106      	bne.n	800a088 <__sflush_r+0x60>
 800a07a:	6829      	ldr	r1, [r5, #0]
 800a07c:	291d      	cmp	r1, #29
 800a07e:	d82b      	bhi.n	800a0d8 <__sflush_r+0xb0>
 800a080:	4a28      	ldr	r2, [pc, #160]	@ (800a124 <__sflush_r+0xfc>)
 800a082:	40ca      	lsrs	r2, r1
 800a084:	07d6      	lsls	r6, r2, #31
 800a086:	d527      	bpl.n	800a0d8 <__sflush_r+0xb0>
 800a088:	2200      	movs	r2, #0
 800a08a:	6062      	str	r2, [r4, #4]
 800a08c:	6922      	ldr	r2, [r4, #16]
 800a08e:	04d9      	lsls	r1, r3, #19
 800a090:	6022      	str	r2, [r4, #0]
 800a092:	d504      	bpl.n	800a09e <__sflush_r+0x76>
 800a094:	1c42      	adds	r2, r0, #1
 800a096:	d101      	bne.n	800a09c <__sflush_r+0x74>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b903      	cbnz	r3, 800a09e <__sflush_r+0x76>
 800a09c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a09e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0a0:	602f      	str	r7, [r5, #0]
 800a0a2:	b1b9      	cbz	r1, 800a0d4 <__sflush_r+0xac>
 800a0a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0a8:	4299      	cmp	r1, r3
 800a0aa:	d002      	beq.n	800a0b2 <__sflush_r+0x8a>
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f7ff fec5 	bl	8009e3c <_free_r>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0b6:	e00d      	b.n	800a0d4 <__sflush_r+0xac>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	47b0      	blx	r6
 800a0be:	4602      	mov	r2, r0
 800a0c0:	1c50      	adds	r0, r2, #1
 800a0c2:	d1c9      	bne.n	800a058 <__sflush_r+0x30>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0c6      	beq.n	800a058 <__sflush_r+0x30>
 800a0ca:	2b1d      	cmp	r3, #29
 800a0cc:	d001      	beq.n	800a0d2 <__sflush_r+0xaa>
 800a0ce:	2b16      	cmp	r3, #22
 800a0d0:	d11d      	bne.n	800a10e <__sflush_r+0xe6>
 800a0d2:	602f      	str	r7, [r5, #0]
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e021      	b.n	800a11c <__sflush_r+0xf4>
 800a0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0dc:	b21b      	sxth	r3, r3
 800a0de:	e01a      	b.n	800a116 <__sflush_r+0xee>
 800a0e0:	690f      	ldr	r7, [r1, #16]
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	d0f6      	beq.n	800a0d4 <__sflush_r+0xac>
 800a0e6:	0793      	lsls	r3, r2, #30
 800a0e8:	bf18      	it	ne
 800a0ea:	2300      	movne	r3, #0
 800a0ec:	680e      	ldr	r6, [r1, #0]
 800a0ee:	bf08      	it	eq
 800a0f0:	694b      	ldreq	r3, [r1, #20]
 800a0f2:	1bf6      	subs	r6, r6, r7
 800a0f4:	600f      	str	r7, [r1, #0]
 800a0f6:	608b      	str	r3, [r1, #8]
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	ddeb      	ble.n	800a0d4 <__sflush_r+0xac>
 800a0fc:	4633      	mov	r3, r6
 800a0fe:	463a      	mov	r2, r7
 800a100:	4628      	mov	r0, r5
 800a102:	6a21      	ldr	r1, [r4, #32]
 800a104:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a108:	47e0      	blx	ip
 800a10a:	2800      	cmp	r0, #0
 800a10c:	dc07      	bgt.n	800a11e <__sflush_r+0xf6>
 800a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a116:	f04f 30ff 	mov.w	r0, #4294967295
 800a11a:	81a3      	strh	r3, [r4, #12]
 800a11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a11e:	4407      	add	r7, r0
 800a120:	1a36      	subs	r6, r6, r0
 800a122:	e7e9      	b.n	800a0f8 <__sflush_r+0xd0>
 800a124:	20400001 	.word	0x20400001

0800a128 <_fflush_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	690b      	ldr	r3, [r1, #16]
 800a12c:	4605      	mov	r5, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	b913      	cbnz	r3, 800a138 <_fflush_r+0x10>
 800a132:	2500      	movs	r5, #0
 800a134:	4628      	mov	r0, r5
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	b118      	cbz	r0, 800a142 <_fflush_r+0x1a>
 800a13a:	6a03      	ldr	r3, [r0, #32]
 800a13c:	b90b      	cbnz	r3, 800a142 <_fflush_r+0x1a>
 800a13e:	f7ff fc95 	bl	8009a6c <__sinit>
 800a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0f3      	beq.n	800a132 <_fflush_r+0xa>
 800a14a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a14c:	07d0      	lsls	r0, r2, #31
 800a14e:	d404      	bmi.n	800a15a <_fflush_r+0x32>
 800a150:	0599      	lsls	r1, r3, #22
 800a152:	d402      	bmi.n	800a15a <_fflush_r+0x32>
 800a154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a156:	f7ff fe6e 	bl	8009e36 <__retarget_lock_acquire_recursive>
 800a15a:	4628      	mov	r0, r5
 800a15c:	4621      	mov	r1, r4
 800a15e:	f7ff ff63 	bl	800a028 <__sflush_r>
 800a162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a164:	4605      	mov	r5, r0
 800a166:	07da      	lsls	r2, r3, #31
 800a168:	d4e4      	bmi.n	800a134 <_fflush_r+0xc>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	059b      	lsls	r3, r3, #22
 800a16e:	d4e1      	bmi.n	800a134 <_fflush_r+0xc>
 800a170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a172:	f7ff fe61 	bl	8009e38 <__retarget_lock_release_recursive>
 800a176:	e7dd      	b.n	800a134 <_fflush_r+0xc>

0800a178 <__swhatbuf_r>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	460c      	mov	r4, r1
 800a17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a180:	4615      	mov	r5, r2
 800a182:	2900      	cmp	r1, #0
 800a184:	461e      	mov	r6, r3
 800a186:	b096      	sub	sp, #88	@ 0x58
 800a188:	da0c      	bge.n	800a1a4 <__swhatbuf_r+0x2c>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	2100      	movs	r1, #0
 800a18e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a192:	bf14      	ite	ne
 800a194:	2340      	movne	r3, #64	@ 0x40
 800a196:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a19a:	2000      	movs	r0, #0
 800a19c:	6031      	str	r1, [r6, #0]
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	b016      	add	sp, #88	@ 0x58
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	466a      	mov	r2, sp
 800a1a6:	f000 f849 	bl	800a23c <_fstat_r>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	dbed      	blt.n	800a18a <__swhatbuf_r+0x12>
 800a1ae:	9901      	ldr	r1, [sp, #4]
 800a1b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1b8:	4259      	negs	r1, r3
 800a1ba:	4159      	adcs	r1, r3
 800a1bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1c0:	e7eb      	b.n	800a19a <__swhatbuf_r+0x22>

0800a1c2 <__smakebuf_r>:
 800a1c2:	898b      	ldrh	r3, [r1, #12]
 800a1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1c6:	079d      	lsls	r5, r3, #30
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	d507      	bpl.n	800a1de <__smakebuf_r+0x1c>
 800a1ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	6163      	str	r3, [r4, #20]
 800a1da:	b003      	add	sp, #12
 800a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1de:	466a      	mov	r2, sp
 800a1e0:	ab01      	add	r3, sp, #4
 800a1e2:	f7ff ffc9 	bl	800a178 <__swhatbuf_r>
 800a1e6:	9f00      	ldr	r7, [sp, #0]
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7ff fe8f 	bl	8009f10 <_malloc_r>
 800a1f2:	b948      	cbnz	r0, 800a208 <__smakebuf_r+0x46>
 800a1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f8:	059a      	lsls	r2, r3, #22
 800a1fa:	d4ee      	bmi.n	800a1da <__smakebuf_r+0x18>
 800a1fc:	f023 0303 	bic.w	r3, r3, #3
 800a200:	f043 0302 	orr.w	r3, r3, #2
 800a204:	81a3      	strh	r3, [r4, #12]
 800a206:	e7e2      	b.n	800a1ce <__smakebuf_r+0xc>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	9b01      	ldr	r3, [sp, #4]
 800a216:	6020      	str	r0, [r4, #0]
 800a218:	b15b      	cbz	r3, 800a232 <__smakebuf_r+0x70>
 800a21a:	4630      	mov	r0, r6
 800a21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a220:	f000 f81e 	bl	800a260 <_isatty_r>
 800a224:	b128      	cbz	r0, 800a232 <__smakebuf_r+0x70>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f023 0303 	bic.w	r3, r3, #3
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	81a3      	strh	r3, [r4, #12]
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	431d      	orrs	r5, r3
 800a236:	81a5      	strh	r5, [r4, #12]
 800a238:	e7cf      	b.n	800a1da <__smakebuf_r+0x18>
	...

0800a23c <_fstat_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	2300      	movs	r3, #0
 800a240:	4d06      	ldr	r5, [pc, #24]	@ (800a25c <_fstat_r+0x20>)
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	f7fe f96d 	bl	8008528 <_fstat>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	d102      	bne.n	800a258 <_fstat_r+0x1c>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b103      	cbz	r3, 800a258 <_fstat_r+0x1c>
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	20000210 	.word	0x20000210

0800a260 <_isatty_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	2300      	movs	r3, #0
 800a264:	4d05      	ldr	r5, [pc, #20]	@ (800a27c <_isatty_r+0x1c>)
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	f7fe f96b 	bl	8008546 <_isatty>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_isatty_r+0x1a>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_isatty_r+0x1a>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	20000210 	.word	0x20000210

0800a280 <_sbrk_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	2300      	movs	r3, #0
 800a284:	4d05      	ldr	r5, [pc, #20]	@ (800a29c <_sbrk_r+0x1c>)
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7fe f972 	bl	8008574 <_sbrk>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_sbrk_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_sbrk_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	20000210 	.word	0x20000210

0800a2a0 <_init>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr

0800a2ac <_fini>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr
