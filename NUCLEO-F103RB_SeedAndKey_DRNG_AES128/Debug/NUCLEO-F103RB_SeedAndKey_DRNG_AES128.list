
NUCLEO-F103RB_SeedAndKey_DRNG_AES128.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008620  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  08008cc8  08008cc8  00009cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080091c8  080091c8  0000b0bc  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  080091c8  080091c8  0000a1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080091d0  080091d0  0000b0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080091d0  080091d0  0000a1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080091d4  080091d4  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000000bc  20000000  080091d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000039b0  200000c0  08009294  0000b0c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003a70  08009294  0000ba70  2**0
                  ALLOC
 12 .ARM.attributes 0000002d  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e95  00000000  00000000  0000b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357b  00000000  00000000  00022f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00026500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd6  00000000  00000000  00027960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a173  00000000  00000000  00028936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d1b  00000000  00000000  00042aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000987e4  00000000  00000000  000597c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f1fa8  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000034  00000000  00000000  000f1fec  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00005bdc  00000000  00000000  000f2020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  000f7bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008718 	.word	0x08008718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	08008718 	.word	0x08008718

08000150 <CMOX_CBC_ENC_AESFAST_IMPL>:
 8000150:	0800046d 08008a48                       m...H...

08000158 <cmox_cbc_encrypt>:
 8000158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015a:	b0cb      	sub	sp, #300	@ 0x12c
 800015c:	0006      	movs	r6, r0
 800015e:	000c      	movs	r4, r1
 8000160:	0017      	movs	r7, r2
 8000162:	001d      	movs	r5, r3
 8000164:	4909      	ldr	r1, [pc, #36]	@ (800018c <cmox_cbc_encrypt+0x34>)
 8000166:	a805      	add	r0, sp, #20
 8000168:	f000 f86e 	bl	8000248 <cmox_cbc_construct>
 800016c:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 800016e:	9104      	str	r1, [sp, #16]
 8000170:	9952      	ldr	r1, [sp, #328]	@ 0x148
 8000172:	9103      	str	r1, [sp, #12]
 8000174:	9951      	ldr	r1, [sp, #324]	@ 0x144
 8000176:	9102      	str	r1, [sp, #8]
 8000178:	9950      	ldr	r1, [sp, #320]	@ 0x140
 800017a:	9101      	str	r1, [sp, #4]
 800017c:	9500      	str	r5, [sp, #0]
 800017e:	003b      	movs	r3, r7
 8000180:	0022      	movs	r2, r4
 8000182:	0031      	movs	r1, r6
 8000184:	f000 f9a8 	bl	80004d8 <cmox_cipher_innerCompute>
 8000188:	b04b      	add	sp, #300	@ 0x12c
 800018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800018c:	08000150 	.word	0x08000150

08000190 <cmox_cbc_getByCipher>:
 8000190:	6802      	ldr	r2, [r0, #0]
 8000192:	428a      	cmp	r2, r1
 8000194:	d000      	beq.n	8000198 <cmox_cbc_getByCipher+0x8>
 8000196:	2000      	movs	r0, #0
 8000198:	4770      	bx	lr

0800019a <cmox_cbc_cleanup>:
 800019a:	b510      	push	{r4, lr}
 800019c:	2480      	movs	r4, #128	@ 0x80
 800019e:	0264      	lsls	r4, r4, #9
 80001a0:	f7ff fff6 	bl	8000190 <cmox_cbc_getByCipher>
 80001a4:	2800      	cmp	r0, #0
 80001a6:	d101      	bne.n	80001ac <cmox_cbc_cleanup+0x12>
 80001a8:	1ce4      	adds	r4, r4, #3
 80001aa:	e003      	b.n	80001b4 <cmox_cbc_cleanup+0x1a>
 80001ac:	218a      	movs	r1, #138	@ 0x8a
 80001ae:	0049      	lsls	r1, r1, #1
 80001b0:	f007 fe4e 	bl	8007e50 <__aeabi_memclr>
 80001b4:	0020      	movs	r0, r4
 80001b6:	bd10      	pop	{r4, pc}

080001b8 <cmox_cbc_init>:
 80001b8:	b538      	push	{r3, r4, r5, lr}
 80001ba:	0004      	movs	r4, r0
 80001bc:	4d07      	ldr	r5, [pc, #28]	@ (80001dc <cmox_cbc_init+0x24>)
 80001be:	2c00      	cmp	r4, #0
 80001c0:	d009      	beq.n	80001d6 <cmox_cbc_init+0x1e>
 80001c2:	f7ff ffe5 	bl	8000190 <cmox_cbc_getByCipher>
 80001c6:	2800      	cmp	r0, #0
 80001c8:	d005      	beq.n	80001d6 <cmox_cbc_init+0x1e>
 80001ca:	0001      	movs	r1, r0
 80001cc:	3108      	adds	r1, #8
 80001ce:	0020      	movs	r0, r4
 80001d0:	f000 f9b3 	bl	800053a <cmox_cipherMode_init>
 80001d4:	0005      	movs	r5, r0
 80001d6:	0028      	movs	r0, r5
 80001d8:	bd32      	pop	{r1, r4, r5, pc}
 80001da:	bf00      	nop
 80001dc:	00010003 	.word	0x00010003

080001e0 <cmox_cbc_setKey>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	000e      	movs	r6, r1
 80001e4:	0014      	movs	r4, r2
 80001e6:	0019      	movs	r1, r3
 80001e8:	4d07      	ldr	r5, [pc, #28]	@ (8000208 <cmox_cbc_setKey+0x28>)
 80001ea:	2800      	cmp	r0, #0
 80001ec:	d003      	beq.n	80001f6 <cmox_cbc_setKey+0x16>
 80001ee:	f7ff ffcf 	bl	8000190 <cmox_cbc_getByCipher>
 80001f2:	2800      	cmp	r0, #0
 80001f4:	d101      	bne.n	80001fa <cmox_cbc_setKey+0x1a>
 80001f6:	0028      	movs	r0, r5
 80001f8:	bd70      	pop	{r4, r5, r6, pc}
 80001fa:	0022      	movs	r2, r4
 80001fc:	0031      	movs	r1, r6
 80001fe:	3008      	adds	r0, #8
 8000200:	f000 f9a2 	bl	8000548 <cmox_cipherMode_setKey>
 8000204:	bd70      	pop	{r4, r5, r6, pc}
 8000206:	bf00      	nop
 8000208:	00010003 	.word	0x00010003

0800020c <cmox_cbc_setIV>:
 800020c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800020e:	0006      	movs	r6, r0
 8000210:	000d      	movs	r5, r1
 8000212:	0014      	movs	r4, r2
 8000214:	0019      	movs	r1, r3
 8000216:	2e00      	cmp	r6, #0
 8000218:	d003      	beq.n	8000222 <cmox_cbc_setIV+0x16>
 800021a:	f7ff ffb9 	bl	8000190 <cmox_cbc_getByCipher>
 800021e:	2800      	cmp	r0, #0
 8000220:	d101      	bne.n	8000226 <cmox_cbc_setIV+0x1a>
 8000222:	4808      	ldr	r0, [pc, #32]	@ (8000244 <cmox_cbc_setIV+0x38>)
 8000224:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000226:	0023      	movs	r3, r4
 8000228:	2b10      	cmp	r3, #16
 800022a:	d101      	bne.n	8000230 <cmox_cbc_setIV+0x24>
 800022c:	2101      	movs	r1, #1
 800022e:	e000      	b.n	8000232 <cmox_cbc_setIV+0x26>
 8000230:	2100      	movs	r1, #0
 8000232:	002a      	movs	r2, r5
 8000234:	9100      	str	r1, [sp, #0]
 8000236:	2182      	movs	r1, #130	@ 0x82
 8000238:	0049      	lsls	r1, r1, #1
 800023a:	1841      	adds	r1, r0, r1
 800023c:	0030      	movs	r0, r6
 800023e:	f000 fb63 	bl	8000908 <cmox_cipherMode_setIV>
 8000242:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000244:	00010003 	.word	0x00010003

08000248 <cmox_cbc_construct>:
 8000248:	b580      	push	{r7, lr}
 800024a:	000a      	movs	r2, r1
 800024c:	6851      	ldr	r1, [r2, #4]
 800024e:	6809      	ldr	r1, [r1, #0]
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	4790      	blx	r2
 8000254:	bd02      	pop	{r1, pc}
	...

08000258 <cmox_cbc_encrypt_cleanup>:
 8000258:	b580      	push	{r7, lr}
 800025a:	4902      	ldr	r1, [pc, #8]	@ (8000264 <cmox_cbc_encrypt_cleanup+0xc>)
 800025c:	f7ff ff9d 	bl	800019a <cmox_cbc_cleanup>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	bf00      	nop
 8000264:	08008808 	.word	0x08008808

08000268 <cmox_cbc_encrypt_init>:
 8000268:	b580      	push	{r7, lr}
 800026a:	4902      	ldr	r1, [pc, #8]	@ (8000274 <cmox_cbc_encrypt_init+0xc>)
 800026c:	f7ff ffa4 	bl	80001b8 <cmox_cbc_init>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	bf00      	nop
 8000274:	08008808 	.word	0x08008808

08000278 <cmox_cbc_encrypt_setKey>:
 8000278:	b580      	push	{r7, lr}
 800027a:	4b02      	ldr	r3, [pc, #8]	@ (8000284 <cmox_cbc_encrypt_setKey+0xc>)
 800027c:	f7ff ffb0 	bl	80001e0 <cmox_cbc_setKey>
 8000280:	bd02      	pop	{r1, pc}
 8000282:	bf00      	nop
 8000284:	08008808 	.word	0x08008808

08000288 <cmox_cbc_encrypt_setIV>:
 8000288:	b580      	push	{r7, lr}
 800028a:	4b02      	ldr	r3, [pc, #8]	@ (8000294 <cmox_cbc_encrypt_setIV+0xc>)
 800028c:	f7ff ffbe 	bl	800020c <cmox_cbc_setIV>
 8000290:	bd02      	pop	{r1, pc}
 8000292:	bf00      	nop
 8000294:	08008808 	.word	0x08008808

08000298 <cmox_cbc_encrypt>:
 8000298:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 800029a:	b08c      	sub	sp, #48	@ 0x30
 800029c:	000c      	movs	r4, r1
 800029e:	001e      	movs	r6, r3
 80002a0:	2a10      	cmp	r2, #16
 80002a2:	d309      	bcc.n	80002b8 <cmox_cbc_encrypt+0x20>
 80002a4:	0005      	movs	r5, r0
 80002a6:	7928      	ldrb	r0, [r5, #4]
 80002a8:	07c0      	lsls	r0, r0, #31
 80002aa:	d505      	bpl.n	80002b8 <cmox_cbc_encrypt+0x20>
 80002ac:	496c      	ldr	r1, [pc, #432]	@ (8000460 <cmox_cbc_encrypt+0x1c8>)
 80002ae:	0028      	movs	r0, r5
 80002b0:	f7ff ff6e 	bl	8000190 <cmox_cbc_getByCipher>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d101      	bne.n	80002bc <cmox_cbc_encrypt+0x24>
 80002b8:	486a      	ldr	r0, [pc, #424]	@ (8000464 <cmox_cbc_encrypt+0x1cc>)
 80002ba:	e0ce      	b.n	800045a <cmox_cbc_encrypt+0x1c2>
 80002bc:	7c01      	ldrb	r1, [r0, #16]
 80002be:	2205      	movs	r2, #5
 80002c0:	400a      	ands	r2, r1
 80002c2:	2a05      	cmp	r2, #5
 80002c4:	d001      	beq.n	80002ca <cmox_cbc_encrypt+0x32>
 80002c6:	4868      	ldr	r0, [pc, #416]	@ (8000468 <cmox_cbc_encrypt+0x1d0>)
 80002c8:	e0c7      	b.n	800045a <cmox_cbc_encrypt+0x1c2>
 80002ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d001      	beq.n	80002d4 <cmox_cbc_encrypt+0x3c>
 80002d0:	2100      	movs	r1, #0
 80002d2:	6011      	str	r1, [r2, #0]
 80002d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80002d6:	0709      	lsls	r1, r1, #28
 80002d8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80002da:	d003      	beq.n	80002e4 <cmox_cbc_encrypt+0x4c>
 80002dc:	210f      	movs	r1, #15
 80002de:	438f      	bics	r7, r1
 80002e0:	2100      	movs	r1, #0
 80002e2:	6069      	str	r1, [r5, #4]
 80002e4:	9400      	str	r4, [sp, #0]
 80002e6:	9605      	str	r6, [sp, #20]
 80002e8:	0016      	movs	r6, r2
 80002ea:	0005      	movs	r5, r0
 80002ec:	2400      	movs	r4, #0
 80002ee:	e022      	b.n	8000336 <cmox_cbc_encrypt+0x9e>
 80002f0:	a901      	add	r1, sp, #4
 80002f2:	9800      	ldr	r0, [sp, #0]
 80002f4:	1900      	adds	r0, r0, r4
 80002f6:	f000 fb43 	bl	8000980 <convert_block_2_words>
 80002fa:	2082      	movs	r0, #130	@ 0x82
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	1829      	adds	r1, r5, r0
 8000300:	a801      	add	r0, sp, #4
 8000302:	f000 fb66 	bl	80009d2 <xor_blocks>
 8000306:	aa01      	add	r2, sp, #4
 8000308:	a901      	add	r1, sp, #4
 800030a:	0028      	movs	r0, r5
 800030c:	3008      	adds	r0, #8
 800030e:	68ab      	ldr	r3, [r5, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4798      	blx	r3
 8000314:	9805      	ldr	r0, [sp, #20]
 8000316:	1901      	adds	r1, r0, r4
 8000318:	a801      	add	r0, sp, #4
 800031a:	f000 fb45 	bl	80009a8 <convert_block_2_bytes>
 800031e:	2082      	movs	r0, #130	@ 0x82
 8000320:	0040      	lsls	r0, r0, #1
 8000322:	1829      	adds	r1, r5, r0
 8000324:	a801      	add	r0, sp, #4
 8000326:	f000 fb60 	bl	80009ea <copy_block>
 800032a:	2e00      	cmp	r6, #0
 800032c:	d002      	beq.n	8000334 <cmox_cbc_encrypt+0x9c>
 800032e:	6830      	ldr	r0, [r6, #0]
 8000330:	3010      	adds	r0, #16
 8000332:	6030      	str	r0, [r6, #0]
 8000334:	3410      	adds	r4, #16
 8000336:	42bc      	cmp	r4, r7
 8000338:	d3da      	bcc.n	80002f0 <cmox_cbc_encrypt+0x58>
 800033a:	9805      	ldr	r0, [sp, #20]
 800033c:	9612      	str	r6, [sp, #72]	@ 0x48
 800033e:	0029      	movs	r1, r5
 8000340:	003a      	movs	r2, r7
 8000342:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000344:	429a      	cmp	r2, r3
 8000346:	d300      	bcc.n	800034a <cmox_cbc_encrypt+0xb2>
 8000348:	e085      	b.n	8000456 <cmox_cbc_encrypt+0x1be>
 800034a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800034c:	1a9b      	subs	r3, r3, r2
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	2400      	movs	r4, #0
 8000352:	e02a      	b.n	80003aa <cmox_cbc_encrypt+0x112>
 8000354:	00a5      	lsls	r5, r4, #2
 8000356:	1955      	adds	r5, r2, r5
 8000358:	9506      	str	r5, [sp, #24]
 800035a:	9d00      	ldr	r5, [sp, #0]
 800035c:	9e06      	ldr	r6, [sp, #24]
 800035e:	19ad      	adds	r5, r5, r6
 8000360:	782e      	ldrb	r6, [r5, #0]
 8000362:	0636      	lsls	r6, r6, #24
 8000364:	786f      	ldrb	r7, [r5, #1]
 8000366:	043f      	lsls	r7, r7, #16
 8000368:	4337      	orrs	r7, r6
 800036a:	78ae      	ldrb	r6, [r5, #2]
 800036c:	0236      	lsls	r6, r6, #8
 800036e:	433e      	orrs	r6, r7
 8000370:	78ed      	ldrb	r5, [r5, #3]
 8000372:	4335      	orrs	r5, r6
 8000374:	00a6      	lsls	r6, r4, #2
 8000376:	af01      	add	r7, sp, #4
 8000378:	19bf      	adds	r7, r7, r6
 800037a:	9705      	str	r7, [sp, #20]
 800037c:	603d      	str	r5, [r7, #0]
 800037e:	198e      	adds	r6, r1, r6
 8000380:	2782      	movs	r7, #130	@ 0x82
 8000382:	007f      	lsls	r7, r7, #1
 8000384:	19f6      	adds	r6, r6, r7
 8000386:	6837      	ldr	r7, [r6, #0]
 8000388:	406f      	eors	r7, r5
 800038a:	9d05      	ldr	r5, [sp, #20]
 800038c:	602f      	str	r7, [r5, #0]
 800038e:	9d06      	ldr	r5, [sp, #24]
 8000390:	1945      	adds	r5, r0, r5
 8000392:	6837      	ldr	r7, [r6, #0]
 8000394:	70ef      	strb	r7, [r5, #3]
 8000396:	6837      	ldr	r7, [r6, #0]
 8000398:	0a3f      	lsrs	r7, r7, #8
 800039a:	70af      	strb	r7, [r5, #2]
 800039c:	6837      	ldr	r7, [r6, #0]
 800039e:	0c3f      	lsrs	r7, r7, #16
 80003a0:	706f      	strb	r7, [r5, #1]
 80003a2:	6836      	ldr	r6, [r6, #0]
 80003a4:	0e36      	lsrs	r6, r6, #24
 80003a6:	702e      	strb	r6, [r5, #0]
 80003a8:	1c64      	adds	r4, r4, #1
 80003aa:	429c      	cmp	r4, r3
 80003ac:	d3d2      	bcc.n	8000354 <cmox_cbc_encrypt+0xbc>
 80003ae:	9c00      	ldr	r4, [sp, #0]
 80003b0:	9107      	str	r1, [sp, #28]
 80003b2:	9206      	str	r2, [sp, #24]
 80003b4:	9305      	str	r3, [sp, #20]
 80003b6:	9906      	ldr	r1, [sp, #24]
 80003b8:	009a      	lsls	r2, r3, #2
 80003ba:	1889      	adds	r1, r1, r2
 80003bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80003be:	9a05      	ldr	r2, [sp, #20]
 80003c0:	0092      	lsls	r2, r2, #2
 80003c2:	ab01      	add	r3, sp, #4
 80003c4:	189b      	adds	r3, r3, r2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	9b07      	ldr	r3, [sp, #28]
 80003ca:	2582      	movs	r5, #130	@ 0x82
 80003cc:	006d      	lsls	r5, r5, #1
 80003ce:	195b      	adds	r3, r3, r5
 80003d0:	9308      	str	r3, [sp, #32]
 80003d2:	189a      	adds	r2, r3, r2
 80003d4:	920a      	str	r2, [sp, #40]	@ 0x28
 80003d6:	6812      	ldr	r2, [r2, #0]
 80003d8:	9b00      	ldr	r3, [sp, #0]
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	2700      	movs	r7, #0
 80003de:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80003e0:	e013      	b.n	800040a <cmox_cbc_encrypt+0x172>
 80003e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80003e4:	19d2      	adds	r2, r2, r7
 80003e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80003e8:	2218      	movs	r2, #24
 80003ea:	00fb      	lsls	r3, r7, #3
 80003ec:	1ad2      	subs	r2, r2, r3
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80003f4:	5da6      	ldrb	r6, [r4, r6]
 80003f6:	4096      	lsls	r6, r2
 80003f8:	405e      	eors	r6, r3
 80003fa:	9b00      	ldr	r3, [sp, #0]
 80003fc:	601e      	str	r6, [r3, #0]
 80003fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	40d3      	lsrs	r3, r2
 8000404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000406:	5483      	strb	r3, [r0, r2]
 8000408:	1c7f      	adds	r7, r7, #1
 800040a:	1a6a      	subs	r2, r5, r1
 800040c:	4297      	cmp	r7, r2
 800040e:	d3e8      	bcc.n	80003e2 <cmox_cbc_encrypt+0x14a>
 8000410:	0004      	movs	r4, r0
 8000412:	9805      	ldr	r0, [sp, #20]
 8000414:	1c40      	adds	r0, r0, #1
 8000416:	ab01      	add	r3, sp, #4
 8000418:	e004      	b.n	8000424 <cmox_cbc_encrypt+0x18c>
 800041a:	0081      	lsls	r1, r0, #2
 800041c:	9a08      	ldr	r2, [sp, #32]
 800041e:	5852      	ldr	r2, [r2, r1]
 8000420:	505a      	str	r2, [r3, r1]
 8000422:	1c40      	adds	r0, r0, #1
 8000424:	2804      	cmp	r0, #4
 8000426:	d3f8      	bcc.n	800041a <cmox_cbc_encrypt+0x182>
 8000428:	aa01      	add	r2, sp, #4
 800042a:	a901      	add	r1, sp, #4
 800042c:	9807      	ldr	r0, [sp, #28]
 800042e:	3008      	adds	r0, #8
 8000430:	9b07      	ldr	r3, [sp, #28]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4798      	blx	r3
 8000438:	9806      	ldr	r0, [sp, #24]
 800043a:	1821      	adds	r1, r4, r0
 800043c:	3910      	subs	r1, #16
 800043e:	a801      	add	r0, sp, #4
 8000440:	f000 fab2 	bl	80009a8 <convert_block_2_bytes>
 8000444:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8000446:	2800      	cmp	r0, #0
 8000448:	d005      	beq.n	8000456 <cmox_cbc_encrypt+0x1be>
 800044a:	6800      	ldr	r0, [r0, #0]
 800044c:	1940      	adds	r0, r0, r5
 800044e:	9906      	ldr	r1, [sp, #24]
 8000450:	1a40      	subs	r0, r0, r1
 8000452:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8000454:	6008      	str	r0, [r1, #0]
 8000456:	2080      	movs	r0, #128	@ 0x80
 8000458:	0240      	lsls	r0, r0, #9
 800045a:	b00d      	add	sp, #52	@ 0x34
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800045e:	bf00      	nop
 8000460:	08008808 	.word	0x08008808
 8000464:	00010003 	.word	0x00010003
 8000468:	00010004 	.word	0x00010004

0800046c <cmox_cbcEncrypt_construct>:
 800046c:	2800      	cmp	r0, #0
 800046e:	d002      	beq.n	8000476 <cmox_cbcEncrypt_construct+0xa>
 8000470:	4a01      	ldr	r2, [pc, #4]	@ (8000478 <cmox_cbcEncrypt_construct+0xc>)
 8000472:	6002      	str	r2, [r0, #0]
 8000474:	6081      	str	r1, [r0, #8]
 8000476:	4770      	bx	lr
 8000478:	08008808 	.word	0x08008808

0800047c <cmox_cipher_encrypt>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	b085      	sub	sp, #20
 8000480:	0004      	movs	r4, r0
 8000482:	4814      	ldr	r0, [pc, #80]	@ (80004d4 <cmox_cipher_encrypt+0x58>)
 8000484:	2c00      	cmp	r4, #0
 8000486:	d022      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 8000488:	6865      	ldr	r5, [r4, #4]
 800048a:	2d3a      	cmp	r5, #58	@ 0x3a
 800048c:	d001      	beq.n	8000492 <cmox_cipher_encrypt+0x16>
 800048e:	1e40      	subs	r0, r0, #1
 8000490:	e01d      	b.n	80004ce <cmox_cipher_encrypt+0x52>
 8000492:	9104      	str	r1, [sp, #16]
 8000494:	0011      	movs	r1, r2
 8000496:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8000498:	9a04      	ldr	r2, [sp, #16]
 800049a:	2a00      	cmp	r2, #0
 800049c:	d102      	bne.n	80004a4 <cmox_cipher_encrypt+0x28>
 800049e:	2900      	cmp	r1, #0
 80004a0:	d002      	beq.n	80004a8 <cmox_cipher_encrypt+0x2c>
 80004a2:	e014      	b.n	80004ce <cmox_cipher_encrypt+0x52>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d012      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 80004a8:	001a      	movs	r2, r3
 80004aa:	d010      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 80004ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80004ae:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d101      	bne.n	80004b8 <cmox_cipher_encrypt+0x3c>
 80004b4:	2f00      	cmp	r7, #0
 80004b6:	d10a      	bne.n	80004ce <cmox_cipher_encrypt+0x52>
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d008      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 80004bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80004be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80004c0:	9003      	str	r0, [sp, #12]
 80004c2:	9502      	str	r5, [sp, #8]
 80004c4:	9701      	str	r7, [sp, #4]
 80004c6:	9600      	str	r6, [sp, #0]
 80004c8:	9804      	ldr	r0, [sp, #16]
 80004ca:	6824      	ldr	r4, [r4, #0]
 80004cc:	47a0      	blx	r4
 80004ce:	b005      	add	sp, #20
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d2:	bf00      	nop
 80004d4:	00010003 	.word	0x00010003

080004d8 <cmox_cipher_innerCompute>:
 80004d8:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80004da:	b081      	sub	sp, #4
 80004dc:	0004      	movs	r4, r0
 80004de:	0017      	movs	r7, r2
 80004e0:	001d      	movs	r5, r3
 80004e2:	6821      	ldr	r1, [r4, #0]
 80004e4:	6849      	ldr	r1, [r1, #4]
 80004e6:	4788      	blx	r1
 80004e8:	0006      	movs	r6, r0
 80004ea:	2080      	movs	r0, #128	@ 0x80
 80004ec:	0240      	lsls	r0, r0, #9
 80004ee:	4286      	cmp	r6, r0
 80004f0:	d11d      	bne.n	800052e <cmox_cipher_innerCompute+0x56>
 80004f2:	9a08      	ldr	r2, [sp, #32]
 80004f4:	0029      	movs	r1, r5
 80004f6:	0020      	movs	r0, r4
 80004f8:	6823      	ldr	r3, [r4, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4798      	blx	r3
 80004fe:	0006      	movs	r6, r0
 8000500:	2580      	movs	r5, #128	@ 0x80
 8000502:	026d      	lsls	r5, r5, #9
 8000504:	42ae      	cmp	r6, r5
 8000506:	d112      	bne.n	800052e <cmox_cipher_innerCompute+0x56>
 8000508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800050a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800050c:	0020      	movs	r0, r4
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4798      	blx	r3
 8000514:	0006      	movs	r6, r0
 8000516:	42ae      	cmp	r6, r5
 8000518:	d109      	bne.n	800052e <cmox_cipher_innerCompute+0x56>
 800051a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800051c:	003a      	movs	r2, r7
 800051e:	9902      	ldr	r1, [sp, #8]
 8000520:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000522:	9000      	str	r0, [sp, #0]
 8000524:	0020      	movs	r0, r4
 8000526:	6825      	ldr	r5, [r4, #0]
 8000528:	6a2d      	ldr	r5, [r5, #32]
 800052a:	47a8      	blx	r5
 800052c:	0006      	movs	r6, r0
 800052e:	0020      	movs	r0, r4
 8000530:	6821      	ldr	r1, [r4, #0]
 8000532:	6809      	ldr	r1, [r1, #0]
 8000534:	4788      	blx	r1
 8000536:	0030      	movs	r0, r6
 8000538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800053a <cmox_cipherMode_init>:
 800053a:	2200      	movs	r2, #0
 800053c:	6042      	str	r2, [r0, #4]
 800053e:	2001      	movs	r0, #1
 8000540:	6088      	str	r0, [r1, #8]
 8000542:	0400      	lsls	r0, r0, #16
 8000544:	4770      	bx	lr
	...

08000548 <cmox_cipherMode_setKey>:
 8000548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800054a:	b08e      	sub	sp, #56	@ 0x38
 800054c:	49de      	ldr	r1, [pc, #888]	@ (80008c8 <cmox_cipherMode_setKey+0x380>)
 800054e:	4bdf      	ldr	r3, [pc, #892]	@ (80008cc <cmox_cipherMode_setKey+0x384>)
 8000550:	2200      	movs	r2, #0
 8000552:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8000554:	2810      	cmp	r0, #16
 8000556:	d006      	beq.n	8000566 <cmox_cipherMode_setKey+0x1e>
 8000558:	2818      	cmp	r0, #24
 800055a:	d100      	bne.n	800055e <cmox_cipherMode_setKey+0x16>
 800055c:	e094      	b.n	8000688 <cmox_cipherMode_setKey+0x140>
 800055e:	2820      	cmp	r0, #32
 8000560:	d100      	bne.n	8000564 <cmox_cipherMode_setKey+0x1c>
 8000562:	e121      	b.n	80007a8 <cmox_cipherMode_setKey+0x260>
 8000564:	e1b8      	b.n	80008d8 <cmox_cipherMode_setKey+0x390>
 8000566:	a80b      	add	r0, sp, #44	@ 0x2c
 8000568:	4cd9      	ldr	r4, [pc, #868]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 800056a:	cc60      	ldmia	r4!, {r5, r6}
 800056c:	c060      	stmia	r0!, {r5, r6}
 800056e:	48d9      	ldr	r0, [pc, #868]	@ (80008d4 <cmox_cipherMode_setKey+0x38c>)
 8000570:	7800      	ldrb	r0, [r0, #0]
 8000572:	466c      	mov	r4, sp
 8000574:	7020      	strb	r0, [r4, #0]
 8000576:	4668      	mov	r0, sp
 8000578:	7800      	ldrb	r0, [r0, #0]
 800057a:	2800      	cmp	r0, #0
 800057c:	d101      	bne.n	8000582 <cmox_cipherMode_setKey+0x3a>
 800057e:	2400      	movs	r4, #0
 8000580:	e001      	b.n	8000586 <cmox_cipherMode_setKey+0x3e>
 8000582:	2004      	movs	r0, #4
 8000584:	2404      	movs	r4, #4
 8000586:	4ddd      	ldr	r5, [pc, #884]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000588:	5828      	ldr	r0, [r5, r0]
 800058a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800058c:	592c      	ldr	r4, [r5, r4]
 800058e:	1900      	adds	r0, r0, r4
 8000590:	4cdb      	ldr	r4, [pc, #876]	@ (8000900 <cmox_cipherMode_setKey+0x3b8>)
 8000592:	6004      	str	r4, [r0, #0]
 8000594:	6805      	ldr	r5, [r0, #0]
 8000596:	2401      	movs	r4, #1
 8000598:	6084      	str	r4, [r0, #8]
 800059a:	48d8      	ldr	r0, [pc, #864]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 800059c:	6840      	ldr	r0, [r0, #4]
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	48d6      	ldr	r0, [pc, #856]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80005a2:	6800      	ldr	r0, [r0, #0]
 80005a4:	9001      	str	r0, [sp, #4]
 80005a6:	ac03      	add	r4, sp, #12
 80005a8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80005aa:	7b80      	ldrb	r0, [r0, #14]
 80005ac:	9e02      	ldr	r6, [sp, #8]
 80005ae:	406e      	eors	r6, r5
 80005b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80005b2:	4077      	eors	r7, r6
 80005b4:	2504      	movs	r5, #4
 80005b6:	407d      	eors	r5, r7
 80005b8:	9f01      	ldr	r7, [sp, #4]
 80005ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80005bc:	407e      	eors	r6, r7
 80005be:	27fc      	movs	r7, #252	@ 0xfc
 80005c0:	4077      	eors	r7, r6
 80005c2:	19ed      	adds	r5, r5, r7
 80005c4:	2652      	movs	r6, #82	@ 0x52
 80005c6:	406e      	eors	r6, r5
 80005c8:	1980      	adds	r0, r0, r6
 80005ca:	73a0      	strb	r0, [r4, #14]
 80005cc:	2501      	movs	r5, #1
 80005ce:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80005d0:	5d46      	ldrb	r6, [r0, r5]
 80005d2:	5566      	strb	r6, [r4, r5]
 80005d4:	1c6d      	adds	r5, r5, #1
 80005d6:	2d0e      	cmp	r5, #14
 80005d8:	d3fa      	bcc.n	80005d0 <cmox_cipherMode_setKey+0x88>
 80005da:	4cbd      	ldr	r4, [pc, #756]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 80005dc:	ad0c      	add	r5, sp, #48	@ 0x30
 80005de:	ccc0      	ldmia	r4!, {r6, r7}
 80005e0:	c5c0      	stmia	r5!, {r6, r7}
 80005e2:	3c08      	subs	r4, #8
 80005e4:	2504      	movs	r5, #4
 80005e6:	466e      	mov	r6, sp
 80005e8:	7836      	ldrb	r6, [r6, #0]
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d101      	bne.n	80005f2 <cmox_cipherMode_setKey+0xaa>
 80005ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80005f0:	e001      	b.n	80005f6 <cmox_cipherMode_setKey+0xae>
 80005f2:	2604      	movs	r6, #4
 80005f4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80005f6:	4fc1      	ldr	r7, [pc, #772]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80005f8:	59bf      	ldr	r7, [r7, r6]
 80005fa:	46bc      	mov	ip, r7
 80005fc:	af0c      	add	r7, sp, #48	@ 0x30
 80005fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8000600:	59be      	ldr	r6, [r7, r6]
 8000602:	4667      	mov	r7, ip
 8000604:	19be      	adds	r6, r7, r6
 8000606:	6033      	str	r3, [r6, #0]
 8000608:	6833      	ldr	r3, [r6, #0]
 800060a:	2701      	movs	r7, #1
 800060c:	60b7      	str	r7, [r6, #8]
 800060e:	7806      	ldrb	r6, [r0, #0]
 8000610:	46b4      	mov	ip, r6
 8000612:	9e02      	ldr	r6, [sp, #8]
 8000614:	405e      	eors	r6, r3
 8000616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000618:	4073      	eors	r3, r6
 800061a:	2604      	movs	r6, #4
 800061c:	405e      	eors	r6, r3
 800061e:	9f01      	ldr	r7, [sp, #4]
 8000620:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000622:	407b      	eors	r3, r7
 8000624:	27fc      	movs	r7, #252	@ 0xfc
 8000626:	405f      	eors	r7, r3
 8000628:	19f6      	adds	r6, r6, r7
 800062a:	230b      	movs	r3, #11
 800062c:	4073      	eors	r3, r6
 800062e:	4666      	mov	r6, ip
 8000630:	18f3      	adds	r3, r6, r3
 8000632:	466e      	mov	r6, sp
 8000634:	7333      	strb	r3, [r6, #12]
 8000636:	ab0b      	add	r3, sp, #44	@ 0x2c
 8000638:	ccc0      	ldmia	r4!, {r6, r7}
 800063a:	c3c0      	stmia	r3!, {r6, r7}
 800063c:	466b      	mov	r3, sp
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <cmox_cipherMode_setKey+0x100>
 8000644:	2304      	movs	r3, #4
 8000646:	2204      	movs	r2, #4
 8000648:	4cac      	ldr	r4, [pc, #688]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 800064a:	58e3      	ldr	r3, [r4, r3]
 800064c:	ac0b      	add	r4, sp, #44	@ 0x2c
 800064e:	58a2      	ldr	r2, [r4, r2]
 8000650:	189a      	adds	r2, r3, r2
 8000652:	6011      	str	r1, [r2, #0]
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	6093      	str	r3, [r2, #8]
 800065a:	7bc0      	ldrb	r0, [r0, #15]
 800065c:	9a02      	ldr	r2, [sp, #8]
 800065e:	404a      	eors	r2, r1
 8000660:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000662:	4051      	eors	r1, r2
 8000664:	404d      	eors	r5, r1
 8000666:	9901      	ldr	r1, [sp, #4]
 8000668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800066a:	404a      	eors	r2, r1
 800066c:	21fc      	movs	r1, #252	@ 0xfc
 800066e:	4051      	eors	r1, r2
 8000670:	1869      	adds	r1, r5, r1
 8000672:	2285      	movs	r2, #133	@ 0x85
 8000674:	404a      	eors	r2, r1
 8000676:	1880      	adds	r0, r0, r2
 8000678:	a903      	add	r1, sp, #12
 800067a:	73c8      	strb	r0, [r1, #15]
 800067c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800067e:	7a20      	ldrb	r0, [r4, #8]
 8000680:	07c0      	lsls	r0, r0, #31
 8000682:	d500      	bpl.n	8000686 <cmox_cipherMode_setKey+0x13e>
 8000684:	e12a      	b.n	80008dc <cmox_cipherMode_setKey+0x394>
 8000686:	e127      	b.n	80008d8 <cmox_cipherMode_setKey+0x390>
 8000688:	a80b      	add	r0, sp, #44	@ 0x2c
 800068a:	4c91      	ldr	r4, [pc, #580]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 800068c:	cc60      	ldmia	r4!, {r5, r6}
 800068e:	c060      	stmia	r0!, {r5, r6}
 8000690:	4890      	ldr	r0, [pc, #576]	@ (80008d4 <cmox_cipherMode_setKey+0x38c>)
 8000692:	7800      	ldrb	r0, [r0, #0]
 8000694:	466c      	mov	r4, sp
 8000696:	7020      	strb	r0, [r4, #0]
 8000698:	4668      	mov	r0, sp
 800069a:	7800      	ldrb	r0, [r0, #0]
 800069c:	2800      	cmp	r0, #0
 800069e:	d101      	bne.n	80006a4 <cmox_cipherMode_setKey+0x15c>
 80006a0:	2400      	movs	r4, #0
 80006a2:	e001      	b.n	80006a8 <cmox_cipherMode_setKey+0x160>
 80006a4:	2004      	movs	r0, #4
 80006a6:	2404      	movs	r4, #4
 80006a8:	4d94      	ldr	r5, [pc, #592]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80006aa:	5828      	ldr	r0, [r5, r0]
 80006ac:	ad0b      	add	r5, sp, #44	@ 0x2c
 80006ae:	592c      	ldr	r4, [r5, r4]
 80006b0:	1904      	adds	r4, r0, r4
 80006b2:	6021      	str	r1, [r4, #0]
 80006b4:	6820      	ldr	r0, [r4, #0]
 80006b6:	2101      	movs	r1, #1
 80006b8:	60a1      	str	r1, [r4, #8]
 80006ba:	4990      	ldr	r1, [pc, #576]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80006bc:	6849      	ldr	r1, [r1, #4]
 80006be:	9102      	str	r1, [sp, #8]
 80006c0:	498e      	ldr	r1, [pc, #568]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80006c2:	6809      	ldr	r1, [r1, #0]
 80006c4:	9101      	str	r1, [sp, #4]
 80006c6:	a903      	add	r1, sp, #12
 80006c8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80006ca:	7ba4      	ldrb	r4, [r4, #14]
 80006cc:	9d02      	ldr	r5, [sp, #8]
 80006ce:	4045      	eors	r5, r0
 80006d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80006d2:	406e      	eors	r6, r5
 80006d4:	2004      	movs	r0, #4
 80006d6:	4070      	eors	r0, r6
 80006d8:	9d01      	ldr	r5, [sp, #4]
 80006da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80006dc:	406e      	eors	r6, r5
 80006de:	25fc      	movs	r5, #252	@ 0xfc
 80006e0:	4075      	eors	r5, r6
 80006e2:	1940      	adds	r0, r0, r5
 80006e4:	2585      	movs	r5, #133	@ 0x85
 80006e6:	4045      	eors	r5, r0
 80006e8:	1960      	adds	r0, r4, r5
 80006ea:	7388      	strb	r0, [r1, #14]
 80006ec:	2401      	movs	r4, #1
 80006ee:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80006f0:	5d05      	ldrb	r5, [r0, r4]
 80006f2:	550d      	strb	r5, [r1, r4]
 80006f4:	1c64      	adds	r4, r4, #1
 80006f6:	2c0e      	cmp	r4, #14
 80006f8:	d3fa      	bcc.n	80006f0 <cmox_cipherMode_setKey+0x1a8>
 80006fa:	4c75      	ldr	r4, [pc, #468]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 80006fc:	a90b      	add	r1, sp, #44	@ 0x2c
 80006fe:	cc60      	ldmia	r4!, {r5, r6}
 8000700:	c160      	stmia	r1!, {r5, r6}
 8000702:	3c08      	subs	r4, #8
 8000704:	4669      	mov	r1, sp
 8000706:	7809      	ldrb	r1, [r1, #0]
 8000708:	2900      	cmp	r1, #0
 800070a:	d101      	bne.n	8000710 <cmox_cipherMode_setKey+0x1c8>
 800070c:	2500      	movs	r5, #0
 800070e:	e001      	b.n	8000714 <cmox_cipherMode_setKey+0x1cc>
 8000710:	2504      	movs	r5, #4
 8000712:	2104      	movs	r1, #4
 8000714:	4e79      	ldr	r6, [pc, #484]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000716:	5975      	ldr	r5, [r6, r5]
 8000718:	ae0b      	add	r6, sp, #44	@ 0x2c
 800071a:	5871      	ldr	r1, [r6, r1]
 800071c:	186d      	adds	r5, r5, r1
 800071e:	4978      	ldr	r1, [pc, #480]	@ (8000900 <cmox_cipherMode_setKey+0x3b8>)
 8000720:	6029      	str	r1, [r5, #0]
 8000722:	6829      	ldr	r1, [r5, #0]
 8000724:	2601      	movs	r6, #1
 8000726:	60ae      	str	r6, [r5, #8]
 8000728:	2504      	movs	r5, #4
 800072a:	7806      	ldrb	r6, [r0, #0]
 800072c:	46b4      	mov	ip, r6
 800072e:	9e02      	ldr	r6, [sp, #8]
 8000730:	404e      	eors	r6, r1
 8000732:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000734:	4071      	eors	r1, r6
 8000736:	2604      	movs	r6, #4
 8000738:	404e      	eors	r6, r1
 800073a:	9f01      	ldr	r7, [sp, #4]
 800073c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800073e:	4079      	eors	r1, r7
 8000740:	27fc      	movs	r7, #252	@ 0xfc
 8000742:	404f      	eors	r7, r1
 8000744:	19f6      	adds	r6, r6, r7
 8000746:	2152      	movs	r1, #82	@ 0x52
 8000748:	4071      	eors	r1, r6
 800074a:	4666      	mov	r6, ip
 800074c:	1871      	adds	r1, r6, r1
 800074e:	466e      	mov	r6, sp
 8000750:	7331      	strb	r1, [r6, #12]
 8000752:	a90b      	add	r1, sp, #44	@ 0x2c
 8000754:	ccc0      	ldmia	r4!, {r6, r7}
 8000756:	c1c0      	stmia	r1!, {r6, r7}
 8000758:	4669      	mov	r1, sp
 800075a:	7809      	ldrb	r1, [r1, #0]
 800075c:	2900      	cmp	r1, #0
 800075e:	d001      	beq.n	8000764 <cmox_cipherMode_setKey+0x21c>
 8000760:	2104      	movs	r1, #4
 8000762:	2204      	movs	r2, #4
 8000764:	4c65      	ldr	r4, [pc, #404]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000766:	5861      	ldr	r1, [r4, r1]
 8000768:	ac0b      	add	r4, sp, #44	@ 0x2c
 800076a:	58a2      	ldr	r2, [r4, r2]
 800076c:	1889      	adds	r1, r1, r2
 800076e:	600b      	str	r3, [r1, #0]
 8000770:	680b      	ldr	r3, [r1, #0]
 8000772:	2201      	movs	r2, #1
 8000774:	608a      	str	r2, [r1, #8]
 8000776:	a903      	add	r1, sp, #12
 8000778:	7bc2      	ldrb	r2, [r0, #15]
 800077a:	9c02      	ldr	r4, [sp, #8]
 800077c:	405c      	eors	r4, r3
 800077e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000780:	4063      	eors	r3, r4
 8000782:	405d      	eors	r5, r3
 8000784:	9b01      	ldr	r3, [sp, #4]
 8000786:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8000788:	405c      	eors	r4, r3
 800078a:	23fc      	movs	r3, #252	@ 0xfc
 800078c:	4063      	eors	r3, r4
 800078e:	18eb      	adds	r3, r5, r3
 8000790:	240b      	movs	r4, #11
 8000792:	405c      	eors	r4, r3
 8000794:	1912      	adds	r2, r2, r4
 8000796:	73ca      	strb	r2, [r1, #15]
 8000798:	2210      	movs	r2, #16
 800079a:	5c83      	ldrb	r3, [r0, r2]
 800079c:	548b      	strb	r3, [r1, r2]
 800079e:	1c52      	adds	r2, r2, #1
 80007a0:	2a18      	cmp	r2, #24
 80007a2:	d300      	bcc.n	80007a6 <cmox_cipherMode_setKey+0x25e>
 80007a4:	e76a      	b.n	800067c <cmox_cipherMode_setKey+0x134>
 80007a6:	e7f8      	b.n	800079a <cmox_cipherMode_setKey+0x252>
 80007a8:	a80b      	add	r0, sp, #44	@ 0x2c
 80007aa:	4c49      	ldr	r4, [pc, #292]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 80007ac:	cc60      	ldmia	r4!, {r5, r6}
 80007ae:	c060      	stmia	r0!, {r5, r6}
 80007b0:	4848      	ldr	r0, [pc, #288]	@ (80008d4 <cmox_cipherMode_setKey+0x38c>)
 80007b2:	7800      	ldrb	r0, [r0, #0]
 80007b4:	466c      	mov	r4, sp
 80007b6:	7020      	strb	r0, [r4, #0]
 80007b8:	4668      	mov	r0, sp
 80007ba:	7800      	ldrb	r0, [r0, #0]
 80007bc:	2800      	cmp	r0, #0
 80007be:	d101      	bne.n	80007c4 <cmox_cipherMode_setKey+0x27c>
 80007c0:	2400      	movs	r4, #0
 80007c2:	e001      	b.n	80007c8 <cmox_cipherMode_setKey+0x280>
 80007c4:	2004      	movs	r0, #4
 80007c6:	2404      	movs	r4, #4
 80007c8:	4d4c      	ldr	r5, [pc, #304]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80007ca:	5828      	ldr	r0, [r5, r0]
 80007cc:	ad0b      	add	r5, sp, #44	@ 0x2c
 80007ce:	592c      	ldr	r4, [r5, r4]
 80007d0:	1900      	adds	r0, r0, r4
 80007d2:	6003      	str	r3, [r0, #0]
 80007d4:	6805      	ldr	r5, [r0, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	6083      	str	r3, [r0, #8]
 80007da:	4848      	ldr	r0, [pc, #288]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80007dc:	6840      	ldr	r0, [r0, #4]
 80007de:	9002      	str	r0, [sp, #8]
 80007e0:	4846      	ldr	r0, [pc, #280]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80007e2:	6800      	ldr	r0, [r0, #0]
 80007e4:	9001      	str	r0, [sp, #4]
 80007e6:	2304      	movs	r3, #4
 80007e8:	ac03      	add	r4, sp, #12
 80007ea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80007ec:	7fc0      	ldrb	r0, [r0, #31]
 80007ee:	9e02      	ldr	r6, [sp, #8]
 80007f0:	406e      	eors	r6, r5
 80007f2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80007f4:	4077      	eors	r7, r6
 80007f6:	2504      	movs	r5, #4
 80007f8:	407d      	eors	r5, r7
 80007fa:	9f01      	ldr	r7, [sp, #4]
 80007fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80007fe:	407e      	eors	r6, r7
 8000800:	27fc      	movs	r7, #252	@ 0xfc
 8000802:	4077      	eors	r7, r6
 8000804:	19ed      	adds	r5, r5, r7
 8000806:	260b      	movs	r6, #11
 8000808:	406e      	eors	r6, r5
 800080a:	1980      	adds	r0, r0, r6
 800080c:	77e0      	strb	r0, [r4, #31]
 800080e:	2500      	movs	r5, #0
 8000810:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8000812:	5d46      	ldrb	r6, [r0, r5]
 8000814:	5566      	strb	r6, [r4, r5]
 8000816:	1c6d      	adds	r5, r5, #1
 8000818:	2d10      	cmp	r5, #16
 800081a:	d3fa      	bcc.n	8000812 <cmox_cipherMode_setKey+0x2ca>
 800081c:	4c2c      	ldr	r4, [pc, #176]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 800081e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8000820:	ccc0      	ldmia	r4!, {r6, r7}
 8000822:	c5c0      	stmia	r5!, {r6, r7}
 8000824:	3c08      	subs	r4, #8
 8000826:	466d      	mov	r5, sp
 8000828:	782d      	ldrb	r5, [r5, #0]
 800082a:	2d00      	cmp	r5, #0
 800082c:	d101      	bne.n	8000832 <cmox_cipherMode_setKey+0x2ea>
 800082e:	2600      	movs	r6, #0
 8000830:	e001      	b.n	8000836 <cmox_cipherMode_setKey+0x2ee>
 8000832:	2604      	movs	r6, #4
 8000834:	2504      	movs	r5, #4
 8000836:	4f31      	ldr	r7, [pc, #196]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000838:	59be      	ldr	r6, [r7, r6]
 800083a:	af0b      	add	r7, sp, #44	@ 0x2c
 800083c:	597d      	ldr	r5, [r7, r5]
 800083e:	1976      	adds	r6, r6, r5
 8000840:	6031      	str	r1, [r6, #0]
 8000842:	6831      	ldr	r1, [r6, #0]
 8000844:	2501      	movs	r5, #1
 8000846:	60b5      	str	r5, [r6, #8]
 8000848:	7c46      	ldrb	r6, [r0, #17]
 800084a:	46b4      	mov	ip, r6
 800084c:	9e02      	ldr	r6, [sp, #8]
 800084e:	404e      	eors	r6, r1
 8000850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000852:	4071      	eors	r1, r6
 8000854:	2604      	movs	r6, #4
 8000856:	404e      	eors	r6, r1
 8000858:	9f01      	ldr	r7, [sp, #4]
 800085a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800085c:	4079      	eors	r1, r7
 800085e:	27fc      	movs	r7, #252	@ 0xfc
 8000860:	404f      	eors	r7, r1
 8000862:	19f6      	adds	r6, r6, r7
 8000864:	2185      	movs	r1, #133	@ 0x85
 8000866:	4071      	eors	r1, r6
 8000868:	4666      	mov	r6, ip
 800086a:	1871      	adds	r1, r6, r1
 800086c:	ae03      	add	r6, sp, #12
 800086e:	7471      	strb	r1, [r6, #17]
 8000870:	a90b      	add	r1, sp, #44	@ 0x2c
 8000872:	ccc0      	ldmia	r4!, {r6, r7}
 8000874:	c1c0      	stmia	r1!, {r6, r7}
 8000876:	4669      	mov	r1, sp
 8000878:	7809      	ldrb	r1, [r1, #0]
 800087a:	2900      	cmp	r1, #0
 800087c:	d001      	beq.n	8000882 <cmox_cipherMode_setKey+0x33a>
 800087e:	2104      	movs	r1, #4
 8000880:	2204      	movs	r2, #4
 8000882:	4c1e      	ldr	r4, [pc, #120]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000884:	5861      	ldr	r1, [r4, r1]
 8000886:	ac0b      	add	r4, sp, #44	@ 0x2c
 8000888:	58a2      	ldr	r2, [r4, r2]
 800088a:	1889      	adds	r1, r1, r2
 800088c:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <cmox_cipherMode_setKey+0x3b8>)
 800088e:	600a      	str	r2, [r1, #0]
 8000890:	680c      	ldr	r4, [r1, #0]
 8000892:	608d      	str	r5, [r1, #8]
 8000894:	a903      	add	r1, sp, #12
 8000896:	7c02      	ldrb	r2, [r0, #16]
 8000898:	9d02      	ldr	r5, [sp, #8]
 800089a:	4065      	eors	r5, r4
 800089c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800089e:	406c      	eors	r4, r5
 80008a0:	4063      	eors	r3, r4
 80008a2:	9c01      	ldr	r4, [sp, #4]
 80008a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80008a6:	4065      	eors	r5, r4
 80008a8:	24fc      	movs	r4, #252	@ 0xfc
 80008aa:	406c      	eors	r4, r5
 80008ac:	191b      	adds	r3, r3, r4
 80008ae:	2452      	movs	r4, #82	@ 0x52
 80008b0:	405c      	eors	r4, r3
 80008b2:	1912      	adds	r2, r2, r4
 80008b4:	740a      	strb	r2, [r1, #16]
 80008b6:	2212      	movs	r2, #18
 80008b8:	5c83      	ldrb	r3, [r0, r2]
 80008ba:	548b      	strb	r3, [r1, r2]
 80008bc:	1c52      	adds	r2, r2, #1
 80008be:	2a1f      	cmp	r2, #31
 80008c0:	d300      	bcc.n	80008c4 <cmox_cipherMode_setKey+0x37c>
 80008c2:	e6db      	b.n	800067c <cmox_cipherMode_setKey+0x134>
 80008c4:	e7f8      	b.n	80008b8 <cmox_cipherMode_setKey+0x370>
 80008c6:	bf00      	nop
 80008c8:	2e8f137d 	.word	0x2e8f137d
 80008cc:	910e0ba4 	.word	0x910e0ba4
 80008d0:	08000978 	.word	0x08000978
 80008d4:	200000dc 	.word	0x200000dc
 80008d8:	480a      	ldr	r0, [pc, #40]	@ (8000904 <cmox_cipherMode_setKey+0x3bc>)
 80008da:	e00c      	b.n	80008f6 <cmox_cipherMode_setKey+0x3ae>
 80008dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80008de:	0020      	movs	r0, r4
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4798      	blx	r3
 80008e6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80008e8:	6060      	str	r0, [r4, #4]
 80008ea:	68a0      	ldr	r0, [r4, #8]
 80008ec:	2104      	movs	r1, #4
 80008ee:	4301      	orrs	r1, r0
 80008f0:	60a1      	str	r1, [r4, #8]
 80008f2:	2080      	movs	r0, #128	@ 0x80
 80008f4:	0240      	lsls	r0, r0, #9
 80008f6:	b011      	add	sp, #68	@ 0x44
 80008f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	08008a38 	.word	0x08008a38
 8000900:	f78e2254 	.word	0xf78e2254
 8000904:	00010003 	.word	0x00010003

08000908 <cmox_cipherMode_setIV>:
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090a:	9c05      	ldr	r4, [sp, #20]
 800090c:	2c00      	cmp	r4, #0
 800090e:	d001      	beq.n	8000914 <cmox_cipherMode_setIV+0xc>
 8000910:	2a00      	cmp	r2, #0
 8000912:	d101      	bne.n	8000918 <cmox_cipherMode_setIV+0x10>
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <cmox_cipherMode_setIV+0x44>)
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000918:	2400      	movs	r4, #0
 800091a:	e00d      	b.n	8000938 <cmox_cipherMode_setIV+0x30>
 800091c:	1955      	adds	r5, r2, r5
 800091e:	782e      	ldrb	r6, [r5, #0]
 8000920:	0637      	lsls	r7, r6, #24
 8000922:	786e      	ldrb	r6, [r5, #1]
 8000924:	0436      	lsls	r6, r6, #16
 8000926:	433e      	orrs	r6, r7
 8000928:	78af      	ldrb	r7, [r5, #2]
 800092a:	023f      	lsls	r7, r7, #8
 800092c:	4337      	orrs	r7, r6
 800092e:	78ed      	ldrb	r5, [r5, #3]
 8000930:	433d      	orrs	r5, r7
 8000932:	00a6      	lsls	r6, r4, #2
 8000934:	518d      	str	r5, [r1, r6]
 8000936:	1c64      	adds	r4, r4, #1
 8000938:	00a5      	lsls	r5, r4, #2
 800093a:	429d      	cmp	r5, r3
 800093c:	d3ee      	bcc.n	800091c <cmox_cipherMode_setIV+0x14>
 800093e:	6841      	ldr	r1, [r0, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	6042      	str	r2, [r0, #4]
 8000946:	2080      	movs	r0, #128	@ 0x80
 8000948:	0240      	lsls	r0, r0, #9
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	00010003 	.word	0x00010003

08000950 <cmox_cipher_setTagLen_empty>:
 8000950:	2080      	movs	r0, #128	@ 0x80
 8000952:	0240      	lsls	r0, r0, #9
 8000954:	4770      	bx	lr

08000956 <cmox_cipher_setPayloadLen_empty>:
 8000956:	2080      	movs	r0, #128	@ 0x80
 8000958:	0240      	lsls	r0, r0, #9
 800095a:	4770      	bx	lr

0800095c <cmox_cipher_setADLen_empty>:
 800095c:	2080      	movs	r0, #128	@ 0x80
 800095e:	0240      	lsls	r0, r0, #9
 8000960:	4770      	bx	lr

08000962 <cmox_cipher_appendAD_empty>:
 8000962:	2080      	movs	r0, #128	@ 0x80
 8000964:	0240      	lsls	r0, r0, #9
 8000966:	4770      	bx	lr

08000968 <cmox_cipher_generateTag_empty>:
 8000968:	4800      	ldr	r0, [pc, #0]	@ (800096c <cmox_cipher_generateTag_empty+0x4>)
 800096a:	4770      	bx	lr
 800096c:	00010002 	.word	0x00010002

08000970 <cmox_cipher_verifyTag_empty>:
 8000970:	4800      	ldr	r0, [pc, #0]	@ (8000974 <cmox_cipher_verifyTag_empty+0x4>)
 8000972:	4770      	bx	lr
 8000974:	00010002 	.word	0x00010002
 8000978:	0101b004 	.word	0x0101b004
 800097c:	45011700 	.word	0x45011700

08000980 <convert_block_2_words>:
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	2200      	movs	r2, #0
 8000984:	0093      	lsls	r3, r2, #2
 8000986:	18c3      	adds	r3, r0, r3
 8000988:	781c      	ldrb	r4, [r3, #0]
 800098a:	0624      	lsls	r4, r4, #24
 800098c:	785d      	ldrb	r5, [r3, #1]
 800098e:	042d      	lsls	r5, r5, #16
 8000990:	4325      	orrs	r5, r4
 8000992:	789c      	ldrb	r4, [r3, #2]
 8000994:	0224      	lsls	r4, r4, #8
 8000996:	432c      	orrs	r4, r5
 8000998:	78db      	ldrb	r3, [r3, #3]
 800099a:	4323      	orrs	r3, r4
 800099c:	0094      	lsls	r4, r2, #2
 800099e:	510b      	str	r3, [r1, r4]
 80009a0:	1c52      	adds	r2, r2, #1
 80009a2:	2a04      	cmp	r2, #4
 80009a4:	d3ee      	bcc.n	8000984 <convert_block_2_words+0x4>
 80009a6:	bd30      	pop	{r4, r5, pc}

080009a8 <convert_block_2_bytes>:
 80009a8:	b530      	push	{r4, r5, lr}
 80009aa:	2200      	movs	r2, #0
 80009ac:	0093      	lsls	r3, r2, #2
 80009ae:	18cb      	adds	r3, r1, r3
 80009b0:	0094      	lsls	r4, r2, #2
 80009b2:	1904      	adds	r4, r0, r4
 80009b4:	6825      	ldr	r5, [r4, #0]
 80009b6:	70dd      	strb	r5, [r3, #3]
 80009b8:	6825      	ldr	r5, [r4, #0]
 80009ba:	0a2d      	lsrs	r5, r5, #8
 80009bc:	709d      	strb	r5, [r3, #2]
 80009be:	6825      	ldr	r5, [r4, #0]
 80009c0:	0c2d      	lsrs	r5, r5, #16
 80009c2:	705d      	strb	r5, [r3, #1]
 80009c4:	6824      	ldr	r4, [r4, #0]
 80009c6:	0e24      	lsrs	r4, r4, #24
 80009c8:	701c      	strb	r4, [r3, #0]
 80009ca:	1c52      	adds	r2, r2, #1
 80009cc:	2a04      	cmp	r2, #4
 80009ce:	d3ed      	bcc.n	80009ac <convert_block_2_bytes+0x4>
 80009d0:	bd30      	pop	{r4, r5, pc}

080009d2 <xor_blocks>:
 80009d2:	b530      	push	{r4, r5, lr}
 80009d4:	2200      	movs	r2, #0
 80009d6:	0093      	lsls	r3, r2, #2
 80009d8:	18c4      	adds	r4, r0, r3
 80009da:	6825      	ldr	r5, [r4, #0]
 80009dc:	58cb      	ldr	r3, [r1, r3]
 80009de:	406b      	eors	r3, r5
 80009e0:	6023      	str	r3, [r4, #0]
 80009e2:	1c52      	adds	r2, r2, #1
 80009e4:	2a04      	cmp	r2, #4
 80009e6:	d3f6      	bcc.n	80009d6 <xor_blocks+0x4>
 80009e8:	bd30      	pop	{r4, r5, pc}

080009ea <copy_block>:
 80009ea:	b510      	push	{r4, lr}
 80009ec:	2200      	movs	r2, #0
 80009ee:	0093      	lsls	r3, r2, #2
 80009f0:	58c4      	ldr	r4, [r0, r3]
 80009f2:	50cc      	str	r4, [r1, r3]
 80009f4:	1c52      	adds	r2, r2, #1
 80009f6:	2a04      	cmp	r2, #4
 80009f8:	d3f9      	bcc.n	80009ee <copy_block+0x4>
 80009fa:	bd10      	pop	{r4, pc}

080009fc <cmox_convertBlockAndXor>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	0004      	movs	r4, r0
 8000a00:	0008      	movs	r0, r1
 8000a02:	0013      	movs	r3, r2
 8000a04:	0021      	movs	r1, r4
 8000a06:	0002      	movs	r2, r0
 8000a08:	2400      	movs	r4, #0
 8000a0a:	00a0      	lsls	r0, r4, #2
 8000a0c:	180d      	adds	r5, r1, r0
 8000a0e:	00a6      	lsls	r6, r4, #2
 8000a10:	7828      	ldrb	r0, [r5, #0]
 8000a12:	0607      	lsls	r7, r0, #24
 8000a14:	7868      	ldrb	r0, [r5, #1]
 8000a16:	0400      	lsls	r0, r0, #16
 8000a18:	4338      	orrs	r0, r7
 8000a1a:	78af      	ldrb	r7, [r5, #2]
 8000a1c:	023f      	lsls	r7, r7, #8
 8000a1e:	4307      	orrs	r7, r0
 8000a20:	78e8      	ldrb	r0, [r5, #3]
 8000a22:	4338      	orrs	r0, r7
 8000a24:	5995      	ldr	r5, [r2, r6]
 8000a26:	4045      	eors	r5, r0
 8000a28:	519d      	str	r5, [r3, r6]
 8000a2a:	1c64      	adds	r4, r4, #1
 8000a2c:	2c04      	cmp	r4, #4
 8000a2e:	d3ec      	bcc.n	8000a0a <cmox_convertBlockAndXor+0xe>
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a32 <cmox_drbg_bcc_process_input>:
 8000a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	0003      	movs	r3, r0
 8000a38:	000f      	movs	r7, r1
 8000a3a:	0016      	movs	r6, r2
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2500      	movs	r5, #0
 8000a40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000a42:	6800      	ldr	r0, [r0, #0]
 8000a44:	1832      	adds	r2, r6, r0
 8000a46:	2a10      	cmp	r2, #16
 8000a48:	d209      	bcs.n	8000a5e <cmox_drbg_bcc_process_input+0x2c>
 8000a4a:	0032      	movs	r2, r6
 8000a4c:	0039      	movs	r1, r7
 8000a4e:	9b06      	ldr	r3, [sp, #24]
 8000a50:	1818      	adds	r0, r3, r0
 8000a52:	f007 f9fb 	bl	8007e4c <__aeabi_memcpy>
 8000a56:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000a58:	6800      	ldr	r0, [r0, #0]
 8000a5a:	1985      	adds	r5, r0, r6
 8000a5c:	e03b      	b.n	8000ad6 <cmox_drbg_bcc_process_input+0xa4>
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d013      	beq.n	8000a8e <cmox_drbg_bcc_process_input+0x5c>
 8000a66:	2110      	movs	r1, #16
 8000a68:	1a0d      	subs	r5, r1, r0
 8000a6a:	002a      	movs	r2, r5
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	9b06      	ldr	r3, [sp, #24]
 8000a70:	1818      	adds	r0, r3, r0
 8000a72:	f007 f9eb 	bl	8007e4c <__aeabi_memcpy>
 8000a76:	aa02      	add	r2, sp, #8
 8000a78:	0021      	movs	r1, r4
 8000a7a:	9806      	ldr	r0, [sp, #24]
 8000a7c:	f7ff ffbe 	bl	80009fc <cmox_convertBlockAndXor>
 8000a80:	0022      	movs	r2, r4
 8000a82:	a902      	add	r1, sp, #8
 8000a84:	9800      	ldr	r0, [sp, #0]
 8000a86:	6803      	ldr	r3, [r0, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4798      	blx	r3
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	940d      	str	r4, [sp, #52]	@ 0x34
 8000a90:	000c      	movs	r4, r1
 8000a92:	9501      	str	r5, [sp, #4]
 8000a94:	2500      	movs	r5, #0
 8000a96:	e00f      	b.n	8000ab8 <cmox_drbg_bcc_process_input+0x86>
 8000a98:	aa02      	add	r2, sp, #8
 8000a9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000a9c:	9801      	ldr	r0, [sp, #4]
 8000a9e:	012b      	lsls	r3, r5, #4
 8000aa0:	18c0      	adds	r0, r0, r3
 8000aa2:	1838      	adds	r0, r7, r0
 8000aa4:	f7ff ffaa 	bl	80009fc <cmox_convertBlockAndXor>
 8000aa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8000aaa:	a902      	add	r1, sp, #8
 8000aac:	9800      	ldr	r0, [sp, #0]
 8000aae:	6803      	ldr	r3, [r0, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4798      	blx	r3
 8000ab4:	3410      	adds	r4, #16
 8000ab6:	1c6d      	adds	r5, r5, #1
 8000ab8:	9801      	ldr	r0, [sp, #4]
 8000aba:	1a30      	subs	r0, r6, r0
 8000abc:	0900      	lsrs	r0, r0, #4
 8000abe:	4285      	cmp	r5, r0
 8000ac0:	d3ea      	bcc.n	8000a98 <cmox_drbg_bcc_process_input+0x66>
 8000ac2:	42b4      	cmp	r4, r6
 8000ac4:	d206      	bcs.n	8000ad4 <cmox_drbg_bcc_process_input+0xa2>
 8000ac6:	1b35      	subs	r5, r6, r4
 8000ac8:	002a      	movs	r2, r5
 8000aca:	1939      	adds	r1, r7, r4
 8000acc:	9806      	ldr	r0, [sp, #24]
 8000ace:	f007 f9bd 	bl	8007e4c <__aeabi_memcpy>
 8000ad2:	e000      	b.n	8000ad6 <cmox_drbg_bcc_process_input+0xa4>
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000ad8:	6005      	str	r5, [r0, #0]
 8000ada:	b007      	add	sp, #28
 8000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ade <cmox_ctr_drbg_increment_v>:
 8000ade:	68c1      	ldr	r1, [r0, #12]
 8000ae0:	1c49      	adds	r1, r1, #1
 8000ae2:	60c1      	str	r1, [r0, #12]
 8000ae4:	d10a      	bne.n	8000afc <cmox_ctr_drbg_increment_v+0x1e>
 8000ae6:	6881      	ldr	r1, [r0, #8]
 8000ae8:	1c49      	adds	r1, r1, #1
 8000aea:	6081      	str	r1, [r0, #8]
 8000aec:	d106      	bne.n	8000afc <cmox_ctr_drbg_increment_v+0x1e>
 8000aee:	6841      	ldr	r1, [r0, #4]
 8000af0:	1c49      	adds	r1, r1, #1
 8000af2:	6041      	str	r1, [r0, #4]
 8000af4:	d102      	bne.n	8000afc <cmox_ctr_drbg_increment_v+0x1e>
 8000af6:	6801      	ldr	r1, [r0, #0]
 8000af8:	1c49      	adds	r1, r1, #1
 8000afa:	6001      	str	r1, [r0, #0]
 8000afc:	4770      	bx	lr

08000afe <cmox_ctr_drbg_update>:
 8000afe:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000b00:	b08d      	sub	sp, #52	@ 0x34
 8000b02:	2700      	movs	r7, #0
 8000b04:	2400      	movs	r4, #0
 8000b06:	0005      	movs	r5, r0
 8000b08:	e00e      	b.n	8000b28 <cmox_ctr_drbg_update+0x2a>
 8000b0a:	2080      	movs	r0, #128	@ 0x80
 8000b0c:	0080      	lsls	r0, r0, #2
 8000b0e:	182e      	adds	r6, r5, r0
 8000b10:	0030      	movs	r0, r6
 8000b12:	f7ff ffe4 	bl	8000ade <cmox_ctr_drbg_increment_v>
 8000b16:	a801      	add	r0, sp, #4
 8000b18:	0121      	lsls	r1, r4, #4
 8000b1a:	1842      	adds	r2, r0, r1
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	1d28      	adds	r0, r5, #4
 8000b20:	686b      	ldr	r3, [r5, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4798      	blx	r3
 8000b26:	1c64      	adds	r4, r4, #1
 8000b28:	208f      	movs	r0, #143	@ 0x8f
 8000b2a:	0080      	lsls	r0, r0, #2
 8000b2c:	5828      	ldr	r0, [r5, r0]
 8000b2e:	0900      	lsrs	r0, r0, #4
 8000b30:	1c40      	adds	r0, r0, #1
 8000b32:	4284      	cmp	r4, r0
 8000b34:	d3e9      	bcc.n	8000b0a <cmox_ctr_drbg_update+0xc>
 8000b36:	208f      	movs	r0, #143	@ 0x8f
 8000b38:	0080      	lsls	r0, r0, #2
 8000b3a:	1829      	adds	r1, r5, r0
 8000b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000b3e:	e009      	b.n	8000b54 <cmox_ctr_drbg_update+0x56>
 8000b40:	00ba      	lsls	r2, r7, #2
 8000b42:	a801      	add	r0, sp, #4
 8000b44:	5884      	ldr	r4, [r0, r2]
 8000b46:	5898      	ldr	r0, [r3, r2]
 8000b48:	4060      	eors	r0, r4
 8000b4a:	18aa      	adds	r2, r5, r2
 8000b4c:	2484      	movs	r4, #132	@ 0x84
 8000b4e:	00a4      	lsls	r4, r4, #2
 8000b50:	5110      	str	r0, [r2, r4]
 8000b52:	1c7f      	adds	r7, r7, #1
 8000b54:	6808      	ldr	r0, [r1, #0]
 8000b56:	0880      	lsrs	r0, r0, #2
 8000b58:	4287      	cmp	r7, r0
 8000b5a:	d3f1      	bcc.n	8000b40 <cmox_ctr_drbg_update+0x42>
 8000b5c:	9500      	str	r5, [sp, #0]
 8000b5e:	228f      	movs	r2, #143	@ 0x8f
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	18ac      	adds	r4, r5, r2
 8000b64:	0005      	movs	r5, r0
 8000b66:	e00c      	b.n	8000b82 <cmox_ctr_drbg_update+0x84>
 8000b68:	00a8      	lsls	r0, r5, #2
 8000b6a:	9900      	ldr	r1, [sp, #0]
 8000b6c:	2680      	movs	r6, #128	@ 0x80
 8000b6e:	00b6      	lsls	r6, r6, #2
 8000b70:	1989      	adds	r1, r1, r6
 8000b72:	1aaa      	subs	r2, r5, r2
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	ae01      	add	r6, sp, #4
 8000b78:	5836      	ldr	r6, [r6, r0]
 8000b7a:	5818      	ldr	r0, [r3, r0]
 8000b7c:	4070      	eors	r0, r6
 8000b7e:	5088      	str	r0, [r1, r2]
 8000b80:	1c6d      	adds	r5, r5, #1
 8000b82:	6820      	ldr	r0, [r4, #0]
 8000b84:	0882      	lsrs	r2, r0, #2
 8000b86:	1d10      	adds	r0, r2, #4
 8000b88:	4285      	cmp	r5, r0
 8000b8a:	d3ed      	bcc.n	8000b68 <cmox_ctr_drbg_update+0x6a>
 8000b8c:	b00f      	add	sp, #60	@ 0x3c
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b90 <cmox_ctr_drbg_df>:
 8000b90:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000b92:	b0ae      	sub	sp, #184	@ 0xb8
 8000b94:	000c      	movs	r4, r1
 8000b96:	0015      	movs	r5, r2
 8000b98:	001f      	movs	r7, r3
 8000b9a:	2118      	movs	r1, #24
 8000b9c:	a818      	add	r0, sp, #96	@ 0x60
 8000b9e:	f007 f957 	bl	8007e50 <__aeabi_memclr>
 8000ba2:	a813      	add	r0, sp, #76	@ 0x4c
 8000ba4:	496f      	ldr	r1, [pc, #444]	@ (8000d64 <cmox_ctr_drbg_df+0x1d4>)
 8000ba6:	2214      	movs	r2, #20
 8000ba8:	f007 f950 	bl	8007e4c <__aeabi_memcpy>
 8000bac:	2001      	movs	r0, #1
 8000bae:	9003      	str	r0, [sp, #12]
 8000bb0:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000bb2:	218f      	movs	r1, #143	@ 0x8f
 8000bb4:	0089      	lsls	r1, r1, #2
 8000bb6:	1840      	adds	r0, r0, r1
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	6840      	ldr	r0, [r0, #4]
 8000bbc:	0082      	lsls	r2, r0, #2
 8000bbe:	9800      	ldr	r0, [sp, #0]
 8000bc0:	6941      	ldr	r1, [r0, #20]
 8000bc2:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000bc4:	2386      	movs	r3, #134	@ 0x86
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	18c0      	adds	r0, r0, r3
 8000bca:	f007 f93f 	bl	8007e4c <__aeabi_memcpy>
 8000bce:	9800      	ldr	r0, [sp, #0]
 8000bd0:	6800      	ldr	r0, [r0, #0]
 8000bd2:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	1889      	adds	r1, r1, r2
 8000bda:	6048      	str	r0, [r1, #4]
 8000bdc:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8000bde:	1828      	adds	r0, r5, r0
 8000be0:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8000be2:	1840      	adds	r0, r0, r1
 8000be4:	0001      	movs	r1, r0
 8000be6:	3119      	adds	r1, #25
 8000be8:	220f      	movs	r2, #15
 8000bea:	4211      	tst	r1, r2
 8000bec:	d003      	beq.n	8000bf6 <cmox_ctr_drbg_df+0x66>
 8000bee:	2311      	movs	r3, #17
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	1a99      	subs	r1, r3, r2
 8000bf4:	9103      	str	r1, [sp, #12]
 8000bf6:	a918      	add	r1, sp, #96	@ 0x60
 8000bf8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8000bfa:	18ea      	adds	r2, r5, r3
 8000bfc:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8000bfe:	18d2      	adds	r2, r2, r3
 8000c00:	74ca      	strb	r2, [r1, #19]
 8000c02:	0a02      	lsrs	r2, r0, #8
 8000c04:	748a      	strb	r2, [r1, #18]
 8000c06:	0c02      	lsrs	r2, r0, #16
 8000c08:	744a      	strb	r2, [r1, #17]
 8000c0a:	0e00      	lsrs	r0, r0, #24
 8000c0c:	7408      	strb	r0, [r1, #16]
 8000c0e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c10:	228f      	movs	r2, #143	@ 0x8f
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	5880      	ldr	r0, [r0, r2]
 8000c16:	3010      	adds	r0, #16
 8000c18:	75c8      	strb	r0, [r1, #23]
 8000c1a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c1c:	5880      	ldr	r0, [r0, r2]
 8000c1e:	3010      	adds	r0, #16
 8000c20:	0a00      	lsrs	r0, r0, #8
 8000c22:	7588      	strb	r0, [r1, #22]
 8000c24:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c26:	5880      	ldr	r0, [r0, r2]
 8000c28:	3010      	adds	r0, #16
 8000c2a:	0c00      	lsrs	r0, r0, #16
 8000c2c:	7548      	strb	r0, [r1, #21]
 8000c2e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c30:	5880      	ldr	r0, [r0, r2]
 8000c32:	3010      	adds	r0, #16
 8000c34:	0e00      	lsrs	r0, r0, #24
 8000c36:	7508      	strb	r0, [r1, #20]
 8000c38:	2000      	movs	r0, #0
 8000c3a:	70c8      	strb	r0, [r1, #3]
 8000c3c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	0049      	lsls	r1, r1, #1
 8000c42:	1846      	adds	r6, r0, r1
 8000c44:	9406      	str	r4, [sp, #24]
 8000c46:	9505      	str	r5, [sp, #20]
 8000c48:	9704      	str	r7, [sp, #16]
 8000c4a:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 8000c4c:	ac18      	add	r4, sp, #96	@ 0x60
 8000c4e:	e040      	b.n	8000cd2 <cmox_ctr_drbg_df+0x142>
 8000c50:	a91e      	add	r1, sp, #120	@ 0x78
 8000c52:	0100      	lsls	r0, r0, #4
 8000c54:	180f      	adds	r7, r1, r0
 8000c56:	a92a      	add	r1, sp, #168	@ 0xa8
 8000c58:	a818      	add	r0, sp, #96	@ 0x60
 8000c5a:	f7ff fe91 	bl	8000980 <convert_block_2_words>
 8000c5e:	003a      	movs	r2, r7
 8000c60:	a92a      	add	r1, sp, #168	@ 0xa8
 8000c62:	0030      	movs	r0, r6
 8000c64:	6833      	ldr	r3, [r6, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4798      	blx	r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	3010      	adds	r0, #16
 8000c6e:	a907      	add	r1, sp, #28
 8000c70:	c80c      	ldmia	r0!, {r2, r3}
 8000c72:	c10c      	stmia	r1!, {r2, r3}
 8000c74:	2008      	movs	r0, #8
 8000c76:	9002      	str	r0, [sp, #8]
 8000c78:	9701      	str	r7, [sp, #4]
 8000c7a:	a802      	add	r0, sp, #8
 8000c7c:	9000      	str	r0, [sp, #0]
 8000c7e:	ab07      	add	r3, sp, #28
 8000c80:	9a05      	ldr	r2, [sp, #20]
 8000c82:	9906      	ldr	r1, [sp, #24]
 8000c84:	0030      	movs	r0, r6
 8000c86:	f7ff fed4 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000c8a:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d008      	beq.n	8000ca2 <cmox_ctr_drbg_df+0x112>
 8000c90:	9701      	str	r7, [sp, #4]
 8000c92:	a802      	add	r0, sp, #8
 8000c94:	9000      	str	r0, [sp, #0]
 8000c96:	ab07      	add	r3, sp, #28
 8000c98:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8000c9a:	9904      	ldr	r1, [sp, #16]
 8000c9c:	0030      	movs	r0, r6
 8000c9e:	f7ff fec8 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000ca2:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d008      	beq.n	8000cba <cmox_ctr_drbg_df+0x12a>
 8000ca8:	9701      	str	r7, [sp, #4]
 8000caa:	a802      	add	r0, sp, #8
 8000cac:	9000      	str	r0, [sp, #0]
 8000cae:	ab07      	add	r3, sp, #28
 8000cb0:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8000cb2:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8000cb4:	0030      	movs	r0, r6
 8000cb6:	f7ff febc 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000cba:	9701      	str	r7, [sp, #4]
 8000cbc:	a802      	add	r0, sp, #8
 8000cbe:	9000      	str	r0, [sp, #0]
 8000cc0:	ab07      	add	r3, sp, #28
 8000cc2:	9a03      	ldr	r2, [sp, #12]
 8000cc4:	a913      	add	r1, sp, #76	@ 0x4c
 8000cc6:	0030      	movs	r0, r6
 8000cc8:	f7ff feb3 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000ccc:	78e0      	ldrb	r0, [r4, #3]
 8000cce:	1c40      	adds	r0, r0, #1
 8000cd0:	70e0      	strb	r0, [r4, #3]
 8000cd2:	78e0      	ldrb	r0, [r4, #3]
 8000cd4:	228f      	movs	r2, #143	@ 0x8f
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	58aa      	ldr	r2, [r5, r2]
 8000cda:	0912      	lsrs	r2, r2, #4
 8000cdc:	1c52      	adds	r2, r2, #1
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d3b6      	bcc.n	8000c50 <cmox_ctr_drbg_df+0xc0>
 8000ce2:	2400      	movs	r4, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	208f      	movs	r0, #143	@ 0x8f
 8000ce8:	0080      	lsls	r0, r0, #2
 8000cea:	182f      	adds	r7, r5, r0
 8000cec:	e00d      	b.n	8000d0a <cmox_ctr_drbg_df+0x17a>
 8000cee:	a81e      	add	r0, sp, #120	@ 0x78
 8000cf0:	0099      	lsls	r1, r3, #2
 8000cf2:	5840      	ldr	r0, [r0, r1]
 8000cf4:	a90b      	add	r1, sp, #44	@ 0x2c
 8000cf6:	009a      	lsls	r2, r3, #2
 8000cf8:	1889      	adds	r1, r1, r2
 8000cfa:	70c8      	strb	r0, [r1, #3]
 8000cfc:	0a02      	lsrs	r2, r0, #8
 8000cfe:	708a      	strb	r2, [r1, #2]
 8000d00:	0c02      	lsrs	r2, r0, #16
 8000d02:	704a      	strb	r2, [r1, #1]
 8000d04:	0e00      	lsrs	r0, r0, #24
 8000d06:	7008      	strb	r0, [r1, #0]
 8000d08:	1c5b      	adds	r3, r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	0890      	lsrs	r0, r2, #2
 8000d0e:	4283      	cmp	r3, r0
 8000d10:	d3ed      	bcc.n	8000cee <cmox_ctr_drbg_df+0x15e>
 8000d12:	208f      	movs	r0, #143	@ 0x8f
 8000d14:	0080      	lsls	r0, r0, #2
 8000d16:	1828      	adds	r0, r5, r0
 8000d18:	9000      	str	r0, [sp, #0]
 8000d1a:	a90b      	add	r1, sp, #44	@ 0x2c
 8000d1c:	0030      	movs	r0, r6
 8000d1e:	6833      	ldr	r3, [r6, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4798      	blx	r3
 8000d24:	af1e      	add	r7, sp, #120	@ 0x78
 8000d26:	e014      	b.n	8000d52 <cmox_ctr_drbg_df+0x1c2>
 8000d28:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8000d2a:	0122      	lsls	r2, r4, #4
 8000d2c:	188d      	adds	r5, r1, r2
 8000d2e:	002a      	movs	r2, r5
 8000d30:	0880      	lsrs	r0, r0, #2
 8000d32:	0080      	lsls	r0, r0, #2
 8000d34:	1839      	adds	r1, r7, r0
 8000d36:	0030      	movs	r0, r6
 8000d38:	6833      	ldr	r3, [r6, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4798      	blx	r3
 8000d3e:	2210      	movs	r2, #16
 8000d40:	0029      	movs	r1, r5
 8000d42:	9800      	ldr	r0, [sp, #0]
 8000d44:	6800      	ldr	r0, [r0, #0]
 8000d46:	0880      	lsrs	r0, r0, #2
 8000d48:	0080      	lsls	r0, r0, #2
 8000d4a:	1838      	adds	r0, r7, r0
 8000d4c:	f007 f87e 	bl	8007e4c <__aeabi_memcpy>
 8000d50:	1c64      	adds	r4, r4, #1
 8000d52:	9800      	ldr	r0, [sp, #0]
 8000d54:	6800      	ldr	r0, [r0, #0]
 8000d56:	0901      	lsrs	r1, r0, #4
 8000d58:	1c49      	adds	r1, r1, #1
 8000d5a:	428c      	cmp	r4, r1
 8000d5c:	d3e4      	bcc.n	8000d28 <cmox_ctr_drbg_df+0x198>
 8000d5e:	b02f      	add	sp, #188	@ 0xbc
 8000d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08001224 	.word	0x08001224

08000d68 <cmox_ctr_drbg_cleanup>:
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	2480      	movs	r4, #128	@ 0x80
 8000d6c:	02e4      	lsls	r4, r4, #11
 8000d6e:	f000 fa6b 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d101      	bne.n	8000d7a <cmox_ctr_drbg_cleanup+0x12>
 8000d76:	1ce4      	adds	r4, r4, #3
 8000d78:	e003      	b.n	8000d82 <cmox_ctr_drbg_cleanup+0x1a>
 8000d7a:	2196      	movs	r1, #150	@ 0x96
 8000d7c:	0089      	lsls	r1, r1, #2
 8000d7e:	f007 f867 	bl	8007e50 <__aeabi_memclr>
 8000d82:	0020      	movs	r0, r4
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <cmox_ctr_drbg_init>:
 8000d86:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d88:	b091      	sub	sp, #68	@ 0x44
 8000d8a:	0015      	movs	r5, r2
 8000d8c:	001f      	movs	r7, r3
 8000d8e:	2480      	movs	r4, #128	@ 0x80
 8000d90:	02e4      	lsls	r4, r4, #11
 8000d92:	f000 fa59 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8000d96:	0006      	movs	r6, r0
 8000d98:	d101      	bne.n	8000d9e <cmox_ctr_drbg_init+0x18>
 8000d9a:	1ce4      	adds	r4, r4, #3
 8000d9c:	e030      	b.n	8000e00 <cmox_ctr_drbg_init+0x7a>
 8000d9e:	9504      	str	r5, [sp, #16]
 8000da0:	208c      	movs	r0, #140	@ 0x8c
 8000da2:	0080      	lsls	r0, r0, #2
 8000da4:	1835      	adds	r5, r6, r0
 8000da6:	2000      	movs	r0, #0
 8000da8:	60a8      	str	r0, [r5, #8]
 8000daa:	6928      	ldr	r0, [r5, #16]
 8000dac:	0082      	lsls	r2, r0, #2
 8000dae:	69e9      	ldr	r1, [r5, #28]
 8000db0:	0030      	movs	r0, r6
 8000db2:	3010      	adds	r0, #16
 8000db4:	f007 f84a 	bl	8007e4c <__aeabi_memcpy>
 8000db8:	68e8      	ldr	r0, [r5, #12]
 8000dba:	60b0      	str	r0, [r6, #8]
 8000dbc:	9804      	ldr	r0, [sp, #16]
 8000dbe:	6969      	ldr	r1, [r5, #20]
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	d201      	bcs.n	8000dc8 <cmox_ctr_drbg_init+0x42>
 8000dc4:	340f      	adds	r4, #15
 8000dc6:	e01b      	b.n	8000e00 <cmox_ctr_drbg_init+0x7a>
 8000dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8000dca:	0a60      	lsrs	r0, r4, #9
 8000dcc:	1830      	adds	r0, r6, r0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	c006      	stmia	r0!, {r1, r2}
 8000dd4:	c006      	stmia	r0!, {r1, r2}
 8000dd6:	a805      	add	r0, sp, #20
 8000dd8:	9003      	str	r0, [sp, #12]
 8000dda:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8000ddc:	9002      	str	r0, [sp, #8]
 8000dde:	9701      	str	r7, [sp, #4]
 8000de0:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8000de2:	9000      	str	r0, [sp, #0]
 8000de4:	9a04      	ldr	r2, [sp, #16]
 8000de6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8000de8:	0030      	movs	r0, r6
 8000dea:	f7ff fed1 	bl	8000b90 <cmox_ctr_drbg_df>
 8000dee:	a905      	add	r1, sp, #20
 8000df0:	0030      	movs	r0, r6
 8000df2:	f7ff fe84 	bl	8000afe <cmox_ctr_drbg_update>
 8000df6:	2001      	movs	r0, #1
 8000df8:	2100      	movs	r1, #0
 8000dfa:	c503      	stmia	r5!, {r0, r1}
 8000dfc:	3d08      	subs	r5, #8
 8000dfe:	60a8      	str	r0, [r5, #8]
 8000e00:	0020      	movs	r0, r4
 8000e02:	b013      	add	sp, #76	@ 0x4c
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e06 <cmox_ctr_drbg_reseed>:
 8000e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e08:	b099      	sub	sp, #100	@ 0x64
 8000e0a:	000f      	movs	r7, r1
 8000e0c:	0014      	movs	r4, r2
 8000e0e:	001e      	movs	r6, r3
 8000e10:	2580      	movs	r5, #128	@ 0x80
 8000e12:	02ed      	lsls	r5, r5, #11
 8000e14:	f000 fa18 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8000e18:	9004      	str	r0, [sp, #16]
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d101      	bne.n	8000e22 <cmox_ctr_drbg_reseed+0x1c>
 8000e1e:	1ced      	adds	r5, r5, #3
 8000e20:	e04c      	b.n	8000ebc <cmox_ctr_drbg_reseed+0xb6>
 8000e22:	0022      	movs	r2, r4
 8000e24:	218c      	movs	r1, #140	@ 0x8c
 8000e26:	0089      	lsls	r1, r1, #2
 8000e28:	1840      	adds	r0, r0, r1
 8000e2a:	6940      	ldr	r0, [r0, #20]
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	d201      	bcs.n	8000e34 <cmox_ctr_drbg_reseed+0x2e>
 8000e30:	350f      	adds	r5, #15
 8000e32:	e043      	b.n	8000ebc <cmox_ctr_drbg_reseed+0xb6>
 8000e34:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8000e36:	0039      	movs	r1, r7
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d007      	beq.n	8000e4c <cmox_ctr_drbg_reseed+0x46>
 8000e3c:	0033      	movs	r3, r6
 8000e3e:	ac0d      	add	r4, sp, #52	@ 0x34
 8000e40:	9403      	str	r4, [sp, #12]
 8000e42:	2400      	movs	r4, #0
 8000e44:	9402      	str	r4, [sp, #8]
 8000e46:	9401      	str	r4, [sp, #4]
 8000e48:	9000      	str	r0, [sp, #0]
 8000e4a:	e006      	b.n	8000e5a <cmox_ctr_drbg_reseed+0x54>
 8000e4c:	a80d      	add	r0, sp, #52	@ 0x34
 8000e4e:	9003      	str	r0, [sp, #12]
 8000e50:	2000      	movs	r0, #0
 8000e52:	9002      	str	r0, [sp, #8]
 8000e54:	9001      	str	r0, [sp, #4]
 8000e56:	9000      	str	r0, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9804      	ldr	r0, [sp, #16]
 8000e5c:	f7ff fe98 	bl	8000b90 <cmox_ctr_drbg_df>
 8000e60:	2300      	movs	r3, #0
 8000e62:	9804      	ldr	r0, [sp, #16]
 8000e64:	218c      	movs	r1, #140	@ 0x8c
 8000e66:	0089      	lsls	r1, r1, #2
 8000e68:	1846      	adds	r6, r0, r1
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e013      	b.n	8000e96 <cmox_ctr_drbg_reseed+0x90>
 8000e6e:	0098      	lsls	r0, r3, #2
 8000e70:	1820      	adds	r0, r4, r0
 8000e72:	2184      	movs	r1, #132	@ 0x84
 8000e74:	0089      	lsls	r1, r1, #2
 8000e76:	1840      	adds	r0, r0, r1
 8000e78:	a905      	add	r1, sp, #20
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	1889      	adds	r1, r1, r2
 8000e7e:	6802      	ldr	r2, [r0, #0]
 8000e80:	70ca      	strb	r2, [r1, #3]
 8000e82:	6802      	ldr	r2, [r0, #0]
 8000e84:	0a12      	lsrs	r2, r2, #8
 8000e86:	708a      	strb	r2, [r1, #2]
 8000e88:	6802      	ldr	r2, [r0, #0]
 8000e8a:	0c12      	lsrs	r2, r2, #16
 8000e8c:	704a      	strb	r2, [r1, #1]
 8000e8e:	6800      	ldr	r0, [r0, #0]
 8000e90:	0e00      	lsrs	r0, r0, #24
 8000e92:	7008      	strb	r0, [r1, #0]
 8000e94:	1c5b      	adds	r3, r3, #1
 8000e96:	68f2      	ldr	r2, [r6, #12]
 8000e98:	0890      	lsrs	r0, r2, #2
 8000e9a:	4283      	cmp	r3, r0
 8000e9c:	d3e7      	bcc.n	8000e6e <cmox_ctr_drbg_reseed+0x68>
 8000e9e:	a905      	add	r1, sp, #20
 8000ea0:	1d20      	adds	r0, r4, #4
 8000ea2:	6863      	ldr	r3, [r4, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4798      	blx	r3
 8000ea8:	a90d      	add	r1, sp, #52	@ 0x34
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f7ff fe27 	bl	8000afe <cmox_ctr_drbg_update>
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	228c      	movs	r2, #140	@ 0x8c
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	18a2      	adds	r2, r4, r2
 8000eba:	c203      	stmia	r2!, {r0, r1}
 8000ebc:	0028      	movs	r0, r5
 8000ebe:	b019      	add	sp, #100	@ 0x64
 8000ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000ec4 <cmox_ctr_drbg_generate_single>:
 8000ec4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 8000ec6:	b09f      	sub	sp, #124	@ 0x7c
 8000ec8:	0005      	movs	r5, r0
 8000eca:	000f      	movs	r7, r1
 8000ecc:	0014      	movs	r4, r2
 8000ece:	2120      	movs	r1, #32
 8000ed0:	a80a      	add	r0, sp, #40	@ 0x28
 8000ed2:	f006 ffbd 	bl	8007e50 <__aeabi_memclr>
 8000ed6:	4668      	mov	r0, sp
 8000ed8:	4999      	ldr	r1, [pc, #612]	@ (8001140 <cmox_ctr_drbg_generate_single+0x27c>)
 8000eda:	c90c      	ldmia	r1!, {r2, r3}
 8000edc:	c00c      	stmia	r0!, {r2, r3}
 8000ede:	2600      	movs	r6, #0
 8000ee0:	4898      	ldr	r0, [pc, #608]	@ (8001144 <cmox_ctr_drbg_generate_single+0x280>)
 8000ee2:	7800      	ldrb	r0, [r0, #0]
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d101      	bne.n	8000eec <cmox_ctr_drbg_generate_single+0x28>
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e001      	b.n	8000ef0 <cmox_ctr_drbg_generate_single+0x2c>
 8000eec:	2004      	movs	r0, #4
 8000eee:	2104      	movs	r1, #4
 8000ef0:	9412      	str	r4, [sp, #72]	@ 0x48
 8000ef2:	4a95      	ldr	r2, [pc, #596]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000ef4:	5810      	ldr	r0, [r2, r0]
 8000ef6:	466a      	mov	r2, sp
 8000ef8:	5851      	ldr	r1, [r2, r1]
 8000efa:	1841      	adds	r1, r0, r1
 8000efc:	4893      	ldr	r0, [pc, #588]	@ (800114c <cmox_ctr_drbg_generate_single+0x288>)
 8000efe:	6008      	str	r0, [r1, #0]
 8000f00:	6808      	ldr	r0, [r1, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	608a      	str	r2, [r1, #8]
 8000f06:	4990      	ldr	r1, [pc, #576]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000f08:	6849      	ldr	r1, [r1, #4]
 8000f0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8000f0c:	498e      	ldr	r1, [pc, #568]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000f0e:	6809      	ldr	r1, [r1, #0]
 8000f10:	9108      	str	r1, [sp, #32]
 8000f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000f14:	4041      	eors	r1, r0
 8000f16:	9800      	ldr	r0, [sp, #0]
 8000f18:	4048      	eors	r0, r1
 8000f1a:	498d      	ldr	r1, [pc, #564]	@ (8001150 <cmox_ctr_drbg_generate_single+0x28c>)
 8000f1c:	4041      	eors	r1, r0
 8000f1e:	9808      	ldr	r0, [sp, #32]
 8000f20:	9a01      	ldr	r2, [sp, #4]
 8000f22:	4042      	eors	r2, r0
 8000f24:	488b      	ldr	r0, [pc, #556]	@ (8001154 <cmox_ctr_drbg_generate_single+0x290>)
 8000f26:	4050      	eors	r0, r2
 8000f28:	1808      	adds	r0, r1, r0
 8000f2a:	4c8b      	ldr	r4, [pc, #556]	@ (8001158 <cmox_ctr_drbg_generate_single+0x294>)
 8000f2c:	4044      	eors	r4, r0
 8000f2e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d032      	beq.n	8000f9a <cmox_ctr_drbg_generate_single+0xd6>
 8000f34:	0039      	movs	r1, r7
 8000f36:	a813      	add	r0, sp, #76	@ 0x4c
 8000f38:	9003      	str	r0, [sp, #12]
 8000f3a:	9602      	str	r6, [sp, #8]
 8000f3c:	9601      	str	r6, [sp, #4]
 8000f3e:	9600      	str	r6, [sp, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8000f44:	0028      	movs	r0, r5
 8000f46:	f7ff fe23 	bl	8000b90 <cmox_ctr_drbg_df>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	aa0a      	add	r2, sp, #40	@ 0x28
 8000f4e:	e012      	b.n	8000f76 <cmox_ctr_drbg_generate_single+0xb2>
 8000f50:	0098      	lsls	r0, r3, #2
 8000f52:	1828      	adds	r0, r5, r0
 8000f54:	2184      	movs	r1, #132	@ 0x84
 8000f56:	0089      	lsls	r1, r1, #2
 8000f58:	1840      	adds	r0, r0, r1
 8000f5a:	0099      	lsls	r1, r3, #2
 8000f5c:	1851      	adds	r1, r2, r1
 8000f5e:	6807      	ldr	r7, [r0, #0]
 8000f60:	70cf      	strb	r7, [r1, #3]
 8000f62:	6807      	ldr	r7, [r0, #0]
 8000f64:	0a3f      	lsrs	r7, r7, #8
 8000f66:	708f      	strb	r7, [r1, #2]
 8000f68:	6807      	ldr	r7, [r0, #0]
 8000f6a:	0c3f      	lsrs	r7, r7, #16
 8000f6c:	704f      	strb	r7, [r1, #1]
 8000f6e:	6800      	ldr	r0, [r0, #0]
 8000f70:	0e00      	lsrs	r0, r0, #24
 8000f72:	7008      	strb	r0, [r1, #0]
 8000f74:	1c5b      	adds	r3, r3, #1
 8000f76:	208c      	movs	r0, #140	@ 0x8c
 8000f78:	0080      	lsls	r0, r0, #2
 8000f7a:	1828      	adds	r0, r5, r0
 8000f7c:	68c0      	ldr	r0, [r0, #12]
 8000f7e:	0881      	lsrs	r1, r0, #2
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d3e5      	bcc.n	8000f50 <cmox_ctr_drbg_generate_single+0x8c>
 8000f84:	0002      	movs	r2, r0
 8000f86:	a90a      	add	r1, sp, #40	@ 0x28
 8000f88:	1d28      	adds	r0, r5, #4
 8000f8a:	686b      	ldr	r3, [r5, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4798      	blx	r3
 8000f90:	a913      	add	r1, sp, #76	@ 0x4c
 8000f92:	0028      	movs	r0, r5
 8000f94:	f7ff fdb3 	bl	8000afe <cmox_ctr_drbg_update>
 8000f98:	e007      	b.n	8000faa <cmox_ctr_drbg_generate_single+0xe6>
 8000f9a:	208c      	movs	r0, #140	@ 0x8c
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	1828      	adds	r0, r5, r0
 8000fa0:	68c1      	ldr	r1, [r0, #12]
 8000fa2:	3110      	adds	r1, #16
 8000fa4:	a813      	add	r0, sp, #76	@ 0x4c
 8000fa6:	f006 ff53 	bl	8007e50 <__aeabi_memclr>
 8000faa:	0023      	movs	r3, r4
 8000fac:	d03d      	beq.n	800102a <cmox_ctr_drbg_generate_single+0x166>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e03b      	b.n	800102a <cmox_ctr_drbg_generate_single+0x166>
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	e008      	b.n	8000fca <cmox_ctr_drbg_generate_single+0x106>
 8000fb8:	4668      	mov	r0, sp
 8000fba:	4961      	ldr	r1, [pc, #388]	@ (8001140 <cmox_ctr_drbg_generate_single+0x27c>)
 8000fbc:	c914      	ldmia	r1!, {r2, r4}
 8000fbe:	c014      	stmia	r0!, {r2, r4}
 8000fc0:	4860      	ldr	r0, [pc, #384]	@ (8001144 <cmox_ctr_drbg_generate_single+0x280>)
 8000fc2:	7800      	ldrb	r0, [r0, #0]
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d1f4      	bne.n	8000fb2 <cmox_ctr_drbg_generate_single+0xee>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4a5f      	ldr	r2, [pc, #380]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000fcc:	5810      	ldr	r0, [r2, r0]
 8000fce:	466a      	mov	r2, sp
 8000fd0:	5851      	ldr	r1, [r2, r1]
 8000fd2:	1841      	adds	r1, r0, r1
 8000fd4:	4861      	ldr	r0, [pc, #388]	@ (800115c <cmox_ctr_drbg_generate_single+0x298>)
 8000fd6:	6008      	str	r0, [r1, #0]
 8000fd8:	6808      	ldr	r0, [r1, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	608a      	str	r2, [r1, #8]
 8000fde:	9900      	ldr	r1, [sp, #0]
 8000fe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000fe2:	404a      	eors	r2, r1
 8000fe4:	4050      	eors	r0, r2
 8000fe6:	495a      	ldr	r1, [pc, #360]	@ (8001150 <cmox_ctr_drbg_generate_single+0x28c>)
 8000fe8:	4041      	eors	r1, r0
 8000fea:	9801      	ldr	r0, [sp, #4]
 8000fec:	9a08      	ldr	r2, [sp, #32]
 8000fee:	4042      	eors	r2, r0
 8000ff0:	4858      	ldr	r0, [pc, #352]	@ (8001154 <cmox_ctr_drbg_generate_single+0x290>)
 8000ff2:	4050      	eors	r0, r2
 8000ff4:	1808      	adds	r0, r1, r0
 8000ff6:	495a      	ldr	r1, [pc, #360]	@ (8001160 <cmox_ctr_drbg_generate_single+0x29c>)
 8000ff8:	4041      	eors	r1, r0
 8000ffa:	0008      	movs	r0, r1
 8000ffc:	d000      	beq.n	8001000 <cmox_ctr_drbg_generate_single+0x13c>
 8000ffe:	2001      	movs	r0, #1
 8001000:	a90a      	add	r1, sp, #40	@ 0x28
 8001002:	1a18      	subs	r0, r3, r0
 8001004:	0080      	lsls	r0, r0, #2
 8001006:	1808      	adds	r0, r1, r0
 8001008:	0099      	lsls	r1, r3, #2
 800100a:	1869      	adds	r1, r5, r1
 800100c:	2284      	movs	r2, #132	@ 0x84
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	1889      	adds	r1, r1, r2
 8001012:	680a      	ldr	r2, [r1, #0]
 8001014:	70c2      	strb	r2, [r0, #3]
 8001016:	680a      	ldr	r2, [r1, #0]
 8001018:	0a12      	lsrs	r2, r2, #8
 800101a:	7082      	strb	r2, [r0, #2]
 800101c:	680a      	ldr	r2, [r1, #0]
 800101e:	0c12      	lsrs	r2, r2, #16
 8001020:	7042      	strb	r2, [r0, #1]
 8001022:	6809      	ldr	r1, [r1, #0]
 8001024:	0e09      	lsrs	r1, r1, #24
 8001026:	7001      	strb	r1, [r0, #0]
 8001028:	1c5b      	adds	r3, r3, #1
 800102a:	208c      	movs	r0, #140	@ 0x8c
 800102c:	0080      	lsls	r0, r0, #2
 800102e:	1828      	adds	r0, r5, r0
 8001030:	68c2      	ldr	r2, [r0, #12]
 8001032:	0890      	lsrs	r0, r2, #2
 8001034:	4283      	cmp	r3, r0
 8001036:	d3bf      	bcc.n	8000fb8 <cmox_ctr_drbg_generate_single+0xf4>
 8001038:	a90a      	add	r1, sp, #40	@ 0x28
 800103a:	1d28      	adds	r0, r5, #4
 800103c:	686b      	ldr	r3, [r5, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4798      	blx	r3
 8001042:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8001044:	0700      	lsls	r0, r0, #28
 8001046:	0f00      	lsrs	r0, r0, #28
 8001048:	9000      	str	r0, [sp, #0]
 800104a:	2410      	movs	r4, #16
 800104c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800104e:	e023      	b.n	8001098 <cmox_ctr_drbg_generate_single+0x1d4>
 8001050:	2080      	movs	r0, #128	@ 0x80
 8001052:	0080      	lsls	r0, r0, #2
 8001054:	1828      	adds	r0, r5, r0
 8001056:	f7ff fd42 	bl	8000ade <cmox_ctr_drbg_increment_v>
 800105a:	aa04      	add	r2, sp, #16
 800105c:	2080      	movs	r0, #128	@ 0x80
 800105e:	0080      	lsls	r0, r0, #2
 8001060:	1829      	adds	r1, r5, r0
 8001062:	1d28      	adds	r0, r5, #4
 8001064:	686b      	ldr	r3, [r5, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4798      	blx	r3
 800106a:	2200      	movs	r2, #0
 800106c:	0090      	lsls	r0, r2, #2
 800106e:	1820      	adds	r0, r4, r0
 8001070:	1838      	adds	r0, r7, r0
 8001072:	3810      	subs	r0, #16
 8001074:	a904      	add	r1, sp, #16
 8001076:	0093      	lsls	r3, r2, #2
 8001078:	18c9      	adds	r1, r1, r3
 800107a:	680b      	ldr	r3, [r1, #0]
 800107c:	70c3      	strb	r3, [r0, #3]
 800107e:	680b      	ldr	r3, [r1, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	7083      	strb	r3, [r0, #2]
 8001084:	680b      	ldr	r3, [r1, #0]
 8001086:	0c1b      	lsrs	r3, r3, #16
 8001088:	7043      	strb	r3, [r0, #1]
 800108a:	6809      	ldr	r1, [r1, #0]
 800108c:	0e09      	lsrs	r1, r1, #24
 800108e:	7001      	strb	r1, [r0, #0]
 8001090:	1c52      	adds	r2, r2, #1
 8001092:	2a04      	cmp	r2, #4
 8001094:	d3ea      	bcc.n	800106c <cmox_ctr_drbg_generate_single+0x1a8>
 8001096:	3410      	adds	r4, #16
 8001098:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800109a:	42a0      	cmp	r0, r4
 800109c:	d2d8      	bcs.n	8001050 <cmox_ctr_drbg_generate_single+0x18c>
 800109e:	9800      	ldr	r0, [sp, #0]
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d03d      	beq.n	8001120 <cmox_ctr_drbg_generate_single+0x25c>
 80010a4:	2080      	movs	r0, #128	@ 0x80
 80010a6:	0080      	lsls	r0, r0, #2
 80010a8:	1828      	adds	r0, r5, r0
 80010aa:	f7ff fd18 	bl	8000ade <cmox_ctr_drbg_increment_v>
 80010ae:	aa04      	add	r2, sp, #16
 80010b0:	2080      	movs	r0, #128	@ 0x80
 80010b2:	0080      	lsls	r0, r0, #2
 80010b4:	1829      	adds	r1, r5, r0
 80010b6:	1d28      	adds	r0, r5, #4
 80010b8:	686b      	ldr	r3, [r5, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4798      	blx	r3
 80010be:	0038      	movs	r0, r7
 80010c0:	9f00      	ldr	r7, [sp, #0]
 80010c2:	e00d      	b.n	80010e0 <cmox_ctr_drbg_generate_single+0x21c>
 80010c4:	18c1      	adds	r1, r0, r3
 80010c6:	3910      	subs	r1, #16
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	70cb      	strb	r3, [r1, #3]
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	708b      	strb	r3, [r1, #2]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	704b      	strb	r3, [r1, #1]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	0e12      	lsrs	r2, r2, #24
 80010dc:	700a      	strb	r2, [r1, #0]
 80010de:	1c76      	adds	r6, r6, #1
 80010e0:	a904      	add	r1, sp, #16
 80010e2:	00b2      	lsls	r2, r6, #2
 80010e4:	188a      	adds	r2, r1, r2
 80010e6:	00b1      	lsls	r1, r6, #2
 80010e8:	1863      	adds	r3, r4, r1
 80010ea:	08b9      	lsrs	r1, r7, #2
 80010ec:	428e      	cmp	r6, r1
 80010ee:	d3e9      	bcc.n	80010c4 <cmox_ctr_drbg_generate_single+0x200>
 80010f0:	2103      	movs	r1, #3
 80010f2:	2403      	movs	r4, #3
 80010f4:	403c      	ands	r4, r7
 80010f6:	d013      	beq.n	8001120 <cmox_ctr_drbg_generate_single+0x25c>
 80010f8:	6816      	ldr	r6, [r2, #0]
 80010fa:	46b4      	mov	ip, r6
 80010fc:	2604      	movs	r6, #4
 80010fe:	4039      	ands	r1, r7
 8001100:	1a71      	subs	r1, r6, r1
 8001102:	00c9      	lsls	r1, r1, #3
 8001104:	4666      	mov	r6, ip
 8001106:	40ce      	lsrs	r6, r1
 8001108:	6016      	str	r6, [r2, #0]
 800110a:	3811      	subs	r0, #17
 800110c:	1919      	adds	r1, r3, r4
 800110e:	5446      	strb	r6, [r0, r1]
 8001110:	e004      	b.n	800111c <cmox_ctr_drbg_generate_single+0x258>
 8001112:	6811      	ldr	r1, [r2, #0]
 8001114:	0a09      	lsrs	r1, r1, #8
 8001116:	6011      	str	r1, [r2, #0]
 8001118:	191e      	adds	r6, r3, r4
 800111a:	5581      	strb	r1, [r0, r6]
 800111c:	1e64      	subs	r4, r4, #1
 800111e:	d1f8      	bne.n	8001112 <cmox_ctr_drbg_generate_single+0x24e>
 8001120:	a913      	add	r1, sp, #76	@ 0x4c
 8001122:	0028      	movs	r0, r5
 8001124:	f7ff fceb 	bl	8000afe <cmox_ctr_drbg_update>
 8001128:	208c      	movs	r0, #140	@ 0x8c
 800112a:	0080      	lsls	r0, r0, #2
 800112c:	182a      	adds	r2, r5, r0
 800112e:	ca03      	ldmia	r2!, {r0, r1}
 8001130:	3a08      	subs	r2, #8
 8001132:	2300      	movs	r3, #0
 8001134:	1c40      	adds	r0, r0, #1
 8001136:	4159      	adcs	r1, r3
 8001138:	c203      	stmia	r2!, {r0, r1}
 800113a:	b021      	add	sp, #132	@ 0x84
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	bf00      	nop
 8001140:	0800121c 	.word	0x0800121c
 8001144:	200000dc 	.word	0x200000dc
 8001148:	08008a38 	.word	0x08008a38
 800114c:	fd31599e 	.word	0xfd31599e
 8001150:	12008504 	.word	0x12008504
 8001154:	7a0168fc 	.word	0x7a0168fc
 8001158:	c3ec4f8b 	.word	0xc3ec4f8b
 800115c:	c609d343 	.word	0xc609d343
 8001160:	e7b6faea 	.word	0xe7b6faea

08001164 <cmox_ctr_drbg_generate>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	000c      	movs	r4, r1
 800116a:	0017      	movs	r7, r2
 800116c:	001e      	movs	r6, r3
 800116e:	2180      	movs	r1, #128	@ 0x80
 8001170:	02c9      	lsls	r1, r1, #11
 8001172:	9103      	str	r1, [sp, #12]
 8001174:	f000 f868 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8001178:	2800      	cmp	r0, #0
 800117a:	d101      	bne.n	8001180 <cmox_ctr_drbg_generate+0x1c>
 800117c:	4d24      	ldr	r5, [pc, #144]	@ (8001210 <cmox_ctr_drbg_generate+0xac>)
 800117e:	e044      	b.n	800120a <cmox_ctr_drbg_generate+0xa6>
 8001180:	218c      	movs	r1, #140	@ 0x8c
 8001182:	0089      	lsls	r1, r1, #2
 8001184:	1841      	adds	r1, r0, r1
 8001186:	6889      	ldr	r1, [r1, #8]
 8001188:	2900      	cmp	r1, #0
 800118a:	d101      	bne.n	8001190 <cmox_ctr_drbg_generate+0x2c>
 800118c:	4d21      	ldr	r5, [pc, #132]	@ (8001214 <cmox_ctr_drbg_generate+0xb0>)
 800118e:	e03c      	b.n	800120a <cmox_ctr_drbg_generate+0xa6>
 8001190:	228c      	movs	r2, #140	@ 0x8c
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	1882      	adds	r2, r0, r2
 8001196:	9204      	str	r2, [sp, #16]
 8001198:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800119a:	9402      	str	r4, [sp, #8]
 800119c:	9001      	str	r0, [sp, #4]
 800119e:	2400      	movs	r4, #0
 80011a0:	e00a      	b.n	80011b8 <cmox_ctr_drbg_generate+0x54>
 80011a2:	9800      	ldr	r0, [sp, #0]
 80011a4:	4360      	muls	r0, r4
 80011a6:	1a29      	subs	r1, r5, r0
 80011a8:	9100      	str	r1, [sp, #0]
 80011aa:	1833      	adds	r3, r6, r0
 80011ac:	003a      	movs	r2, r7
 80011ae:	9902      	ldr	r1, [sp, #8]
 80011b0:	9801      	ldr	r0, [sp, #4]
 80011b2:	f7ff fe87 	bl	8000ec4 <cmox_ctr_drbg_generate_single>
 80011b6:	1c64      	adds	r4, r4, #1
 80011b8:	9804      	ldr	r0, [sp, #16]
 80011ba:	6980      	ldr	r0, [r0, #24]
 80011bc:	9000      	str	r0, [sp, #0]
 80011be:	9804      	ldr	r0, [sp, #16]
 80011c0:	c803      	ldmia	r0, {r0, r1}
 80011c2:	aa06      	add	r2, sp, #24
 80011c4:	c203      	stmia	r2!, {r0, r1}
 80011c6:	0028      	movs	r0, r5
 80011c8:	9900      	ldr	r1, [sp, #0]
 80011ca:	f000 faf1 	bl	80017b0 <__udivsi3>
 80011ce:	4284      	cmp	r4, r0
 80011d0:	d206      	bcs.n	80011e0 <cmox_ctr_drbg_generate+0x7c>
 80011d2:	a806      	add	r0, sp, #24
 80011d4:	c803      	ldmia	r0, {r0, r1}
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4299      	cmp	r1, r3
 80011dc:	d3e1      	bcc.n	80011a2 <cmox_ctr_drbg_generate+0x3e>
 80011de:	e008      	b.n	80011f2 <cmox_ctr_drbg_generate+0x8e>
 80011e0:	9704      	str	r7, [sp, #16]
 80011e2:	002f      	movs	r7, r5
 80011e4:	9d03      	ldr	r5, [sp, #12]
 80011e6:	a806      	add	r0, sp, #24
 80011e8:	c803      	ldmia	r0, {r0, r1}
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	025b      	lsls	r3, r3, #9
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d301      	bcc.n	80011f6 <cmox_ctr_drbg_generate+0x92>
 80011f2:	4d09      	ldr	r5, [pc, #36]	@ (8001218 <cmox_ctr_drbg_generate+0xb4>)
 80011f4:	e009      	b.n	800120a <cmox_ctr_drbg_generate+0xa6>
 80011f6:	9800      	ldr	r0, [sp, #0]
 80011f8:	4344      	muls	r4, r0
 80011fa:	1b38      	subs	r0, r7, r4
 80011fc:	9000      	str	r0, [sp, #0]
 80011fe:	1933      	adds	r3, r6, r4
 8001200:	9a04      	ldr	r2, [sp, #16]
 8001202:	9902      	ldr	r1, [sp, #8]
 8001204:	9801      	ldr	r0, [sp, #4]
 8001206:	f7ff fe5d 	bl	8000ec4 <cmox_ctr_drbg_generate_single>
 800120a:	0028      	movs	r0, r5
 800120c:	b009      	add	sp, #36	@ 0x24
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001210:	00040003 	.word	0x00040003
 8001214:	0004000d 	.word	0x0004000d
 8001218:	0004000e 	.word	0x0004000e
 800121c:	0101b004 	.word	0x0101b004
 8001220:	45011700 	.word	0x45011700

08001224 <.text_15>:
 8001224:	00000080 	.word	0x00000080
	...

08001238 <CMOX_CTR_DRBG_TABLE>:
 8001238:	08000d69 08000d87 08000e07 08001165     i...........e...

08001248 <cmox_ctr_drbg_getByDRBG>:
 8001248:	6801      	ldr	r1, [r0, #0]
 800124a:	4a02      	ldr	r2, [pc, #8]	@ (8001254 <cmox_ctr_drbg_getByDRBG+0xc>)
 800124c:	4291      	cmp	r1, r2
 800124e:	d000      	beq.n	8001252 <cmox_ctr_drbg_getByDRBG+0xa>
 8001250:	2000      	movs	r0, #0
 8001252:	4770      	bx	lr
 8001254:	08001238 	.word	0x08001238

08001258 <cmox_ctr_drbg_construct>:
 8001258:	2800      	cmp	r0, #0
 800125a:	d01b      	beq.n	8001294 <cmox_ctr_drbg_construct+0x3c>
 800125c:	2900      	cmp	r1, #0
 800125e:	d101      	bne.n	8001264 <cmox_ctr_drbg_construct+0xc>
 8001260:	2000      	movs	r0, #0
 8001262:	4770      	bx	lr
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <cmox_ctr_drbg_construct+0x40>)
 8001266:	6002      	str	r2, [r0, #0]
 8001268:	680a      	ldr	r2, [r1, #0]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	6043      	str	r3, [r0, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	50c2      	str	r2, [r0, r3]
 8001276:	228f      	movs	r2, #143	@ 0x8f
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	1882      	adds	r2, r0, r2
 800127c:	684b      	ldr	r3, [r1, #4]
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	688b      	ldr	r3, [r1, #8]
 8001282:	6053      	str	r3, [r2, #4]
 8001284:	698b      	ldr	r3, [r1, #24]
 8001286:	6113      	str	r3, [r2, #16]
 8001288:	69cb      	ldr	r3, [r1, #28]
 800128a:	6153      	str	r3, [r2, #20]
 800128c:	690b      	ldr	r3, [r1, #16]
 800128e:	6093      	str	r3, [r2, #8]
 8001290:	68c9      	ldr	r1, [r1, #12]
 8001292:	60d1      	str	r1, [r2, #12]
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	08001238 	.word	0x08001238

0800129c <cmox_drbg_cleanup>:
 800129c:	0001      	movs	r1, r0
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <cmox_drbg_cleanup+0x20>)
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d100      	bne.n	80012a6 <cmox_drbg_cleanup+0xa>
 80012a4:	4770      	bx	lr
 80012a6:	b580      	push	{r7, lr}
 80012a8:	680a      	ldr	r2, [r1, #0]
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d004      	beq.n	80012b8 <cmox_drbg_cleanup+0x1c>
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d001      	beq.n	80012b8 <cmox_drbg_cleanup+0x1c>
 80012b4:	0008      	movs	r0, r1
 80012b6:	4790      	blx	r2
 80012b8:	bd02      	pop	{r1, pc}
 80012ba:	bf00      	nop
 80012bc:	00040003 	.word	0x00040003

080012c0 <cmox_drbg_init>:
 80012c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d014      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012c6:	6804      	ldr	r4, [r0, #0]
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	d011      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012cc:	6864      	ldr	r4, [r4, #4]
 80012ce:	2c00      	cmp	r4, #0
 80012d0:	d00e      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d00c      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d00a      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80012dc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d001      	beq.n	80012e6 <cmox_drbg_init+0x26>
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d004      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012e6:	9f08      	ldr	r7, [sp, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <cmox_drbg_init+0x34>
 80012ec:	2f00      	cmp	r7, #0
 80012ee:	d001      	beq.n	80012f4 <cmox_drbg_init+0x34>
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <cmox_drbg_init+0x40>)
 80012f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80012f4:	9502      	str	r5, [sp, #8]
 80012f6:	9601      	str	r6, [sp, #4]
 80012f8:	9700      	str	r7, [sp, #0]
 80012fa:	47a0      	blx	r4
 80012fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80012fe:	bf00      	nop
 8001300:	00040003 	.word	0x00040003

08001304 <cmox_drbg_reseed>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	2800      	cmp	r0, #0
 8001308:	d00c      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 800130a:	6804      	ldr	r4, [r0, #0]
 800130c:	2c00      	cmp	r4, #0
 800130e:	d009      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 8001310:	68a4      	ldr	r4, [r4, #8]
 8001312:	2c00      	cmp	r4, #0
 8001314:	d006      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 8001316:	2900      	cmp	r1, #0
 8001318:	d004      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 800131a:	9d04      	ldr	r5, [sp, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <cmox_drbg_reseed+0x24>
 8001320:	2d00      	cmp	r5, #0
 8001322:	d001      	beq.n	8001328 <cmox_drbg_reseed+0x24>
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <cmox_drbg_reseed+0x2c>)
 8001326:	bd32      	pop	{r1, r4, r5, pc}
 8001328:	9500      	str	r5, [sp, #0]
 800132a:	47a0      	blx	r4
 800132c:	bd32      	pop	{r1, r4, r5, pc}
 800132e:	bf00      	nop
 8001330:	00040003 	.word	0x00040003

08001334 <cmox_drbg_generate>:
 8001334:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	480a      	ldr	r0, [pc, #40]	@ (8001364 <cmox_drbg_generate+0x30>)
 800133a:	2c00      	cmp	r4, #0
 800133c:	d011      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 800133e:	6825      	ldr	r5, [r4, #0]
 8001340:	2d00      	cmp	r5, #0
 8001342:	d00e      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 8001344:	68ed      	ldr	r5, [r5, #12]
 8001346:	2d00      	cmp	r5, #0
 8001348:	d00b      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 800134a:	2900      	cmp	r1, #0
 800134c:	d101      	bne.n	8001352 <cmox_drbg_generate+0x1e>
 800134e:	2a00      	cmp	r2, #0
 8001350:	d107      	bne.n	8001362 <cmox_drbg_generate+0x2e>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 8001356:	9e06      	ldr	r6, [sp, #24]
 8001358:	2e00      	cmp	r6, #0
 800135a:	d002      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 800135c:	9600      	str	r6, [sp, #0]
 800135e:	0020      	movs	r0, r4
 8001360:	47a8      	blx	r5
 8001362:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001364:	00040003 	.word	0x00040003

08001368 <cmox_initialize>:
 8001368:	b580      	push	{r7, lr}
 800136a:	2800      	cmp	r0, #0
 800136c:	d009      	beq.n	8001382 <cmox_initialize+0x1a>
 800136e:	6801      	ldr	r1, [r0, #0]
 8001370:	2900      	cmp	r1, #0
 8001372:	d005      	beq.n	8001380 <cmox_initialize+0x18>
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <cmox_initialize+0x20>)
 8001376:	4291      	cmp	r1, r2
 8001378:	d102      	bne.n	8001380 <cmox_initialize+0x18>
 800137a:	2101      	movs	r1, #1
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <cmox_initialize+0x24>)
 800137e:	7011      	strb	r1, [r2, #0]
 8001380:	6840      	ldr	r0, [r0, #4]
 8001382:	f000 fa29 	bl	80017d8 <cmox_ll_init>
 8001386:	bd02      	pop	{r1, pc}
 8001388:	48370000 	.word	0x48370000
 800138c:	200000dc 	.word	0x200000dc

08001390 <cmox_aesFast_encrypt>:
 8001390:	b4f4      	push	{r2, r4, r5, r6, r7}
 8001392:	b08d      	sub	sp, #52	@ 0x34
 8001394:	0002      	movs	r2, r0
 8001396:	0008      	movs	r0, r1
 8001398:	6851      	ldr	r1, [r2, #4]
 800139a:	08ce      	lsrs	r6, r1, #3
 800139c:	1cf6      	adds	r6, r6, #3
 800139e:	0015      	movs	r5, r2
 80013a0:	350c      	adds	r5, #12
 80013a2:	6802      	ldr	r2, [r0, #0]
 80013a4:	6829      	ldr	r1, [r5, #0]
 80013a6:	4051      	eors	r1, r2
 80013a8:	6843      	ldr	r3, [r0, #4]
 80013aa:	686a      	ldr	r2, [r5, #4]
 80013ac:	405a      	eors	r2, r3
 80013ae:	6884      	ldr	r4, [r0, #8]
 80013b0:	68ab      	ldr	r3, [r5, #8]
 80013b2:	4063      	eors	r3, r4
 80013b4:	68c0      	ldr	r0, [r0, #12]
 80013b6:	68ec      	ldr	r4, [r5, #12]
 80013b8:	4044      	eors	r4, r0
 80013ba:	9601      	str	r6, [sp, #4]
 80013bc:	0028      	movs	r0, r5
 80013be:	e059      	b.n	8001474 <cmox_aesFast_encrypt+0xe4>
 80013c0:	4ca8      	ldr	r4, [pc, #672]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80013c2:	00be      	lsls	r6, r7, #2
 80013c4:	59a6      	ldr	r6, [r4, r6]
 80013c6:	2708      	movs	r7, #8
 80013c8:	41fe      	rors	r6, r7
 80013ca:	2710      	movs	r7, #16
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	58e3      	ldr	r3, [r4, r3]
 80013d0:	41fb      	rors	r3, r7
 80013d2:	2718      	movs	r7, #24
 80013d4:	00ad      	lsls	r5, r5, #2
 80013d6:	5965      	ldr	r5, [r4, r5]
 80013d8:	41fd      	rors	r5, r7
 80013da:	0089      	lsls	r1, r1, #2
 80013dc:	5861      	ldr	r1, [r4, r1]
 80013de:	404e      	eors	r6, r1
 80013e0:	4073      	eors	r3, r6
 80013e2:	405d      	eors	r5, r3
 80013e4:	6801      	ldr	r1, [r0, #0]
 80013e6:	4069      	eors	r1, r5
 80013e8:	2308      	movs	r3, #8
 80013ea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80013ec:	00ad      	lsls	r5, r5, #2
 80013ee:	5965      	ldr	r5, [r4, r5]
 80013f0:	41dd      	rors	r5, r3
 80013f2:	2310      	movs	r3, #16
 80013f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80013f6:	00b6      	lsls	r6, r6, #2
 80013f8:	59a6      	ldr	r6, [r4, r6]
 80013fa:	41de      	rors	r6, r3
 80013fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	58e3      	ldr	r3, [r4, r3]
 8001402:	41fb      	rors	r3, r7
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	58a2      	ldr	r2, [r4, r2]
 8001408:	4055      	eors	r5, r2
 800140a:	406e      	eors	r6, r5
 800140c:	4073      	eors	r3, r6
 800140e:	6842      	ldr	r2, [r0, #4]
 8001410:	405a      	eors	r2, r3
 8001412:	2508      	movs	r5, #8
 8001414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	58e3      	ldr	r3, [r4, r3]
 800141a:	41eb      	rors	r3, r5
 800141c:	2510      	movs	r5, #16
 800141e:	9e08      	ldr	r6, [sp, #32]
 8001420:	00b6      	lsls	r6, r6, #2
 8001422:	59a6      	ldr	r6, [r4, r6]
 8001424:	41ee      	rors	r6, r5
 8001426:	9d07      	ldr	r5, [sp, #28]
 8001428:	00ad      	lsls	r5, r5, #2
 800142a:	5965      	ldr	r5, [r4, r5]
 800142c:	41fd      	rors	r5, r7
 800142e:	9f06      	ldr	r7, [sp, #24]
 8001430:	00bf      	lsls	r7, r7, #2
 8001432:	59e7      	ldr	r7, [r4, r7]
 8001434:	407b      	eors	r3, r7
 8001436:	405e      	eors	r6, r3
 8001438:	4075      	eors	r5, r6
 800143a:	6883      	ldr	r3, [r0, #8]
 800143c:	406b      	eors	r3, r5
 800143e:	2508      	movs	r5, #8
 8001440:	9e05      	ldr	r6, [sp, #20]
 8001442:	00b6      	lsls	r6, r6, #2
 8001444:	59a6      	ldr	r6, [r4, r6]
 8001446:	41ee      	rors	r6, r5
 8001448:	9605      	str	r6, [sp, #20]
 800144a:	2610      	movs	r6, #16
 800144c:	9d04      	ldr	r5, [sp, #16]
 800144e:	00ad      	lsls	r5, r5, #2
 8001450:	5965      	ldr	r5, [r4, r5]
 8001452:	41f5      	rors	r5, r6
 8001454:	2618      	movs	r6, #24
 8001456:	9f03      	ldr	r7, [sp, #12]
 8001458:	00bf      	lsls	r7, r7, #2
 800145a:	59e7      	ldr	r7, [r4, r7]
 800145c:	41f7      	rors	r7, r6
 800145e:	9700      	str	r7, [sp, #0]
 8001460:	9e02      	ldr	r6, [sp, #8]
 8001462:	00b6      	lsls	r6, r6, #2
 8001464:	59a4      	ldr	r4, [r4, r6]
 8001466:	9e05      	ldr	r6, [sp, #20]
 8001468:	4066      	eors	r6, r4
 800146a:	4075      	eors	r5, r6
 800146c:	463e      	mov	r6, r7
 800146e:	406e      	eors	r6, r5
 8001470:	68c4      	ldr	r4, [r0, #12]
 8001472:	4074      	eors	r4, r6
 8001474:	2608      	movs	r6, #8
 8001476:	4d7b      	ldr	r5, [pc, #492]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001478:	0217      	lsls	r7, r2, #8
 800147a:	0e3f      	lsrs	r7, r7, #24
 800147c:	00bf      	lsls	r7, r7, #2
 800147e:	59ed      	ldr	r5, [r5, r7]
 8001480:	41f5      	rors	r5, r6
 8001482:	9502      	str	r5, [sp, #8]
 8001484:	2610      	movs	r6, #16
 8001486:	4d77      	ldr	r5, [pc, #476]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001488:	041f      	lsls	r7, r3, #16
 800148a:	0e3f      	lsrs	r7, r7, #24
 800148c:	00bf      	lsls	r7, r7, #2
 800148e:	59ed      	ldr	r5, [r5, r7]
 8001490:	41f5      	rors	r5, r6
 8001492:	9500      	str	r5, [sp, #0]
 8001494:	2618      	movs	r6, #24
 8001496:	4d73      	ldr	r5, [pc, #460]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001498:	0627      	lsls	r7, r4, #24
 800149a:	0dbf      	lsrs	r7, r7, #22
 800149c:	59ed      	ldr	r5, [r5, r7]
 800149e:	41f5      	rors	r5, r6
 80014a0:	4e70      	ldr	r6, [pc, #448]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014a2:	0e0f      	lsrs	r7, r1, #24
 80014a4:	00bf      	lsls	r7, r7, #2
 80014a6:	59f7      	ldr	r7, [r6, r7]
 80014a8:	9e02      	ldr	r6, [sp, #8]
 80014aa:	407e      	eors	r6, r7
 80014ac:	9f00      	ldr	r7, [sp, #0]
 80014ae:	4077      	eors	r7, r6
 80014b0:	407d      	eors	r5, r7
 80014b2:	6906      	ldr	r6, [r0, #16]
 80014b4:	406e      	eors	r6, r5
 80014b6:	9600      	str	r6, [sp, #0]
 80014b8:	2608      	movs	r6, #8
 80014ba:	4d6a      	ldr	r5, [pc, #424]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014bc:	021f      	lsls	r7, r3, #8
 80014be:	0e3f      	lsrs	r7, r7, #24
 80014c0:	00bf      	lsls	r7, r7, #2
 80014c2:	59ed      	ldr	r5, [r5, r7]
 80014c4:	41f5      	rors	r5, r6
 80014c6:	4f67      	ldr	r7, [pc, #412]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014c8:	0426      	lsls	r6, r4, #16
 80014ca:	0e36      	lsrs	r6, r6, #24
 80014cc:	00b6      	lsls	r6, r6, #2
 80014ce:	59be      	ldr	r6, [r7, r6]
 80014d0:	2710      	movs	r7, #16
 80014d2:	41fe      	rors	r6, r7
 80014d4:	9603      	str	r6, [sp, #12]
 80014d6:	4f63      	ldr	r7, [pc, #396]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014d8:	060e      	lsls	r6, r1, #24
 80014da:	0db6      	lsrs	r6, r6, #22
 80014dc:	59be      	ldr	r6, [r7, r6]
 80014de:	2718      	movs	r7, #24
 80014e0:	41fe      	rors	r6, r7
 80014e2:	9602      	str	r6, [sp, #8]
 80014e4:	4e5f      	ldr	r6, [pc, #380]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014e6:	0e17      	lsrs	r7, r2, #24
 80014e8:	00bf      	lsls	r7, r7, #2
 80014ea:	59f6      	ldr	r6, [r6, r7]
 80014ec:	4075      	eors	r5, r6
 80014ee:	9e03      	ldr	r6, [sp, #12]
 80014f0:	406e      	eors	r6, r5
 80014f2:	9f02      	ldr	r7, [sp, #8]
 80014f4:	4077      	eors	r7, r6
 80014f6:	6945      	ldr	r5, [r0, #20]
 80014f8:	407d      	eors	r5, r7
 80014fa:	4f5a      	ldr	r7, [pc, #360]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014fc:	0226      	lsls	r6, r4, #8
 80014fe:	0e36      	lsrs	r6, r6, #24
 8001500:	00b6      	lsls	r6, r6, #2
 8001502:	59be      	ldr	r6, [r7, r6]
 8001504:	2708      	movs	r7, #8
 8001506:	41fe      	rors	r6, r7
 8001508:	9604      	str	r6, [sp, #16]
 800150a:	4f56      	ldr	r7, [pc, #344]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800150c:	040e      	lsls	r6, r1, #16
 800150e:	0e36      	lsrs	r6, r6, #24
 8001510:	00b6      	lsls	r6, r6, #2
 8001512:	59be      	ldr	r6, [r7, r6]
 8001514:	2710      	movs	r7, #16
 8001516:	41fe      	rors	r6, r7
 8001518:	9603      	str	r6, [sp, #12]
 800151a:	4f52      	ldr	r7, [pc, #328]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800151c:	0616      	lsls	r6, r2, #24
 800151e:	0db6      	lsrs	r6, r6, #22
 8001520:	59be      	ldr	r6, [r7, r6]
 8001522:	2718      	movs	r7, #24
 8001524:	41fe      	rors	r6, r7
 8001526:	9602      	str	r6, [sp, #8]
 8001528:	4e4e      	ldr	r6, [pc, #312]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800152a:	0e1f      	lsrs	r7, r3, #24
 800152c:	00bf      	lsls	r7, r7, #2
 800152e:	59f6      	ldr	r6, [r6, r7]
 8001530:	9f04      	ldr	r7, [sp, #16]
 8001532:	4077      	eors	r7, r6
 8001534:	9e03      	ldr	r6, [sp, #12]
 8001536:	407e      	eors	r6, r7
 8001538:	9f02      	ldr	r7, [sp, #8]
 800153a:	4077      	eors	r7, r6
 800153c:	6986      	ldr	r6, [r0, #24]
 800153e:	407e      	eors	r6, r7
 8001540:	4f48      	ldr	r7, [pc, #288]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001542:	0209      	lsls	r1, r1, #8
 8001544:	0e09      	lsrs	r1, r1, #24
 8001546:	0089      	lsls	r1, r1, #2
 8001548:	5879      	ldr	r1, [r7, r1]
 800154a:	2708      	movs	r7, #8
 800154c:	41f9      	rors	r1, r7
 800154e:	4f45      	ldr	r7, [pc, #276]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001550:	0412      	lsls	r2, r2, #16
 8001552:	0e12      	lsrs	r2, r2, #24
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	58ba      	ldr	r2, [r7, r2]
 8001558:	2710      	movs	r7, #16
 800155a:	41fa      	rors	r2, r7
 800155c:	4f41      	ldr	r7, [pc, #260]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800155e:	061b      	lsls	r3, r3, #24
 8001560:	0d9b      	lsrs	r3, r3, #22
 8001562:	58fb      	ldr	r3, [r7, r3]
 8001564:	2718      	movs	r7, #24
 8001566:	41fb      	rors	r3, r7
 8001568:	4f3e      	ldr	r7, [pc, #248]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800156a:	0e24      	lsrs	r4, r4, #24
 800156c:	00a4      	lsls	r4, r4, #2
 800156e:	593c      	ldr	r4, [r7, r4]
 8001570:	4061      	eors	r1, r4
 8001572:	404a      	eors	r2, r1
 8001574:	4053      	eors	r3, r2
 8001576:	69c4      	ldr	r4, [r0, #28]
 8001578:	405c      	eors	r4, r3
 800157a:	3020      	adds	r0, #32
 800157c:	9901      	ldr	r1, [sp, #4]
 800157e:	1e49      	subs	r1, r1, #1
 8001580:	9101      	str	r1, [sp, #4]
 8001582:	0e21      	lsrs	r1, r4, #24
 8001584:	9102      	str	r1, [sp, #8]
 8001586:	0429      	lsls	r1, r5, #16
 8001588:	0e09      	lsrs	r1, r1, #24
 800158a:	9104      	str	r1, [sp, #16]
 800158c:	9900      	ldr	r1, [sp, #0]
 800158e:	0209      	lsls	r1, r1, #8
 8001590:	0e09      	lsrs	r1, r1, #24
 8001592:	9105      	str	r1, [sp, #20]
 8001594:	0e31      	lsrs	r1, r6, #24
 8001596:	9106      	str	r1, [sp, #24]
 8001598:	9900      	ldr	r1, [sp, #0]
 800159a:	0409      	lsls	r1, r1, #16
 800159c:	0e09      	lsrs	r1, r1, #24
 800159e:	9108      	str	r1, [sp, #32]
 80015a0:	0221      	lsls	r1, r4, #8
 80015a2:	0e09      	lsrs	r1, r1, #24
 80015a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80015a6:	0e2a      	lsrs	r2, r5, #24
 80015a8:	0421      	lsls	r1, r4, #16
 80015aa:	0e09      	lsrs	r1, r1, #24
 80015ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80015ae:	0231      	lsls	r1, r6, #8
 80015b0:	0e09      	lsrs	r1, r1, #24
 80015b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80015b4:	9900      	ldr	r1, [sp, #0]
 80015b6:	0e09      	lsrs	r1, r1, #24
 80015b8:	0433      	lsls	r3, r6, #16
 80015ba:	0e1b      	lsrs	r3, r3, #24
 80015bc:	022f      	lsls	r7, r5, #8
 80015be:	0e3f      	lsrs	r7, r7, #24
 80015c0:	b2f6      	uxtb	r6, r6
 80015c2:	9603      	str	r6, [sp, #12]
 80015c4:	b2ed      	uxtb	r5, r5
 80015c6:	9507      	str	r5, [sp, #28]
 80015c8:	9d00      	ldr	r5, [sp, #0]
 80015ca:	b2ed      	uxtb	r5, r5
 80015cc:	950a      	str	r5, [sp, #40]	@ 0x28
 80015ce:	b2e5      	uxtb	r5, r4
 80015d0:	9c01      	ldr	r4, [sp, #4]
 80015d2:	2c00      	cmp	r4, #0
 80015d4:	d000      	beq.n	80015d8 <cmox_aesFast_encrypt+0x248>
 80015d6:	e6f3      	b.n	80013c0 <cmox_aesFast_encrypt+0x30>
 80015d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80015da:	4e23      	ldr	r6, [pc, #140]	@ (8001668 <cmox_aesFast_encrypt+0x2d8>)
 80015dc:	5c71      	ldrb	r1, [r6, r1]
 80015de:	0609      	lsls	r1, r1, #24
 80015e0:	468c      	mov	ip, r1
 80015e2:	5df1      	ldrb	r1, [r6, r7]
 80015e4:	0409      	lsls	r1, r1, #16
 80015e6:	4667      	mov	r7, ip
 80015e8:	4339      	orrs	r1, r7
 80015ea:	5cf3      	ldrb	r3, [r6, r3]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	430b      	orrs	r3, r1
 80015f0:	5d71      	ldrb	r1, [r6, r5]
 80015f2:	4319      	orrs	r1, r3
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	404b      	eors	r3, r1
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	5cb1      	ldrb	r1, [r6, r2]
 80015fc:	0609      	lsls	r1, r1, #24
 80015fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001600:	5cb2      	ldrb	r2, [r6, r2]
 8001602:	0412      	lsls	r2, r2, #16
 8001604:	430a      	orrs	r2, r1
 8001606:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001608:	5c71      	ldrb	r1, [r6, r1]
 800160a:	0209      	lsls	r1, r1, #8
 800160c:	4311      	orrs	r1, r2
 800160e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001610:	5cb2      	ldrb	r2, [r6, r2]
 8001612:	430a      	orrs	r2, r1
 8001614:	6841      	ldr	r1, [r0, #4]
 8001616:	4051      	eors	r1, r2
 8001618:	6061      	str	r1, [r4, #4]
 800161a:	9906      	ldr	r1, [sp, #24]
 800161c:	5c71      	ldrb	r1, [r6, r1]
 800161e:	0609      	lsls	r1, r1, #24
 8001620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001622:	5cb2      	ldrb	r2, [r6, r2]
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	430a      	orrs	r2, r1
 8001628:	9908      	ldr	r1, [sp, #32]
 800162a:	5c71      	ldrb	r1, [r6, r1]
 800162c:	0209      	lsls	r1, r1, #8
 800162e:	4311      	orrs	r1, r2
 8001630:	9a07      	ldr	r2, [sp, #28]
 8001632:	5cb2      	ldrb	r2, [r6, r2]
 8001634:	430a      	orrs	r2, r1
 8001636:	6881      	ldr	r1, [r0, #8]
 8001638:	4051      	eors	r1, r2
 800163a:	60a1      	str	r1, [r4, #8]
 800163c:	9902      	ldr	r1, [sp, #8]
 800163e:	5c71      	ldrb	r1, [r6, r1]
 8001640:	0609      	lsls	r1, r1, #24
 8001642:	9a05      	ldr	r2, [sp, #20]
 8001644:	5cb2      	ldrb	r2, [r6, r2]
 8001646:	0412      	lsls	r2, r2, #16
 8001648:	430a      	orrs	r2, r1
 800164a:	9904      	ldr	r1, [sp, #16]
 800164c:	5c71      	ldrb	r1, [r6, r1]
 800164e:	0209      	lsls	r1, r1, #8
 8001650:	4311      	orrs	r1, r2
 8001652:	9a03      	ldr	r2, [sp, #12]
 8001654:	5cb2      	ldrb	r2, [r6, r2]
 8001656:	430a      	orrs	r2, r1
 8001658:	68c0      	ldr	r0, [r0, #12]
 800165a:	4050      	eors	r0, r2
 800165c:	60e0      	str	r0, [r4, #12]
 800165e:	b00e      	add	sp, #56	@ 0x38
 8001660:	bcf0      	pop	{r4, r5, r6, r7}
 8001662:	4770      	bx	lr
 8001664:	08008cc8 	.word	0x08008cc8
 8001668:	080090c8 	.word	0x080090c8

0800166c <cmox_aesSmall_keySchedule>:
 800166c:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 800166e:	0013      	movs	r3, r2
 8001670:	2600      	movs	r6, #0
 8001672:	2200      	movs	r2, #0
 8001674:	089c      	lsrs	r4, r3, #2
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <cmox_aesSmall_keySchedule+0x110>)
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	0005      	movs	r5, r0
 800167c:	350c      	adds	r5, #12
 800167e:	000b      	movs	r3, r1
 8001680:	0020      	movs	r0, r4
 8001682:	0029      	movs	r1, r5
 8001684:	e00e      	b.n	80016a4 <cmox_aesSmall_keySchedule+0x38>
 8001686:	00b4      	lsls	r4, r6, #2
 8001688:	191c      	adds	r4, r3, r4
 800168a:	7825      	ldrb	r5, [r4, #0]
 800168c:	062f      	lsls	r7, r5, #24
 800168e:	7865      	ldrb	r5, [r4, #1]
 8001690:	042d      	lsls	r5, r5, #16
 8001692:	433d      	orrs	r5, r7
 8001694:	78a7      	ldrb	r7, [r4, #2]
 8001696:	023f      	lsls	r7, r7, #8
 8001698:	432f      	orrs	r7, r5
 800169a:	78e4      	ldrb	r4, [r4, #3]
 800169c:	433c      	orrs	r4, r7
 800169e:	00b5      	lsls	r5, r6, #2
 80016a0:	514c      	str	r4, [r1, r5]
 80016a2:	1c76      	adds	r6, r6, #1
 80016a4:	4286      	cmp	r6, r0
 80016a6:	d3ee      	bcc.n	8001686 <cmox_aesSmall_keySchedule+0x1a>
 80016a8:	0083      	lsls	r3, r0, #2
 80016aa:	18cb      	adds	r3, r1, r3
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	1f1b      	subs	r3, r3, #4
 80016b0:	681d      	ldr	r5, [r3, #0]
 80016b2:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <cmox_aesSmall_keySchedule+0x114>)
 80016b4:	680e      	ldr	r6, [r1, #0]
 80016b6:	022c      	lsls	r4, r5, #8
 80016b8:	0e24      	lsrs	r4, r4, #24
 80016ba:	5d1c      	ldrb	r4, [r3, r4]
 80016bc:	0624      	lsls	r4, r4, #24
 80016be:	042f      	lsls	r7, r5, #16
 80016c0:	0e3f      	lsrs	r7, r7, #24
 80016c2:	5ddf      	ldrb	r7, [r3, r7]
 80016c4:	043f      	lsls	r7, r7, #16
 80016c6:	4327      	orrs	r7, r4
 80016c8:	b2ec      	uxtb	r4, r5
 80016ca:	5d1c      	ldrb	r4, [r3, r4]
 80016cc:	0224      	lsls	r4, r4, #8
 80016ce:	433c      	orrs	r4, r7
 80016d0:	0e2d      	lsrs	r5, r5, #24
 80016d2:	5d5d      	ldrb	r5, [r3, r5]
 80016d4:	4325      	orrs	r5, r4
 80016d6:	4075      	eors	r5, r6
 80016d8:	4c2a      	ldr	r4, [pc, #168]	@ (8001784 <cmox_aesSmall_keySchedule+0x118>)
 80016da:	0096      	lsls	r6, r2, #2
 80016dc:	59a4      	ldr	r4, [r4, r6]
 80016de:	406c      	eors	r4, r5
 80016e0:	9d00      	ldr	r5, [sp, #0]
 80016e2:	602c      	str	r4, [r5, #0]
 80016e4:	1c52      	adds	r2, r2, #1
 80016e6:	2401      	movs	r4, #1
 80016e8:	1905      	adds	r5, r0, r4
 80016ea:	00ad      	lsls	r5, r5, #2
 80016ec:	1f0e      	subs	r6, r1, #4
 80016ee:	5976      	ldr	r6, [r6, r5]
 80016f0:	00a7      	lsls	r7, r4, #2
 80016f2:	59cf      	ldr	r7, [r1, r7]
 80016f4:	4077      	eors	r7, r6
 80016f6:	514f      	str	r7, [r1, r5]
 80016f8:	1c64      	adds	r4, r4, #1
 80016fa:	2c04      	cmp	r4, #4
 80016fc:	d3f4      	bcc.n	80016e8 <cmox_aesSmall_keySchedule+0x7c>
 80016fe:	2804      	cmp	r0, #4
 8001700:	d004      	beq.n	800170c <cmox_aesSmall_keySchedule+0xa0>
 8001702:	2806      	cmp	r0, #6
 8001704:	d00c      	beq.n	8001720 <cmox_aesSmall_keySchedule+0xb4>
 8001706:	2808      	cmp	r0, #8
 8001708:	d014      	beq.n	8001734 <cmox_aesSmall_keySchedule+0xc8>
 800170a:	e034      	b.n	8001776 <cmox_aesSmall_keySchedule+0x10a>
 800170c:	2a0a      	cmp	r2, #10
 800170e:	d206      	bcs.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 8001710:	9901      	ldr	r1, [sp, #4]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	4299      	cmp	r1, r3
 8001718:	d001      	beq.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 800171a:	9900      	ldr	r1, [sp, #0]
 800171c:	e7c4      	b.n	80016a8 <cmox_aesSmall_keySchedule+0x3c>
 800171e:	bdf3      	pop	{r0, r1, r4, r5, r6, r7, pc}
 8001720:	2a07      	cmp	r2, #7
 8001722:	d8fc      	bhi.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 8001724:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8001726:	690b      	ldr	r3, [r1, #16]
 8001728:	406b      	eors	r3, r5
 800172a:	628b      	str	r3, [r1, #40]	@ 0x28
 800172c:	694e      	ldr	r6, [r1, #20]
 800172e:	405e      	eors	r6, r3
 8001730:	62ce      	str	r6, [r1, #44]	@ 0x2c
 8001732:	e7ed      	b.n	8001710 <cmox_aesSmall_keySchedule+0xa4>
 8001734:	2a07      	cmp	r2, #7
 8001736:	d2f2      	bcs.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 8001738:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800173a:	690e      	ldr	r6, [r1, #16]
 800173c:	0e2c      	lsrs	r4, r5, #24
 800173e:	5d1c      	ldrb	r4, [r3, r4]
 8001740:	0627      	lsls	r7, r4, #24
 8001742:	022c      	lsls	r4, r5, #8
 8001744:	0e24      	lsrs	r4, r4, #24
 8001746:	5d1c      	ldrb	r4, [r3, r4]
 8001748:	0424      	lsls	r4, r4, #16
 800174a:	433c      	orrs	r4, r7
 800174c:	042f      	lsls	r7, r5, #16
 800174e:	0e3f      	lsrs	r7, r7, #24
 8001750:	5ddf      	ldrb	r7, [r3, r7]
 8001752:	023f      	lsls	r7, r7, #8
 8001754:	4327      	orrs	r7, r4
 8001756:	b2ed      	uxtb	r5, r5
 8001758:	5d5b      	ldrb	r3, [r3, r5]
 800175a:	433b      	orrs	r3, r7
 800175c:	4073      	eors	r3, r6
 800175e:	630b      	str	r3, [r1, #48]	@ 0x30
 8001760:	2305      	movs	r3, #5
 8001762:	009c      	lsls	r4, r3, #2
 8001764:	190c      	adds	r4, r1, r4
 8001766:	69e5      	ldr	r5, [r4, #28]
 8001768:	6826      	ldr	r6, [r4, #0]
 800176a:	406e      	eors	r6, r5
 800176c:	6226      	str	r6, [r4, #32]
 800176e:	1c5b      	adds	r3, r3, #1
 8001770:	2b07      	cmp	r3, #7
 8001772:	d8cd      	bhi.n	8001710 <cmox_aesSmall_keySchedule+0xa4>
 8001774:	e7f5      	b.n	8001762 <cmox_aesSmall_keySchedule+0xf6>
 8001776:	4904      	ldr	r1, [pc, #16]	@ (8001788 <cmox_aesSmall_keySchedule+0x11c>)
 8001778:	9101      	str	r1, [sp, #4]
 800177a:	e7ce      	b.n	800171a <cmox_aesSmall_keySchedule+0xae>
 800177c:	00010004 	.word	0x00010004
 8001780:	080090c8 	.word	0x080090c8
 8001784:	08008a4c 	.word	0x08008a4c
 8001788:	00010001 	.word	0x00010001

0800178c <strcmp>:
 800178c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001794:	2a01      	cmp	r2, #1
 8001796:	bf28      	it	cs
 8001798:	429a      	cmpcs	r2, r3
 800179a:	d0f7      	beq.n	800178c <strcmp>
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	4770      	bx	lr

080017a0 <strlen>:
 80017a0:	4603      	mov	r3, r0
 80017a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d1fb      	bne.n	80017a2 <strlen+0x2>
 80017aa:	1a18      	subs	r0, r3, r0
 80017ac:	3801      	subs	r0, #1
 80017ae:	4770      	bx	lr

080017b0 <__udivsi3>:
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d002      	beq.n	80017ba <__udivsi3+0xa>
 80017b4:	fbb0 f0f1 	udiv	r0, r0, r1
 80017b8:	4770      	bx	lr
 80017ba:	b108      	cbz	r0, 80017c0 <__udivsi3+0x10>
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 b808 	b.w	80017d4 <__aeabi_idiv0>

080017c4 <__aeabi_uidivmod>:
 80017c4:	2900      	cmp	r1, #0
 80017c6:	d0f8      	beq.n	80017ba <__udivsi3+0xa>
 80017c8:	4602      	mov	r2, r0
 80017ca:	fbb0 f0f1 	udiv	r0, r0, r1
 80017ce:	fb00 2111 	mls	r1, r0, r1, r2
 80017d2:	4770      	bx	lr

080017d4 <__aeabi_idiv0>:
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  //__HAL_RCC_CRC_RELEASE_RESET();
  __HAL_RCC_CRC_CLK_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <cmox_ll_init+0x2c>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <cmox_ll_init+0x2c>)
 80017e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ea:	6153      	str	r3, [r2, #20]
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <cmox_ll_init+0x2c>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000

08001808 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001810:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001814:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001820:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001824:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001828:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001830:	e000      	b.n	8001834 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001832:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001834:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f9      	beq.n	8001832 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800183e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f000 fcdd 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f86f 	bl	8001940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 f8d9 	bl	8001a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001866:	f000 f8ad 	bl	80019c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t*)"Startttttttttt\n", (uint16_t)15, 100);
 800186a:	2364      	movs	r3, #100	@ 0x64
 800186c:	220f      	movs	r2, #15
 800186e:	4923      	ldr	r1, [pc, #140]	@ (80018fc <main+0xa8>)
 8001870:	4823      	ldr	r0, [pc, #140]	@ (8001900 <main+0xac>)
 8001872:	f001 ff21 	bl	80036b8 <HAL_UART_Transmit>

  cmox_init_arg_t init_target = {CMOX_INIT_TARGET_AUTO, NULL};
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]

  /* Initialize cryptographic library */
  if (cmox_initialize(&init_target) != CMOX_INIT_SUCCESS)
 800187e:	463b      	mov	r3, r7
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fd71 	bl	8001368 <cmox_initialize>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <main+0x3c>
  {
    Error_Handler();
 800188c:	f000 fb36 	bl	8001efc <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001890:	f002 fdb2 	bl	80043f8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of requestSeedBinarySem */
  requestSeedBinarySemHandle = osSemaphoreNew(1, 0, &requestSeedBinarySem_attributes);
 8001894:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <main+0xb0>)
 8001896:	2100      	movs	r1, #0
 8001898:	2001      	movs	r0, #1
 800189a:	f002 fe87 	bl	80045ac <osSemaphoreNew>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a19      	ldr	r2, [pc, #100]	@ (8001908 <main+0xb4>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* creation of sendKeyBinarySem */
  sendKeyBinarySemHandle = osSemaphoreNew(1, 0, &sendKeyBinarySem_attributes);
 80018a4:	4a19      	ldr	r2, [pc, #100]	@ (800190c <main+0xb8>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	2001      	movs	r0, #1
 80018aa:	f002 fe7f 	bl	80045ac <osSemaphoreNew>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <main+0xbc>)
 80018b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of outputQueue */
  outputQueueHandle = osMessageQueueNew (2, 33, &outputQueue_attributes);
 80018b4:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <main+0xc0>)
 80018b6:	2121      	movs	r1, #33	@ 0x21
 80018b8:	2002      	movs	r0, #2
 80018ba:	f002 ff97 	bl	80047ec <osMessageQueueNew>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <main+0xc4>)
 80018c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of serialTask */
  serialTaskHandle = osThreadNew(SerialTask, NULL, &serialTask_attributes);
 80018c4:	4a15      	ldr	r2, [pc, #84]	@ (800191c <main+0xc8>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4815      	ldr	r0, [pc, #84]	@ (8001920 <main+0xcc>)
 80018ca:	f002 fddd 	bl	8004488 <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <main+0xd0>)
 80018d2:	6013      	str	r3, [r2, #0]

  /* creation of requestSeedTask */
  requestSeedTaskHandle = osThreadNew(RequestSeedTask, NULL, &requestSeedTask_attributes);
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <main+0xd4>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4814      	ldr	r0, [pc, #80]	@ (800192c <main+0xd8>)
 80018da:	f002 fdd5 	bl	8004488 <osThreadNew>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a13      	ldr	r2, [pc, #76]	@ (8001930 <main+0xdc>)
 80018e2:	6013      	str	r3, [r2, #0]

  /* creation of compareKeyTask */
  compareKeyTaskHandle = osThreadNew(CompareKeyTask, NULL, &compareKeyTask_attributes);
 80018e4:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <main+0xe0>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4813      	ldr	r0, [pc, #76]	@ (8001938 <main+0xe4>)
 80018ea:	f002 fdcd 	bl	8004488 <osThreadNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a12      	ldr	r2, [pc, #72]	@ (800193c <main+0xe8>)
 80018f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018f4:	f002 fda2 	bl	800443c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <main+0xa4>
 80018fc:	08008794 	.word	0x08008794
 8001900:	200000e0 	.word	0x200000e0
 8001904:	08008af8 	.word	0x08008af8
 8001908:	20000138 	.word	0x20000138
 800190c:	08008b08 	.word	0x08008b08
 8001910:	2000013c 	.word	0x2000013c
 8001914:	08008ae0 	.word	0x08008ae0
 8001918:	20000134 	.word	0x20000134
 800191c:	08008a74 	.word	0x08008a74
 8001920:	08001b69 	.word	0x08001b69
 8001924:	20000128 	.word	0x20000128
 8001928:	08008a98 	.word	0x08008a98
 800192c:	08001cb9 	.word	0x08001cb9
 8001930:	2000012c 	.word	0x2000012c
 8001934:	08008abc 	.word	0x08008abc
 8001938:	08001df1 	.word	0x08001df1
 800193c:	20000130 	.word	0x20000130

08001940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b090      	sub	sp, #64	@ 0x40
 8001944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	2228      	movs	r2, #40	@ 0x28
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f006 f9c4 	bl	8007cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001966:	2301      	movs	r3, #1
 8001968:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196a:	2310      	movs	r3, #16
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196e:	2302      	movs	r3, #2
 8001970:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001976:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4618      	mov	r0, r3
 8001982:	f000 ffcb 	bl	800291c <HAL_RCC_OscConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800198c:	f000 fab6 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001990:	230f      	movs	r3, #15
 8001992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001994:	2302      	movs	r3, #2
 8001996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800199c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2102      	movs	r1, #2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 fa38 	bl	8002e20 <HAL_RCC_ClockConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80019b6:	f000 faa1 	bl	8001efc <Error_Handler>
  }
}
 80019ba:	bf00      	nop
 80019bc:	3740      	adds	r7, #64	@ 0x40
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <MX_USART2_UART_Init+0x50>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_USART2_UART_Init+0x4c>)
 80019fc:	f001 fe0c 	bl	8003618 <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a06:	f000 fa79 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000e0 	.word	0x200000e0
 8001a14:	40004400 	.word	0x40004400

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a26      	ldr	r2, [pc, #152]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <MX_GPIO_Init+0xcc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2120      	movs	r1, #32
 8001a90:	4815      	ldr	r0, [pc, #84]	@ (8001ae8 <MX_GPIO_Init+0xd0>)
 8001a92:	f000 ff09 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <MX_GPIO_Init+0xd4>)
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <MX_GPIO_Init+0xd8>)
 8001aac:	f000 fd78 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <MX_GPIO_Init+0xd0>)
 8001ac8:	f000 fd6a 	bl	80025a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2105      	movs	r1, #5
 8001ad0:	2028      	movs	r0, #40	@ 0x28
 8001ad2:	f000 fc88 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ad6:	2028      	movs	r0, #40	@ 0x28
 8001ad8:	f000 fca1 	bl	800241e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	10110000 	.word	0x10110000
 8001af0:	40011000 	.word	0x40011000

08001af4 <HandleInputKey>:

/* USER CODE BEGIN 4 */
void HandleInputKey(char* inputKey, uint8_t len) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
	uint8_t convertedValue;
	char hex[3];
	hex[2] = '\0'; // add null character...
 8001b04:	2300      	movs	r3, #0
 8001b06:	72bb      	strb	r3, [r7, #10]

	memset(InputCiphertext, 0, sizeof(uint8_t)*LENGTH_OF_SEED_KEY);
 8001b08:	2210      	movs	r2, #16
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4815      	ldr	r0, [pc, #84]	@ (8001b64 <HandleInputKey+0x70>)
 8001b0e:	f006 f8e5 	bl	8007cdc <memset>

	for (i=0; i<len; i+=2) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e01b      	b.n	8001b50 <HandleInputKey+0x5c>
		(void)strncpy(hex, &inputKey[i], 2);
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	18d1      	adds	r1, r2, r3
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	2202      	movs	r2, #2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f006 f8f3 	bl	8007d10 <strncpy>
		convertedValue = (uint8_t)strtoul(hex, NULL, 16);
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2210      	movs	r2, #16
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f006 f896 	bl	8007c64 <strtoul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73bb      	strb	r3, [r7, #14]
		InputCiphertext[i/2] = convertedValue;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HandleInputKey+0x70>)
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	5453      	strb	r3, [r2, r1]
	for (i=0; i<len; i+=2) {
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3df      	bcc.n	8001b18 <HandleInputKey+0x24>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c

08001b68 <SerialTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SerialTask */
void SerialTask(void *argument)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	@ 0x38
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char c;
	size_t idx = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
	memset(inputMsg, 0, sizeof(char)*40); //reset buffer
 8001b74:	2228      	movs	r2, #40	@ 0x28
 8001b76:	2100      	movs	r1, #0
 8001b78:	4846      	ldr	r0, [pc, #280]	@ (8001c94 <SerialTask+0x12c>)
 8001b7a:	f006 f8af 	bl	8007cdc <memset>
	osStatus_t resultGetFromQ;

  /* Infinite loop */
  for(;;)
  {
	  if (HAL_UART_Receive(&huart2, (uint8_t*)&c, (uint16_t)1, 10) == HAL_OK) { //handle for input
 8001b7e:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8001b82:	230a      	movs	r3, #10
 8001b84:	2201      	movs	r2, #1
 8001b86:	4844      	ldr	r0, [pc, #272]	@ (8001c98 <SerialTask+0x130>)
 8001b88:	f001 fe21 	bl	80037ce <HAL_UART_Receive>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d14f      	bne.n	8001c32 <SerialTask+0xca>
		  if ((c == '\n') || (c == '\r')) {
 8001b92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d003      	beq.n	8001ba2 <SerialTask+0x3a>
 8001b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b9e:	2b0d      	cmp	r3, #13
 8001ba0:	d140      	bne.n	8001c24 <SerialTask+0xbc>
			  if (strcmp(inputMsg, requestSeed) == 0) {
 8001ba2:	493e      	ldr	r1, [pc, #248]	@ (8001c9c <SerialTask+0x134>)
 8001ba4:	483b      	ldr	r0, [pc, #236]	@ (8001c94 <SerialTask+0x12c>)
 8001ba6:	f7ff fdf1 	bl	800178c <strcmp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <SerialTask+0x54>
				  osSemaphoreRelease(requestSeedBinarySemHandle);
 8001bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <SerialTask+0x138>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fdd5 	bl	8004764 <osSemaphoreRelease>
 8001bba:	e02b      	b.n	8001c14 <SerialTask+0xac>
			  }
			  else if (strncmp(inputMsg, sendKey, 3) == 0) {
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	4939      	ldr	r1, [pc, #228]	@ (8001ca4 <SerialTask+0x13c>)
 8001bc0:	4834      	ldr	r0, [pc, #208]	@ (8001c94 <SerialTask+0x12c>)
 8001bc2:	f006 f893 	bl	8007cec <strncmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10e      	bne.n	8001bea <SerialTask+0x82>
				  HandleInputKey(&inputMsg[3], (uint8_t)strlen(&inputMsg[3]));
 8001bcc:	4836      	ldr	r0, [pc, #216]	@ (8001ca8 <SerialTask+0x140>)
 8001bce:	f7ff fde7 	bl	80017a0 <strlen>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4833      	ldr	r0, [pc, #204]	@ (8001ca8 <SerialTask+0x140>)
 8001bda:	f7ff ff8b 	bl	8001af4 <HandleInputKey>
				  osSemaphoreRelease(sendKeyBinarySemHandle);
 8001bde:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <SerialTask+0x144>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fdbe 	bl	8004764 <osSemaphoreRelease>
 8001be8:	e014      	b.n	8001c14 <SerialTask+0xac>
			  }
			  else {
				  inputMsg[idx++] = '\n';
 8001bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bf0:	4a28      	ldr	r2, [pc, #160]	@ (8001c94 <SerialTask+0x12c>)
 8001bf2:	210a      	movs	r1, #10
 8001bf4:	54d1      	strb	r1, [r2, r3]
				  inputMsg[idx] = '\r';
 8001bf6:	4a27      	ldr	r2, [pc, #156]	@ (8001c94 <SerialTask+0x12c>)
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfa:	4413      	add	r3, r2
 8001bfc:	220d      	movs	r2, #13
 8001bfe:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, (uint8_t*)inputMsg, (uint16_t)strlen(inputMsg), 10);
 8001c00:	4824      	ldr	r0, [pc, #144]	@ (8001c94 <SerialTask+0x12c>)
 8001c02:	f7ff fdcd 	bl	80017a0 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	4921      	ldr	r1, [pc, #132]	@ (8001c94 <SerialTask+0x12c>)
 8001c0e:	4822      	ldr	r0, [pc, #136]	@ (8001c98 <SerialTask+0x130>)
 8001c10:	f001 fd52 	bl	80036b8 <HAL_UART_Transmit>
			  }
			  idx = 0; //reset idx
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	@ 0x34
			  memset(inputMsg, 0, sizeof(char)*40); //reset buffer
 8001c18:	2228      	movs	r2, #40	@ 0x28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	481d      	ldr	r0, [pc, #116]	@ (8001c94 <SerialTask+0x12c>)
 8001c1e:	f006 f85d 	bl	8007cdc <memset>
 8001c22:	e006      	b.n	8001c32 <SerialTask+0xca>
		  }
		  else {
			  inputMsg[idx++] = c;
 8001c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c2a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001c2e:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <SerialTask+0x12c>)
 8001c30:	54d1      	strb	r1, [r2, r3]
		  }
	  }
	  //handle for output
	  if (osMessageQueueGetCount(outputQueueHandle) > 0)
 8001c32:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <SerialTask+0x148>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ff0a 	bl	8004a50 <osMessageQueueGetCount>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d09d      	beq.n	8001b7e <SerialTask+0x16>
	  {
		  resultGetFromQ = osMessageQueueGet(outputQueueHandle, &msg[0], NULL, 0);
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <SerialTask+0x148>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	f107 010c 	add.w	r1, r7, #12
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f002 fea1 	bl	8004994 <osMessageQueueGet>
 8001c52:	6338      	str	r0, [r7, #48]	@ 0x30
		  if (resultGetFromQ == osOK) {
 8001c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d113      	bne.n	8001c82 <SerialTask+0x11a>
			  HAL_UART_Transmit(&huart2, (uint8_t*)&msg[0], (uint16_t)strlen(msg), 10);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fd9e 	bl	80017a0 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	f107 010c 	add.w	r1, r7, #12
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	480a      	ldr	r0, [pc, #40]	@ (8001c98 <SerialTask+0x130>)
 8001c70:	f001 fd22 	bl	80036b8 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 10);
 8001c74:	230a      	movs	r3, #10
 8001c76:	2201      	movs	r2, #1
 8001c78:	490e      	ldr	r1, [pc, #56]	@ (8001cb4 <SerialTask+0x14c>)
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <SerialTask+0x130>)
 8001c7c:	f001 fd1c 	bl	80036b8 <HAL_UART_Transmit>
 8001c80:	e77d      	b.n	8001b7e <SerialTask+0x16>
		  } else {
			  ITM_SendChar(resultGetFromQ+6+48);
 8001c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c84:	3336      	adds	r3, #54	@ 0x36
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fdbe 	bl	8001808 <ITM_SendChar>
			  ITM_SendChar('\n');
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f7ff fdbb 	bl	8001808 <ITM_SendChar>
	  if (HAL_UART_Receive(&huart2, (uint8_t*)&c, (uint16_t)1, 10) == HAL_OK) { //handle for input
 8001c92:	e774      	b.n	8001b7e <SerialTask+0x16>
 8001c94:	20000140 	.word	0x20000140
 8001c98:	200000e0 	.word	0x200000e0
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000138 	.word	0x20000138
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000143 	.word	0x20000143
 8001cac:	2000013c 	.word	0x2000013c
 8001cb0:	20000134 	.word	0x20000134
 8001cb4:	080087a4 	.word	0x080087a4

08001cb8 <RequestSeedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RequestSeedTask */
void RequestSeedTask(void *argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b092      	sub	sp, #72	@ 0x48
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RequestSeedTask */

	cmox_drbg_retval_t retval;
	/* General DRBG context */
	cmox_drbg_handle_t *drgb_ctx;
	size_t i = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
	char msg[33];

	/* Infinite loop */
	for(;;)
	{
		if (osSemaphoreAcquire(requestSeedBinarySemHandle, osWaitForever) == osOK) {
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc4 <RequestSeedTask+0x10c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fcf7 	bl	80046c0 <osSemaphoreAcquire>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f5      	bne.n	8001cc4 <RequestSeedTask+0xc>
		  /* Construct a drbg context that is configured to perform ctrDRBG with AES256 operations */
		  drgb_ctx = cmox_ctr_drbg_construct(&Drbg_Ctx, CMOX_CTR_DRBG_AES256);
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <RequestSeedTask+0x110>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	483b      	ldr	r0, [pc, #236]	@ (8001dcc <RequestSeedTask+0x114>)
 8001ce0:	f7ff faba 	bl	8001258 <cmox_ctr_drbg_construct>
 8001ce4:	6338      	str	r0, [r7, #48]	@ 0x30
		  if (drgb_ctx == NULL)
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <RequestSeedTask+0x38>
		  {
			  Error_Handler();
 8001cec:	f000 f906 	bl	8001efc <Error_Handler>
		  }

		  /* Initialize the DRBG context with entropy, nonce and personalization string parameters */
		  Entropy[0] = (uint8_t)HAL_GetTick();
 8001cf0:	f000 faba 	bl	8002268 <HAL_GetTick>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b35      	ldr	r3, [pc, #212]	@ (8001dd0 <RequestSeedTask+0x118>)
 8001cfa:	701a      	strb	r2, [r3, #0]
		  retval = cmox_drbg_init(drgb_ctx,                                     /* DRBG context */
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <RequestSeedTask+0x11c>)
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	2320      	movs	r3, #32
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	4b33      	ldr	r3, [pc, #204]	@ (8001dd8 <RequestSeedTask+0x120>)
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	4930      	ldr	r1, [pc, #192]	@ (8001dd0 <RequestSeedTask+0x118>)
 8001d0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d10:	f7ff fad6 	bl	80012c0 <cmox_drbg_init>
 8001d14:	62f8      	str	r0, [r7, #44]	@ 0x2c
								Entropy, sizeof(Entropy),                     /* Entropy data */
								Personalization, sizeof(Personalization),     /* Personalization string */
								Nonce, sizeof(Nonce));                        /* Nonce data */

		  if (retval != CMOX_DRBG_SUCCESS)
 8001d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d1c:	d001      	beq.n	8001d22 <RequestSeedTask+0x6a>
		  {
			  Error_Handler();
 8001d1e:	f000 f8ed 	bl	8001efc <Error_Handler>
		  }

		  /* Reseed the DRBG with reseed parameters */
		  EntropyInputReseed[0] = (uint8_t)HAL_GetTick();
 8001d22:	f000 faa1 	bl	8002268 <HAL_GetTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <RequestSeedTask+0x124>)
 8001d2c:	701a      	strb	r2, [r3, #0]
		  retval = cmox_drbg_reseed(drgb_ctx,                                           /* DRBG context */
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	2220      	movs	r2, #32
 8001d36:	4929      	ldr	r1, [pc, #164]	@ (8001ddc <RequestSeedTask+0x124>)
 8001d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d3a:	f7ff fae3 	bl	8001304 <cmox_drbg_reseed>
 8001d3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
									EntropyInputReseed, sizeof(EntropyInputReseed),     /* Entropy reseed data */
									NULL, 0);

		  /* Generate 1st random data */
		  memset(ComputedRandom, 0, sizeof(uint8_t)*LENGTH_OF_SEED_KEY);
 8001d40:	2210      	movs	r2, #16
 8001d42:	2100      	movs	r1, #0
 8001d44:	4826      	ldr	r0, [pc, #152]	@ (8001de0 <RequestSeedTask+0x128>)
 8001d46:	f005 ffc9 	bl	8007cdc <memset>
		  retval = cmox_drbg_generate(drgb_ctx,                             /* DRBG context */
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <RequestSeedTask+0x128>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d56:	f7ff faed 	bl	8001334 <cmox_drbg_generate>
 8001d5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
									NULL, 0,                                /* No additional data */
									ComputedRandom, LENGTH_OF_SEED_KEY-1);  /* Data buffer to receive generated random */

		  /* Verify API returned value */
		  if (retval != CMOX_DRBG_SUCCESS)
 8001d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d62:	d001      	beq.n	8001d68 <RequestSeedTask+0xb0>
		  {
			  Error_Handler();
 8001d64:	f000 f8ca 	bl	8001efc <Error_Handler>
		  }

		  /* Cleanup the context */
		  retval = cmox_drbg_cleanup(drgb_ctx);
 8001d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d6a:	f7ff fa97 	bl	800129c <cmox_drbg_cleanup>
 8001d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if (retval != CMOX_DRBG_SUCCESS)
 8001d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d76:	d001      	beq.n	8001d7c <RequestSeedTask+0xc4>
		  {
			  Error_Handler();
 8001d78:	f000 f8c0 	bl	8001efc <Error_Handler>
		  }

		  for (i=0; i<LENGTH_OF_SEED_KEY-1; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d80:	e00f      	b.n	8001da2 <RequestSeedTask+0xea>
			  (void)sprintf(&msg[2*i], "%02X", ComputedRandom[i]);
 8001d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	18d0      	adds	r0, r2, r3
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <RequestSeedTask+0x128>)
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4913      	ldr	r1, [pc, #76]	@ (8001de4 <RequestSeedTask+0x12c>)
 8001d98:	f005 ff6e 	bl	8007c78 <siprintf>
		  for (i=0; i<LENGTH_OF_SEED_KEY-1; i++) {
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9e:	3301      	adds	r3, #1
 8001da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da4:	2b0e      	cmp	r3, #14
 8001da6:	d9ec      	bls.n	8001d82 <RequestSeedTask+0xca>
		  }
		  (void)osMessageQueuePut(outputQueueHandle, &msg[0], 0, 0);
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <RequestSeedTask+0x130>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	f107 0108 	add.w	r1, r7, #8
 8001db0:	2300      	movs	r3, #0
 8001db2:	2200      	movs	r2, #0
 8001db4:	f002 fd8e 	bl	80048d4 <osMessageQueuePut>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2120      	movs	r1, #32
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <RequestSeedTask+0x134>)
 8001dbe:	f000 fd73 	bl	80028a8 <HAL_GPIO_WritePin>
		if (osSemaphoreAcquire(requestSeedBinarySemHandle, osWaitForever) == osOK) {
 8001dc2:	e77f      	b.n	8001cc4 <RequestSeedTask+0xc>
 8001dc4:	20000138 	.word	0x20000138
 8001dc8:	08008854 	.word	0x08008854
 8001dcc:	20000178 	.word	0x20000178
 8001dd0:	2000001c 	.word	0x2000001c
 8001dd4:	08008b38 	.word	0x08008b38
 8001dd8:	08008b48 	.word	0x08008b48
 8001ddc:	2000003c 	.word	0x2000003c
 8001de0:	200003d0 	.word	0x200003d0
 8001de4:	080087a8 	.word	0x080087a8
 8001de8:	20000134 	.word	0x20000134
 8001dec:	40010800 	.word	0x40010800

08001df0 <CompareKeyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CompareKeyTask */
void CompareKeyTask(void *argument)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	@ 0x50
 8001df4:	af06      	add	r7, sp, #24
 8001df6:	6078      	str	r0, [r7, #4]
	   * selected in cmox_default_config.h. To use a specific implementation, user can
	   * directly choose:
	   * - CMOX_AESFAST_CBC_ENC_ALGO to select the AES fast implementation
	   * - CMOX_AESSMALL_CBC_ENC_ALGO to select the AES small implementation
	   */
	  if (osSemaphoreAcquire(sendKeyBinarySemHandle, osWaitForever) == osOK) {
 8001df8:	4b2c      	ldr	r3, [pc, #176]	@ (8001eac <CompareKeyTask+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fc5d 	bl	80046c0 <osSemaphoreAcquire>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f5      	bne.n	8001df8 <CompareKeyTask+0x8>
		  memset(ComputedCiphertext, 0, sizeof(uint8_t)*LENGTH_OF_SEED_KEY);
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4827      	ldr	r0, [pc, #156]	@ (8001eb0 <CompareKeyTask+0xc0>)
 8001e12:	f005 ff63 	bl	8007cdc <memset>
		  ComputedRandom[15] = 0x01; //perform PKCS7 padding
 8001e16:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <CompareKeyTask+0xc4>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	73da      	strb	r2, [r3, #15]
		  retval = cmox_cipher_encrypt(CMOX_AES_CBC_ENC_ALGO,                  			/* Use AES ECB algorithm */
 8001e1c:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <CompareKeyTask+0xc8>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e24:	9304      	str	r3, [sp, #16]
 8001e26:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <CompareKeyTask+0xc0>)
 8001e28:	9303      	str	r3, [sp, #12]
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <CompareKeyTask+0xcc>)
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2310      	movs	r3, #16
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <CompareKeyTask+0xd0>)
 8001e38:	2210      	movs	r2, #16
 8001e3a:	491e      	ldr	r1, [pc, #120]	@ (8001eb4 <CompareKeyTask+0xc4>)
 8001e3c:	f7fe fb1e 	bl	800047c <cmox_cipher_encrypt>
 8001e40:	6378      	str	r0, [r7, #52]	@ 0x34
									   SecretKey, LENGTH_OF_SEED_KEY,                   /* AES key to use */
									   IV, LENGTH_OF_SEED_KEY,                         	/* Initialization vector */
									   ComputedCiphertext, &computedSize);   			/* Data buffer to receive generated ciphertext */

		  /* Verify API returned value */
		  if (retval != CMOX_CIPHER_SUCCESS)
 8001e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e48:	d001      	beq.n	8001e4e <CompareKeyTask+0x5e>
		  {
			  Error_Handler();
 8001e4a:	f000 f857 	bl	8001efc <Error_Handler>
		  }

		  /* Verify generated data size is the expected one */
		  if (computedSize != LENGTH_OF_SEED_KEY)
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d001      	beq.n	8001e58 <CompareKeyTask+0x68>
		  {
			  Error_Handler();
 8001e54:	f000 f852 	bl	8001efc <Error_Handler>
		  }

		  /* Verify generated data are the expected ones */
		  if (memcmp(InputCiphertext, ComputedCiphertext, computedSize) != 0) {
 8001e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4914      	ldr	r1, [pc, #80]	@ (8001eb0 <CompareKeyTask+0xc0>)
 8001e5e:	4819      	ldr	r0, [pc, #100]	@ (8001ec4 <CompareKeyTask+0xd4>)
 8001e60:	f005 ff2c 	bl	8007cbc <memcmp>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <CompareKeyTask+0x92>
			  (void)sprintf(msg, "Please don't hack me bro");
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <CompareKeyTask+0xd8>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 ff01 	bl	8007c78 <siprintf>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2120      	movs	r1, #32
 8001e7a:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <CompareKeyTask+0xdc>)
 8001e7c:	f000 fd14 	bl	80028a8 <HAL_GPIO_WritePin>
 8001e80:	e00a      	b.n	8001e98 <CompareKeyTask+0xa8>
		  }
		  else {
			  (void)sprintf(msg, "We are good to go bro");
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4912      	ldr	r1, [pc, #72]	@ (8001ed0 <CompareKeyTask+0xe0>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fef5 	bl	8007c78 <siprintf>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2120      	movs	r1, #32
 8001e92:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <CompareKeyTask+0xdc>)
 8001e94:	f000 fd08 	bl	80028a8 <HAL_GPIO_WritePin>
		  }

		  (void)osMessageQueuePut(outputQueueHandle, &msg[0], 0, 0);
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <CompareKeyTask+0xe4>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f107 010c 	add.w	r1, r7, #12
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f002 fd16 	bl	80048d4 <osMessageQueuePut>
	  if (osSemaphoreAcquire(sendKeyBinarySemHandle, osWaitForever) == osOK) {
 8001ea8:	e7a6      	b.n	8001df8 <CompareKeyTask+0x8>
 8001eaa:	bf00      	nop
 8001eac:	2000013c 	.word	0x2000013c
 8001eb0:	20000168 	.word	0x20000168
 8001eb4:	200003d0 	.word	0x200003d0
 8001eb8:	08008804 	.word	0x08008804
 8001ebc:	08008b28 	.word	0x08008b28
 8001ec0:	08008b18 	.word	0x08008b18
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	080087b0 	.word	0x080087b0
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	080087cc 	.word	0x080087cc
 8001ed4:	20000134 	.word	0x20000134

08001ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001eea:	f000 f9ab 	bl	8002244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40012c00 	.word	0x40012c00

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <Error_Handler+0x8>

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_MspInit+0x68>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_MspInit+0x68>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <HAL_MspInit+0x68>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_MspInit+0x68>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a11      	ldr	r2, [pc, #68]	@ (8001f70 <HAL_MspInit+0x68>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_MspInit+0x68>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	210f      	movs	r1, #15
 8001f42:	f06f 0001 	mvn.w	r0, #1
 8001f46:	f000 fa4e 	bl	80023e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_MspInit+0x6c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_MspInit+0x6c>)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000

08001f78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_UART_MspInit+0x80>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d12b      	bne.n	8001ff0 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f98:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_UART_MspInit+0x84>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <HAL_UART_MspInit+0x84>)
 8001f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa2:	61d3      	str	r3, [r2, #28]
 8001fa4:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_UART_MspInit+0x84>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_UART_MspInit+0x84>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_UART_MspInit+0x84>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_UART_MspInit+0x84>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fc8:	230c      	movs	r3, #12
 8001fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4809      	ldr	r0, [pc, #36]	@ (8002000 <HAL_UART_MspInit+0x88>)
 8001fdc:	f000 fae0 	bl	80025a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2105      	movs	r1, #5
 8001fe4:	2026      	movs	r0, #38	@ 0x26
 8001fe6:	f000 f9fe 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fea:	2026      	movs	r0, #38	@ 0x26
 8001fec:	f000 fa17 	bl	800241e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010800 	.word	0x40010800

08002004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800201a:	4b2e      	ldr	r3, [pc, #184]	@ (80020d4 <HAL_InitTick+0xd0>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <HAL_InitTick+0xd0>)
 8002020:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002024:	6193      	str	r3, [r2, #24]
 8002026:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_InitTick+0xd0>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f85f 	bl	8003100 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002042:	f001 f849 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8002046:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204a:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <HAL_InitTick+0xd4>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	3b01      	subs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_InitTick+0xd8>)
 8002058:	4a21      	ldr	r2, [pc, #132]	@ (80020e0 <HAL_InitTick+0xdc>)
 800205a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <HAL_InitTick+0xd8>)
 800205e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002062:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002064:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_InitTick+0xd8>)
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800206a:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <HAL_InitTick+0xd8>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002070:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <HAL_InitTick+0xd8>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_InitTick+0xd8>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800207c:	4817      	ldr	r0, [pc, #92]	@ (80020dc <HAL_InitTick+0xd8>)
 800207e:	f001 f88d 	bl	800319c <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002088:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800208c:	2b00      	cmp	r3, #0
 800208e:	d11b      	bne.n	80020c8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002090:	4812      	ldr	r0, [pc, #72]	@ (80020dc <HAL_InitTick+0xd8>)
 8002092:	f001 f8db 	bl	800324c <HAL_TIM_Base_Start_IT>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800209c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020a4:	2019      	movs	r0, #25
 80020a6:	f000 f9ba 	bl	800241e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d808      	bhi.n	80020c2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80020b0:	2200      	movs	r2, #0
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	2019      	movs	r0, #25
 80020b6:	f000 f996 	bl	80023e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <HAL_InitTick+0xe0>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e002      	b.n	80020c8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3730      	adds	r7, #48	@ 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	200003e0 	.word	0x200003e0
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	20000060 	.word	0x20000060

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <NMI_Handler+0x4>

080020f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <MemManage_Handler+0x4>

08002100 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <UsageFault_Handler+0x4>

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <TIM1_UP_IRQHandler+0x10>)
 8002122:	f001 f8e5 	bl	80032f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200003e0 	.word	0x200003e0

08002130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <USART2_IRQHandler+0x10>)
 8002136:	f001 fbe1 	bl	80038fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200000e0 	.word	0x200000e0

08002144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002148:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800214c:	f000 fbc4 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f005 fe36 	bl	8007df4 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20005000 	.word	0x20005000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	20000428 	.word	0x20000428
 80021bc:	20003a70 	.word	0x20003a70

080021c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021cc:	f7ff fff8 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480b      	ldr	r0, [pc, #44]	@ (8002200 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021d2:	490c      	ldr	r1, [pc, #48]	@ (8002204 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021e8:	4c09      	ldr	r4, [pc, #36]	@ (8002210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f6:	f005 fe03 	bl	8007e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fa:	f7ff fb2b 	bl	8001854 <main>
  bx lr
 80021fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002208:	080091d8 	.word	0x080091d8
  ldr r2, =_sbss
 800220c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002210:	20003a70 	.word	0x20003a70

08002214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_2_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_Init+0x28>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <HAL_Init+0x28>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f8d1 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	200f      	movs	r0, #15
 8002230:	f7ff fee8 	bl	8002004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fe68 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_IncTick+0x1c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_IncTick+0x20>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a03      	ldr	r2, [pc, #12]	@ (8002264 <HAL_IncTick+0x20>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000064 	.word	0x20000064
 8002264:	2000042c 	.word	0x2000042c

08002268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <HAL_GetTick+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	2000042c 	.word	0x2000042c

0800227c <__NVIC_SetPriorityGrouping>:
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4906      	ldr	r1, [pc, #24]	@ (8002314 <__NVIC_EnableIRQ+0x34>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff4f 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff64 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ffb2 	bl	800236c <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff81 	bl	8002318 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff57 	bl	80022e0 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d008      	beq.n	8002464 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2204      	movs	r2, #4
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e020      	b.n	80024a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020e 	bic.w	r2, r2, #14
 8002472:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d005      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2204      	movs	r2, #4
 80024cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e051      	b.n	8002578 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020e 	bic.w	r2, r2, #14
 80024e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a22      	ldr	r2, [pc, #136]	@ (8002584 <HAL_DMA_Abort_IT+0xd4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d029      	beq.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	@ (8002588 <HAL_DMA_Abort_IT+0xd8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_Abort_IT+0x9e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1f      	ldr	r2, [pc, #124]	@ (800258c <HAL_DMA_Abort_IT+0xdc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01a      	beq.n	8002548 <HAL_DMA_Abort_IT+0x98>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1e      	ldr	r2, [pc, #120]	@ (8002590 <HAL_DMA_Abort_IT+0xe0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d012      	beq.n	8002542 <HAL_DMA_Abort_IT+0x92>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <HAL_DMA_Abort_IT+0xe4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00a      	beq.n	800253c <HAL_DMA_Abort_IT+0x8c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1b      	ldr	r2, [pc, #108]	@ (8002598 <HAL_DMA_Abort_IT+0xe8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_DMA_Abort_IT+0x86>
 8002530:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002534:	e00e      	b.n	8002554 <HAL_DMA_Abort_IT+0xa4>
 8002536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800253a:	e00b      	b.n	8002554 <HAL_DMA_Abort_IT+0xa4>
 800253c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002540:	e008      	b.n	8002554 <HAL_DMA_Abort_IT+0xa4>
 8002542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002546:	e005      	b.n	8002554 <HAL_DMA_Abort_IT+0xa4>
 8002548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800254c:	e002      	b.n	8002554 <HAL_DMA_Abort_IT+0xa4>
 800254e:	2310      	movs	r3, #16
 8002550:	e000      	b.n	8002554 <HAL_DMA_Abort_IT+0xa4>
 8002552:	2301      	movs	r3, #1
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <HAL_DMA_Abort_IT+0xec>)
 8002556:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
    } 
  }
  return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40020008 	.word	0x40020008
 8002588:	4002001c 	.word	0x4002001c
 800258c:	40020030 	.word	0x40020030
 8002590:	40020044 	.word	0x40020044
 8002594:	40020058 	.word	0x40020058
 8002598:	4002006c 	.word	0x4002006c
 800259c:	40020000 	.word	0x40020000

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b08b      	sub	sp, #44	@ 0x2c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e169      	b.n	8002888 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b4:	2201      	movs	r2, #1
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 8158 	bne.w	8002882 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002840 <HAL_GPIO_Init+0x2a0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d05e      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025dc:	4a98      	ldr	r2, [pc, #608]	@ (8002840 <HAL_GPIO_Init+0x2a0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d875      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025e2:	4a98      	ldr	r2, [pc, #608]	@ (8002844 <HAL_GPIO_Init+0x2a4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d058      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025e8:	4a96      	ldr	r2, [pc, #600]	@ (8002844 <HAL_GPIO_Init+0x2a4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d86f      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025ee:	4a96      	ldr	r2, [pc, #600]	@ (8002848 <HAL_GPIO_Init+0x2a8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d052      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025f4:	4a94      	ldr	r2, [pc, #592]	@ (8002848 <HAL_GPIO_Init+0x2a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d869      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025fa:	4a94      	ldr	r2, [pc, #592]	@ (800284c <HAL_GPIO_Init+0x2ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04c      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 8002600:	4a92      	ldr	r2, [pc, #584]	@ (800284c <HAL_GPIO_Init+0x2ac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d863      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 8002606:	4a92      	ldr	r2, [pc, #584]	@ (8002850 <HAL_GPIO_Init+0x2b0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d046      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 800260c:	4a90      	ldr	r2, [pc, #576]	@ (8002850 <HAL_GPIO_Init+0x2b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d85d      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 8002612:	2b12      	cmp	r3, #18
 8002614:	d82a      	bhi.n	800266c <HAL_GPIO_Init+0xcc>
 8002616:	2b12      	cmp	r3, #18
 8002618:	d859      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 800261a:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <HAL_GPIO_Init+0x80>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	0800269b 	.word	0x0800269b
 8002624:	08002675 	.word	0x08002675
 8002628:	08002687 	.word	0x08002687
 800262c:	080026c9 	.word	0x080026c9
 8002630:	080026cf 	.word	0x080026cf
 8002634:	080026cf 	.word	0x080026cf
 8002638:	080026cf 	.word	0x080026cf
 800263c:	080026cf 	.word	0x080026cf
 8002640:	080026cf 	.word	0x080026cf
 8002644:	080026cf 	.word	0x080026cf
 8002648:	080026cf 	.word	0x080026cf
 800264c:	080026cf 	.word	0x080026cf
 8002650:	080026cf 	.word	0x080026cf
 8002654:	080026cf 	.word	0x080026cf
 8002658:	080026cf 	.word	0x080026cf
 800265c:	080026cf 	.word	0x080026cf
 8002660:	080026cf 	.word	0x080026cf
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002691 	.word	0x08002691
 800266c:	4a79      	ldr	r2, [pc, #484]	@ (8002854 <HAL_GPIO_Init+0x2b4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002672:	e02c      	b.n	80026ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e029      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e024      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	3308      	adds	r3, #8
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e01f      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	330c      	adds	r3, #12
 8002696:	623b      	str	r3, [r7, #32]
          break;
 8002698:	e01a      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a2:	2304      	movs	r3, #4
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e013      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b0:	2308      	movs	r3, #8
 80026b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	611a      	str	r2, [r3, #16]
          break;
 80026ba:	e009      	b.n	80026d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026bc:	2308      	movs	r3, #8
 80026be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	615a      	str	r2, [r3, #20]
          break;
 80026c6:	e003      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          break;
 80026ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2bff      	cmp	r3, #255	@ 0xff
 80026d4:	d801      	bhi.n	80026da <HAL_GPIO_Init+0x13a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e001      	b.n	80026de <HAL_GPIO_Init+0x13e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2bff      	cmp	r3, #255	@ 0xff
 80026e4:	d802      	bhi.n	80026ec <HAL_GPIO_Init+0x14c>
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	e002      	b.n	80026f2 <HAL_GPIO_Init+0x152>
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	3b08      	subs	r3, #8
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	210f      	movs	r1, #15
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80b1 	beq.w	8002882 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002720:	4b4d      	ldr	r3, [pc, #308]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a4c      	ldr	r2, [pc, #304]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_GPIO_Init+0x2b8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002738:	4a48      	ldr	r2, [pc, #288]	@ (800285c <HAL_GPIO_Init+0x2bc>)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <HAL_GPIO_Init+0x2c0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <HAL_GPIO_Init+0x1ec>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3f      	ldr	r2, [pc, #252]	@ (8002864 <HAL_GPIO_Init+0x2c4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00d      	beq.n	8002788 <HAL_GPIO_Init+0x1e8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3e      	ldr	r2, [pc, #248]	@ (8002868 <HAL_GPIO_Init+0x2c8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <HAL_GPIO_Init+0x1e4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3d      	ldr	r2, [pc, #244]	@ (800286c <HAL_GPIO_Init+0x2cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_GPIO_Init+0x1e0>
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002780:	2304      	movs	r3, #4
 8002782:	e004      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002784:	2302      	movs	r3, #2
 8002786:	e002      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 800278c:	2300      	movs	r3, #0
 800278e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002790:	f002 0203 	and.w	r2, r2, #3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4093      	lsls	r3, r2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800279e:	492f      	ldr	r1, [pc, #188]	@ (800285c <HAL_GPIO_Init+0x2bc>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	492c      	ldr	r1, [pc, #176]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	4928      	ldr	r1, [pc, #160]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e0:	4b23      	ldr	r3, [pc, #140]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4922      	ldr	r1, [pc, #136]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	491e      	ldr	r1, [pc, #120]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4918      	ldr	r1, [pc, #96]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002816:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	43db      	mvns	r3, r3
 800281e:	4914      	ldr	r1, [pc, #80]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 8002820:	4013      	ands	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	490e      	ldr	r1, [pc, #56]	@ (8002870 <HAL_GPIO_Init+0x2d0>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e021      	b.n	8002882 <HAL_GPIO_Init+0x2e2>
 800283e:	bf00      	nop
 8002840:	10320000 	.word	0x10320000
 8002844:	10310000 	.word	0x10310000
 8002848:	10220000 	.word	0x10220000
 800284c:	10210000 	.word	0x10210000
 8002850:	10120000 	.word	0x10120000
 8002854:	10110000 	.word	0x10110000
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	40010800 	.word	0x40010800
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40011000 	.word	0x40011000
 800286c:	40011400 	.word	0x40011400
 8002870:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_GPIO_Init+0x304>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	43db      	mvns	r3, r3
 800287c:	4909      	ldr	r1, [pc, #36]	@ (80028a4 <HAL_GPIO_Init+0x304>)
 800287e:	4013      	ands	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	f47f ae8e 	bne.w	80025b4 <HAL_GPIO_Init+0x14>
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	372c      	adds	r7, #44	@ 0x2c
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f806 	bl	8002908 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e272      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8087 	beq.w	8002a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293c:	4b92      	ldr	r3, [pc, #584]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00c      	beq.n	8002962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002948:	4b8f      	ldr	r3, [pc, #572]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d112      	bne.n	800297a <HAL_RCC_OscConfig+0x5e>
 8002954:	4b8c      	ldr	r3, [pc, #560]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002962:	4b89      	ldr	r3, [pc, #548]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d06c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x12c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d168      	bne.n	8002a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e24c      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x76>
 8002984:	4b80      	ldr	r3, [pc, #512]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7f      	ldr	r2, [pc, #508]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e02e      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x98>
 800299a:	4b7b      	ldr	r3, [pc, #492]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a7a      	ldr	r2, [pc, #488]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b78      	ldr	r3, [pc, #480]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a77      	ldr	r2, [pc, #476]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0xbc>
 80029be:	4b72      	ldr	r3, [pc, #456]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a71      	ldr	r2, [pc, #452]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xd4>
 80029d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b68      	ldr	r3, [pc, #416]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a67      	ldr	r2, [pc, #412]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff fc36 	bl	8002268 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff fc32 	bl	8002268 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e200      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b5d      	ldr	r3, [pc, #372]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xe4>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fc22 	bl	8002268 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fc1e 	bl	8002268 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1ec      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x10c>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a56:	4b4c      	ldr	r3, [pc, #304]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a62:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x18c>
 8002a6e:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b43      	ldr	r3, [pc, #268]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x176>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c0      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b3d      	ldr	r3, [pc, #244]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4939      	ldr	r1, [pc, #228]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <HAL_RCC_OscConfig+0x270>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7ff fbd7 	bl	8002268 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abe:	f7ff fbd3 	bl	8002268 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a1      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4927      	ldr	r1, [pc, #156]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b26      	ldr	r3, [pc, #152]	@ (8002b8c <HAL_RCC_OscConfig+0x270>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff fbb6 	bl	8002268 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b00:	f7ff fbb2 	bl	8002268 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e180      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03a      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d019      	beq.n	8002b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <HAL_RCC_OscConfig+0x274>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7ff fb96 	bl	8002268 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7ff fb92 	bl	8002268 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e160      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f000 fafe 	bl	8003160 <RCC_Delay>
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fb7c 	bl	8002268 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b72:	e00f      	b.n	8002b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff fb78 	bl	8002268 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e146      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	42420000 	.word	0x42420000
 8002b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b92      	ldr	r3, [pc, #584]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e9      	bne.n	8002b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a6 	beq.w	8002cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a87      	ldr	r2, [pc, #540]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	61d3      	str	r3, [r2, #28]
 8002bca:	4b85      	ldr	r3, [pc, #532]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b82      	ldr	r3, [pc, #520]	@ (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b7f      	ldr	r3, [pc, #508]	@ (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7e      	ldr	r2, [pc, #504]	@ (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff fb39 	bl	8002268 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7ff fb35 	bl	8002268 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	@ 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e103      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <HAL_RCC_OscConfig+0x4c8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x312>
 8002c20:	4b6f      	ldr	r3, [pc, #444]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a6e      	ldr	r2, [pc, #440]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	e02d      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x334>
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a69      	ldr	r2, [pc, #420]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	4b67      	ldr	r3, [pc, #412]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a66      	ldr	r2, [pc, #408]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	e01c      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCC_OscConfig+0x356>
 8002c58:	4b61      	ldr	r3, [pc, #388]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a60      	ldr	r2, [pc, #384]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	4b5e      	ldr	r3, [pc, #376]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a5d      	ldr	r2, [pc, #372]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e00b      	b.n	8002c8a <HAL_RCC_OscConfig+0x36e>
 8002c72:	4b5b      	ldr	r3, [pc, #364]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a5a      	ldr	r2, [pc, #360]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	4b58      	ldr	r3, [pc, #352]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a57      	ldr	r2, [pc, #348]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d015      	beq.n	8002cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7ff fae9 	bl	8002268 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7ff fae5 	bl	8002268 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0b1      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCC_OscConfig+0x37e>
 8002cbc:	e014      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff fad3 	bl	8002268 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7ff facf 	bl	8002268 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e09b      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4b3c      	ldr	r3, [pc, #240]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d04:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d061      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d146      	bne.n	8002da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff faa3 	bl	8002268 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff fa9f 	bl	8002268 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e06d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4921      	ldr	r1, [pc, #132]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a19      	ldr	r1, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	430b      	orrs	r3, r1
 8002d72:	491b      	ldr	r1, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7ff fa73 	bl	8002268 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7ff fa6f 	bl	8002268 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x46a>
 8002da4:	e035      	b.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff fa5c 	bl	8002268 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7ff fa58 	bl	8002268 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e026      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x498>
 8002dd2:	e01e      	b.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e019      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_OscConfig+0x500>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b67      	ldr	r3, [pc, #412]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4965      	ldr	r1, [pc, #404]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e073      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b39      	ldr	r3, [pc, #228]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4936      	ldr	r1, [pc, #216]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f10:	f7ff f9aa 	bl	8002268 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7ff f9a6 	bl	8002268 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e053      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d210      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4922      	ldr	r1, [pc, #136]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x1cc>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f818 	bl	8002004 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08008b68 	.word	0x08008b68
 8002fec:	2000005c 	.word	0x2000005c
 8002ff0:	20000060 	.word	0x20000060

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800300e:	4b1e      	ldr	r3, [pc, #120]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x94>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x30>
 800301e:	2b08      	cmp	r3, #8
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x36>
 8003022:	e027      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003026:	613b      	str	r3, [r7, #16]
      break;
 8003028:	e027      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	0c9b      	lsrs	r3, r3, #18
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x94>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0c5b      	lsrs	r3, r3, #17
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <HAL_RCC_GetSysClockFreq+0xa0>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003056:	fb03 f202 	mul.w	r2, r3, r2
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e004      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0c      	ldr	r2, [pc, #48]	@ (8003098 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	613b      	str	r3, [r7, #16]
      break;
 8003072:	e002      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003076:	613b      	str	r3, [r7, #16]
      break;
 8003078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307a:	693b      	ldr	r3, [r7, #16]
}
 800307c:	4618      	mov	r0, r3
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	007a1200 	.word	0x007a1200
 8003090:	08008b80 	.word	0x08008b80
 8003094:	08008b90 	.word	0x08008b90
 8003098:	003d0900 	.word	0x003d0900

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b02      	ldr	r3, [pc, #8]	@ (80030ac <HAL_RCC_GetHCLKFreq+0x10>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	2000005c 	.word	0x2000005c

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b4:	f7ff fff2 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08008b78 	.word	0x08008b78

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030dc:	f7ff ffde 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0adb      	lsrs	r3, r3, #11
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	@ (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08008b78 	.word	0x08008b78

08003100 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	220f      	movs	r2, #15
 800310e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_GetClockConfig+0x58>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800311c:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCC_GetClockConfig+0x58>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_GetClockConfig+0x58>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003134:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <HAL_RCC_GetClockConfig+0x58>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	08db      	lsrs	r3, r3, #3
 800313a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_GetClockConfig+0x5c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	40022000 	.word	0x40022000

08003160 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <RCC_Delay+0x34>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <RCC_Delay+0x38>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0a5b      	lsrs	r3, r3, #9
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800317c:	bf00      	nop
  }
  while (Delay --);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	60fa      	str	r2, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <RCC_Delay+0x1c>
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	2000005c 	.word	0x2000005c
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e041      	b.n	8003232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f839 	bl	800323a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 f99c 	bl	8003518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d001      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e03a      	b.n	80032da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a18      	ldr	r2, [pc, #96]	@ (80032e4 <HAL_TIM_Base_Start_IT+0x98>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x58>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328e:	d009      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x58>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a14      	ldr	r2, [pc, #80]	@ (80032e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x58>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a13      	ldr	r2, [pc, #76]	@ (80032ec <HAL_TIM_Base_Start_IT+0xa0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d010      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	e007      	b.n	80032d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800

080032f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d020      	beq.n	8003354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0202 	mvn.w	r2, #2
 8003324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8d1 	bl	80034e2 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8c4 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8d3 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0204 	mvn.w	r2, #4
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8ab 	bl	80034e2 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f89e 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8ad 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0208 	mvn.w	r2, #8
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f885 	bl	80034e2 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f878 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f887 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0210 	mvn.w	r2, #16
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2208      	movs	r2, #8
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f85f 	bl	80034e2 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f852 	bl	80034d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f861 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0201 	mvn.w	r2, #1
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe fd3e 	bl	8001ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8c3 	bl	8003606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f831 	bl	8003506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0220 	mvn.w	r2, #32
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f896 	bl	80035f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a2f      	ldr	r2, [pc, #188]	@ (80035e8 <TIM_Base_SetConfig+0xd0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x30>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x30>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <TIM_Base_SetConfig+0xd4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x30>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <TIM_Base_SetConfig+0xd8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a22      	ldr	r2, [pc, #136]	@ (80035e8 <TIM_Base_SetConfig+0xd0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003568:	d007      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <TIM_Base_SetConfig+0xd4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_Base_SetConfig+0x62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <TIM_Base_SetConfig+0xd8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <TIM_Base_SetConfig+0xd0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f023 0201 	bic.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	611a      	str	r2, [r3, #16]
  }
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800

080035f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e042      	b.n	80036b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fc9a 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	@ 0x24
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800365a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fdf9 	bl	8004254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	@ 0x28
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d175      	bne.n	80037c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_UART_Transmit+0x2c>
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e06e      	b.n	80037c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2221      	movs	r2, #33	@ 0x21
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f6:	f7fe fdb7 	bl	8002268 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003710:	d108      	bne.n	8003724 <HAL_UART_Transmit+0x6c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800372c:	e02e      	b.n	800378c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	2180      	movs	r1, #128	@ 0x80
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fb97 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e03a      	b.n	80037c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e007      	b.n	800377e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1cb      	bne.n	800372e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2140      	movs	r1, #64	@ 0x40
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fb63 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e006      	b.n	80037c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b08a      	sub	sp, #40	@ 0x28
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	f040 8081 	bne.w	80038f2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_UART_Receive+0x2e>
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e079      	b.n	80038f4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2222      	movs	r2, #34	@ 0x22
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003814:	f7fe fd28 	bl	8002268 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382e:	d108      	bne.n	8003842 <HAL_UART_Receive+0x74>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e003      	b.n	800384a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800384a:	e047      	b.n	80038dc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	2120      	movs	r1, #32
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fb08 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e042      	b.n	80038f4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10c      	bne.n	800388e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003880:	b29a      	uxth	r2, r3
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3302      	adds	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e01f      	b.n	80038ce <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003896:	d007      	beq.n	80038a8 <HAL_UART_Receive+0xda>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <HAL_UART_Receive+0xe8>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e008      	b.n	80038c8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1b2      	bne.n	800384c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e000      	b.n	80038f4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800393a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_UART_IRQHandler+0x66>
 800394e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fbbc 	bl	80040d8 <UART_Receive_IT>
      return;
 8003960:	e25b      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80de 	beq.w	8003b28 <HAL_UART_IRQHandler+0x22c>
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80d1 	beq.w	8003b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_UART_IRQHandler+0xae>
 8003992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_UART_IRQHandler+0xd2>
 80039b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0xf6>
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_UART_IRQHandler+0x126>
 80039fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	f043 0208 	orr.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 81f2 	beq.w	8003e10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_UART_IRQHandler+0x14e>
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb47 	bl	80040d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_UART_IRQHandler+0x17a>
 8003a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d04f      	beq.n	8003b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa51 	bl	8003f1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d041      	beq.n	8003b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1d9      	bne.n	8003a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cdc <HAL_UART_IRQHandler+0x3e0>)
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fce0 	bl	80024b0 <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b00:	4610      	mov	r0, r2
 8003b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00e      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f99c 	bl	8003e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e00a      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f998 	bl	8003e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e006      	b.n	8003b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f994 	bl	8003e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b22:	e175      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	bf00      	nop
    return;
 8003b26:	e173      	b.n	8003e10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 814f 	bne.w	8003dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8148 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8141 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80b6 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8145 	beq.w	8003e14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b92:	429a      	cmp	r2, r3
 8003b94:	f080 813e 	bcs.w	8003e14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f000 8088 	beq.w	8003cbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bd8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003be4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1d9      	bne.n	8003bac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c1c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e1      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e3      	bne.n	8003c34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ca0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ca4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fbbf 	bl	800243a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8bf 	bl	8003e56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd8:	e09c      	b.n	8003e14 <HAL_UART_IRQHandler+0x518>
 8003cda:	bf00      	nop
 8003cdc:	08003fe3 	.word	0x08003fe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 808e 	beq.w	8003e18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8089 	beq.w	8003e18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d62:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e3      	bne.n	8003d3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003da8:	61fa      	str	r2, [r7, #28]
 8003daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	617b      	str	r3, [r7, #20]
   return(result);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e3      	bne.n	8003d84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f844 	bl	8003e56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dce:	e023      	b.n	8003e18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <HAL_UART_IRQHandler+0x4f4>
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f90e 	bl	800400a <UART_Transmit_IT>
    return;
 8003dee:	e014      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <HAL_UART_IRQHandler+0x51e>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f94d 	bl	80040a8 <UART_EndTransmit_IT>
    return;
 8003e0e:	e004      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e18:	bf00      	nop
  }
}
 8003e1a:	37e8      	adds	r7, #232	@ 0xe8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7c:	e03b      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d037      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe f9ef 	bl	8002268 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e03a      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d023      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b80      	cmp	r3, #128	@ 0x80
 8003eb2:	d020      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d01d      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d116      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f81d 	bl	8003f1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00f      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d0b4      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b095      	sub	sp, #84	@ 0x54
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f46:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3314      	adds	r3, #20
 8003f78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e5      	bne.n	8003f5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d119      	bne.n	8003fca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f023 0310 	bic.w	r3, r3, #16
 8003fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb6:	61ba      	str	r2, [r7, #24]
 8003fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fd8:	bf00      	nop
 8003fda:	3754      	adds	r7, #84	@ 0x54
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff ff21 	bl	8003e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b21      	cmp	r3, #33	@ 0x21
 800401c:	d13e      	bne.n	800409c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004026:	d114      	bne.n	8004052 <UART_Transmit_IT+0x48>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d110      	bne.n	8004052 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004044:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	621a      	str	r2, [r3, #32]
 8004050:	e008      	b.n	8004064 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	1c59      	adds	r1, r3, #1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6211      	str	r1, [r2, #32]
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4619      	mov	r1, r3
 8004072:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10f      	bne.n	8004098 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004086:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004096:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fea9 	bl	8003e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	@ 0x30
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b22      	cmp	r3, #34	@ 0x22
 80040ea:	f040 80ae 	bne.w	800424a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f6:	d117      	bne.n	8004128 <UART_Receive_IT+0x50>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d113      	bne.n	8004128 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004116:	b29a      	uxth	r2, r3
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
 8004126:	e026      	b.n	8004176 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413a:	d007      	beq.n	800414c <UART_Receive_IT+0x74>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <UART_Receive_IT+0x82>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e008      	b.n	800416c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004166:	b2da      	uxtb	r2, r3
 8004168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29b      	uxth	r3, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4619      	mov	r1, r3
 8004184:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004186:	2b00      	cmp	r3, #0
 8004188:	d15d      	bne.n	8004246 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0220 	bic.w	r2, r2, #32
 8004198:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d135      	bne.n	800423c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	613b      	str	r3, [r7, #16]
   return(result);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f023 0310 	bic.w	r3, r3, #16
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f6:	623a      	str	r2, [r7, #32]
 80041f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	69f9      	ldr	r1, [r7, #28]
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	61bb      	str	r3, [r7, #24]
   return(result);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b10      	cmp	r3, #16
 8004216:	d10a      	bne.n	800422e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff fe0e 	bl	8003e56 <HAL_UARTEx_RxEventCallback>
 800423a:	e002      	b.n	8004242 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fdf8 	bl	8003e32 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e002      	b.n	800424c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e000      	b.n	800424c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3730      	adds	r7, #48	@ 0x30
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800428e:	f023 030c 	bic.w	r3, r3, #12
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	430b      	orrs	r3, r1
 800429a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <UART_SetConfig+0x114>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d103      	bne.n	80042c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042bc:	f7fe ff0c 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	e002      	b.n	80042ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c4:	f7fe fef4 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 80042c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009a      	lsls	r2, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	4a22      	ldr	r2, [pc, #136]	@ (800436c <UART_SetConfig+0x118>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	0119      	lsls	r1, r3, #4
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004300:	4b1a      	ldr	r3, [pc, #104]	@ (800436c <UART_SetConfig+0x118>)
 8004302:	fba3 0302 	umull	r0, r3, r3, r2
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2064      	movs	r0, #100	@ 0x64
 800430a:	fb00 f303 	mul.w	r3, r0, r3
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	3332      	adds	r3, #50	@ 0x32
 8004314:	4a15      	ldr	r2, [pc, #84]	@ (800436c <UART_SetConfig+0x118>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004320:	4419      	add	r1, r3
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009a      	lsls	r2, r3, #2
 800432c:	441a      	add	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	fbb2 f2f3 	udiv	r2, r2, r3
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <UART_SetConfig+0x118>)
 800433a:	fba3 0302 	umull	r0, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2064      	movs	r0, #100	@ 0x64
 8004342:	fb00 f303 	mul.w	r3, r0, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	3332      	adds	r3, #50	@ 0x32
 800434c:	4a07      	ldr	r2, [pc, #28]	@ (800436c <UART_SetConfig+0x118>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	440a      	add	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40013800 	.word	0x40013800
 800436c:	51eb851f 	.word	0x51eb851f

08004370 <__NVIC_SetPriority>:
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	@ (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	@ (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <SysTick_Handler+0x1c>)
 80043ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043cc:	f002 fac6 	bl	800695c <xTaskGetSchedulerState>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043d6:	f003 f967 	bl	80076a8 <xPortSysTickHandler>
  }
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	e000e010 	.word	0xe000e010

080043e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043e8:	2100      	movs	r1, #0
 80043ea:	f06f 0004 	mvn.w	r0, #4
 80043ee:	f7ff ffbf 	bl	8004370 <__NVIC_SetPriority>
#endif
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043fe:	f3ef 8305 	mrs	r3, IPSR
 8004402:	603b      	str	r3, [r7, #0]
  return(result);
 8004404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800440a:	f06f 0305 	mvn.w	r3, #5
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e00c      	b.n	800442c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004412:	4b09      	ldr	r3, [pc, #36]	@ (8004438 <osKernelInitialize+0x40>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800441a:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <osKernelInitialize+0x40>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004420:	2300      	movs	r3, #0
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	e002      	b.n	800442c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800442c:	687b      	ldr	r3, [r7, #4]
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	20000430 	.word	0x20000430

0800443c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	603b      	str	r3, [r7, #0]
  return(result);
 8004448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <osKernelStart+0x1a>
    stat = osErrorISR;
 800444e:	f06f 0305 	mvn.w	r3, #5
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e010      	b.n	8004478 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <osKernelStart+0x48>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d109      	bne.n	8004472 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800445e:	f7ff ffc1 	bl	80043e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004462:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <osKernelStart+0x48>)
 8004464:	2202      	movs	r2, #2
 8004466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004468:	f001 fe18 	bl	800609c <vTaskStartScheduler>
      stat = osOK;
 800446c:	2300      	movs	r3, #0
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e002      	b.n	8004478 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004478:	687b      	ldr	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000430 	.word	0x20000430

08004488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	@ 0x38
 800448c:	af04      	add	r7, sp, #16
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004498:	f3ef 8305 	mrs	r3, IPSR
 800449c:	617b      	str	r3, [r7, #20]
  return(result);
 800449e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d17e      	bne.n	80045a2 <osThreadNew+0x11a>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07b      	beq.n	80045a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ae:	2318      	movs	r3, #24
 80044b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d045      	beq.n	800454e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <osThreadNew+0x48>
        name = attr->name;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <osThreadNew+0x6e>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b38      	cmp	r3, #56	@ 0x38
 80044e8:	d805      	bhi.n	80044f6 <osThreadNew+0x6e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <osThreadNew+0x72>
        return (NULL);
 80044f6:	2300      	movs	r3, #0
 80044f8:	e054      	b.n	80045a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <osThreadNew+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2ba7      	cmp	r3, #167	@ 0xa7
 8004518:	d90a      	bls.n	8004530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <osThreadNew+0xa8>
        mem = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e010      	b.n	8004552 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <osThreadNew+0xca>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d108      	bne.n	8004552 <osThreadNew+0xca>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <osThreadNew+0xca>
          mem = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e001      	b.n	8004552 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d110      	bne.n	800457a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004560:	9202      	str	r2, [sp, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6a3a      	ldr	r2, [r7, #32]
 800456c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f001 fbd6 	bl	8005d20 <xTaskCreateStatic>
 8004574:	4603      	mov	r3, r0
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	e013      	b.n	80045a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d110      	bne.n	80045a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	b29a      	uxth	r2, r3
 8004584:	f107 0310 	add.w	r3, r7, #16
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f001 fc24 	bl	8005de0 <xTaskCreate>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <osThreadNew+0x11a>
            hTask = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045a2:	693b      	ldr	r3, [r7, #16]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	@ 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045bc:	f3ef 8305 	mrs	r3, IPSR
 80045c0:	613b      	str	r3, [r7, #16]
  return(result);
 80045c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d175      	bne.n	80046b4 <osSemaphoreNew+0x108>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d072      	beq.n	80046b4 <osSemaphoreNew+0x108>
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d86e      	bhi.n	80046b4 <osSemaphoreNew+0x108>
    mem = -1;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <osSemaphoreNew+0x4c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80045f0:	d902      	bls.n	80045f8 <osSemaphoreNew+0x4c>
        mem = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e00c      	b.n	8004612 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <osSemaphoreNew+0x66>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <osSemaphoreNew+0x66>
          mem = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e001      	b.n	8004612 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d04c      	beq.n	80046b4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d128      	bne.n	8004672 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10a      	bne.n	800463c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2203      	movs	r2, #3
 800462c:	9200      	str	r2, [sp, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	2100      	movs	r1, #0
 8004632:	2001      	movs	r0, #1
 8004634:	f000 fb78 	bl	8004d28 <xQueueGenericCreateStatic>
 8004638:	61f8      	str	r0, [r7, #28]
 800463a:	e005      	b.n	8004648 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800463c:	2203      	movs	r2, #3
 800463e:	2100      	movs	r1, #0
 8004640:	2001      	movs	r0, #1
 8004642:	f000 fbee 	bl	8004e22 <xQueueGenericCreate>
 8004646:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d022      	beq.n	8004694 <osSemaphoreNew+0xe8>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01f      	beq.n	8004694 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004654:	2300      	movs	r3, #0
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	69f8      	ldr	r0, [r7, #28]
 800465c:	f000 fcae 	bl	8004fbc <xQueueGenericSend>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d016      	beq.n	8004694 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004666:	69f8      	ldr	r0, [r7, #28]
 8004668:	f001 f989 	bl	800597e <vQueueDelete>
            hSemaphore = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e010      	b.n	8004694 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d108      	bne.n	800468a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	461a      	mov	r2, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fc2c 	bl	8004ede <xQueueCreateCountingSemaphoreStatic>
 8004686:	61f8      	str	r0, [r7, #28]
 8004688:	e004      	b.n	8004694 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fc5f 	bl	8004f50 <xQueueCreateCountingSemaphore>
 8004692:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00c      	beq.n	80046b4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e001      	b.n	80046ac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	69f8      	ldr	r0, [r7, #28]
 80046b0:	f001 fab0 	bl	8005c14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80046b4:	69fb      	ldr	r3, [r7, #28]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80046d8:	f06f 0303 	mvn.w	r3, #3
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e039      	b.n	8004754 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e0:	f3ef 8305 	mrs	r3, IPSR
 80046e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80046e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80046f2:	f06f 0303 	mvn.w	r3, #3
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e02c      	b.n	8004754 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	461a      	mov	r2, r3
 8004704:	2100      	movs	r1, #0
 8004706:	6938      	ldr	r0, [r7, #16]
 8004708:	f001 f87a 	bl	8005800 <xQueueReceiveFromISR>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d003      	beq.n	800471a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004712:	f06f 0302 	mvn.w	r3, #2
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e01c      	b.n	8004754 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d019      	beq.n	8004754 <osSemaphoreAcquire+0x94>
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <osSemaphoreAcquire+0xa0>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	e010      	b.n	8004754 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	6938      	ldr	r0, [r7, #16]
 8004736:	f000 ff53 	bl	80055e0 <xQueueSemaphoreTake>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d009      	beq.n	8004754 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004746:	f06f 0301 	mvn.w	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e002      	b.n	8004754 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800474e:	f06f 0302 	mvn.w	r3, #2
 8004752:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004754:	697b      	ldr	r3, [r7, #20]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800477a:	f06f 0303 	mvn.w	r3, #3
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e02c      	b.n	80047dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004782:	f3ef 8305 	mrs	r3, IPSR
 8004786:	60fb      	str	r3, [r7, #12]
  return(result);
 8004788:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01a      	beq.n	80047c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4619      	mov	r1, r3
 8004798:	6938      	ldr	r0, [r7, #16]
 800479a:	f000 fdaf 	bl	80052fc <xQueueGiveFromISR>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d003      	beq.n	80047ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80047a4:	f06f 0302 	mvn.w	r3, #2
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e017      	b.n	80047dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d014      	beq.n	80047dc <osSemaphoreRelease+0x78>
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <osSemaphoreRelease+0x84>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	e00b      	b.n	80047dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80047c4:	2300      	movs	r3, #0
 80047c6:	2200      	movs	r2, #0
 80047c8:	2100      	movs	r1, #0
 80047ca:	6938      	ldr	r0, [r7, #16]
 80047cc:	f000 fbf6 	bl	8004fbc <xQueueGenericSend>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d002      	beq.n	80047dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80047d6:	f06f 0302 	mvn.w	r3, #2
 80047da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80047dc:	697b      	ldr	r3, [r7, #20]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fc:	f3ef 8305 	mrs	r3, IPSR
 8004800:	613b      	str	r3, [r7, #16]
  return(result);
 8004802:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004804:	2b00      	cmp	r3, #0
 8004806:	d15f      	bne.n	80048c8 <osMessageQueueNew+0xdc>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d05c      	beq.n	80048c8 <osMessageQueueNew+0xdc>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d059      	beq.n	80048c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d029      	beq.n	8004874 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d012      	beq.n	800484e <osMessageQueueNew+0x62>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b4f      	cmp	r3, #79	@ 0x4f
 800482e:	d90e      	bls.n	800484e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	429a      	cmp	r2, r3
 8004846:	d302      	bcc.n	800484e <osMessageQueueNew+0x62>
        mem = 1;
 8004848:	2301      	movs	r3, #1
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e014      	b.n	8004878 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d110      	bne.n	8004878 <osMessageQueueNew+0x8c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10c      	bne.n	8004878 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <osMessageQueueNew+0x8c>
          mem = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e001      	b.n	8004878 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10b      	bne.n	8004896 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2100      	movs	r1, #0
 8004888:	9100      	str	r1, [sp, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fa4b 	bl	8004d28 <xQueueGenericCreateStatic>
 8004892:	61f8      	str	r0, [r7, #28]
 8004894:	e008      	b.n	80048a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800489c:	2200      	movs	r2, #0
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fabe 	bl	8004e22 <xQueueGenericCreate>
 80048a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e001      	b.n	80048c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	69f8      	ldr	r0, [r7, #28]
 80048c4:	f001 f9a6 	bl	8005c14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80048c8:	69fb      	ldr	r3, [r7, #28]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ec:	f3ef 8305 	mrs	r3, IPSR
 80048f0:	617b      	str	r3, [r7, #20]
  return(result);
 80048f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d028      	beq.n	800494a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <osMessageQueuePut+0x36>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <osMessageQueuePut+0x36>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800490a:	f06f 0303 	mvn.w	r3, #3
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e038      	b.n	8004984 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004916:	f107 0210 	add.w	r2, r7, #16
 800491a:	2300      	movs	r3, #0
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	69b8      	ldr	r0, [r7, #24]
 8004920:	f000 fc4e 	bl	80051c0 <xQueueGenericSendFromISR>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d003      	beq.n	8004932 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800492a:	f06f 0302 	mvn.w	r3, #2
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	e028      	b.n	8004984 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d025      	beq.n	8004984 <osMessageQueuePut+0xb0>
 8004938:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <osMessageQueuePut+0xbc>)
 800493a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	e01c      	b.n	8004984 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <osMessageQueuePut+0x82>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004956:	f06f 0303 	mvn.w	r3, #3
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e012      	b.n	8004984 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800495e:	2300      	movs	r3, #0
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	69b8      	ldr	r0, [r7, #24]
 8004966:	f000 fb29 	bl	8004fbc <xQueueGenericSend>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d009      	beq.n	8004984 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004976:	f06f 0301 	mvn.w	r3, #1
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	e002      	b.n	8004984 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800497e:	f06f 0302 	mvn.w	r3, #2
 8004982:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004984:	69fb      	ldr	r3, [r7, #28]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049aa:	f3ef 8305 	mrs	r3, IPSR
 80049ae:	617b      	str	r3, [r7, #20]
  return(result);
 80049b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <osMessageQueueGet+0x34>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <osMessageQueueGet+0x34>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80049c8:	f06f 0303 	mvn.w	r3, #3
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e037      	b.n	8004a40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	461a      	mov	r2, r3
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	69b8      	ldr	r0, [r7, #24]
 80049de:	f000 ff0f 	bl	8005800 <xQueueReceiveFromISR>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d003      	beq.n	80049f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80049e8:	f06f 0302 	mvn.w	r3, #2
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e027      	b.n	8004a40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d024      	beq.n	8004a40 <osMessageQueueGet+0xac>
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <osMessageQueueGet+0xb8>)
 80049f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	e01b      	b.n	8004a40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <osMessageQueueGet+0x80>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004a14:	f06f 0303 	mvn.w	r3, #3
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e011      	b.n	8004a40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	69b8      	ldr	r0, [r7, #24]
 8004a22:	f000 fcfb 	bl	800541c <xQueueReceive>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d009      	beq.n	8004a40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004a32:	f06f 0301 	mvn.w	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e002      	b.n	8004a40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004a3a:	f06f 0302 	mvn.w	r3, #2
 8004a3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a40:	69fb      	ldr	r3, [r7, #28]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <osMessageQueueGetCount+0x18>
    count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e00e      	b.n	8004a86 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a68:	f3ef 8305 	mrs	r3, IPSR
 8004a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004a74:	6938      	ldr	r0, [r7, #16]
 8004a76:	f000 ff64 	bl	8005942 <uxQueueMessagesWaitingFromISR>
 8004a7a:	6178      	str	r0, [r7, #20]
 8004a7c:	e003      	b.n	8004a86 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004a7e:	6938      	ldr	r0, [r7, #16]
 8004a80:	f000 ff40 	bl	8005904 <uxQueueMessagesWaiting>
 8004a84:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8004a86:	697b      	ldr	r3, [r7, #20]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a06      	ldr	r2, [pc, #24]	@ (8004ab8 <vApplicationGetIdleTaskMemory+0x28>)
 8004aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a05      	ldr	r2, [pc, #20]	@ (8004abc <vApplicationGetIdleTaskMemory+0x2c>)
 8004aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2280      	movs	r2, #128	@ 0x80
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000434 	.word	0x20000434
 8004abc:	200004dc 	.word	0x200004dc

08004ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a07      	ldr	r2, [pc, #28]	@ (8004aec <vApplicationGetTimerTaskMemory+0x2c>)
 8004ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a06      	ldr	r2, [pc, #24]	@ (8004af0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	200006dc 	.word	0x200006dc
 8004af0:	20000784 	.word	0x20000784

08004af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f103 0208 	add.w	r2, r3, #8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f103 0208 	add.w	r2, r3, #8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f103 0208 	add.w	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d103      	bne.n	8004bb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e00c      	b.n	8004bca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e002      	b.n	8004bbe <vListInsert+0x2e>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d2f6      	bcs.n	8004bb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6892      	ldr	r2, [r2, #8]
 8004c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6852      	ldr	r2, [r2, #4]
 8004c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d103      	bne.n	8004c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	1e5a      	subs	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
	...

08004c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c80:	f002 fc94 	bl	80075ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8c:	68f9      	ldr	r1, [r7, #12]
 8004c8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	441a      	add	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	441a      	add	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	22ff      	movs	r2, #255	@ 0xff
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	22ff      	movs	r2, #255	@ 0xff
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d114      	bne.n	8004d00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01a      	beq.n	8004d14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fc74 	bl	80065d0 <xTaskRemoveFromEventList>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004cee:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <xQueueGenericReset+0xd0>)
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	e009      	b.n	8004d14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3310      	adds	r3, #16
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fef5 	bl	8004af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3324      	adds	r3, #36	@ 0x24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fef0 	bl	8004af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d14:	f002 fc7a 	bl	800760c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d18:	2301      	movs	r3, #1
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08e      	sub	sp, #56	@ 0x38
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <xQueueGenericCreateStatic+0x56>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <xQueueGenericCreateStatic+0x5a>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <xQueueGenericCreateStatic+0x5c>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <xQueueGenericCreateStatic+0x84>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <xQueueGenericCreateStatic+0x88>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueGenericCreateStatic+0x8a>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61fb      	str	r3, [r7, #28]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dce:	2350      	movs	r3, #80	@ 0x50
 8004dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b50      	cmp	r3, #80	@ 0x50
 8004dd6:	d00b      	beq.n	8004df0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004df0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f840 	bl	8004e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3730      	adds	r7, #48	@ 0x30
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b08a      	sub	sp, #40	@ 0x28
 8004e26:	af02      	add	r7, sp, #8
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	613b      	str	r3, [r7, #16]
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3350      	adds	r3, #80	@ 0x50
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f002 fca7 	bl	80077b0 <pvPortMalloc>
 8004e62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3350      	adds	r3, #80	@ 0x50
 8004e72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e7c:	79fa      	ldrb	r2, [r7, #7]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f805 	bl	8004e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	69b8      	ldr	r0, [r7, #24]
 8004eca:	f7ff fec3 	bl	8004c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	@ 0x28
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61bb      	str	r3, [r7, #24]
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d90b      	bls.n	8004f28 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	617b      	str	r3, [r7, #20]
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f28:	2302      	movs	r3, #2
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2100      	movs	r1, #0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fef8 	bl	8004d28 <xQueueGenericCreateStatic>
 8004f38:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f46:	69fb      	ldr	r3, [r7, #28]
	}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d90b      	bls.n	8004f98 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f98:	2202      	movs	r2, #2
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff40 	bl	8004e22 <xQueueGenericCreate>
 8004fa2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fb0:	697b      	ldr	r3, [r7, #20]
	}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	@ 0x38
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueGenericSend+0x34>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSend+0x42>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <xQueueGenericSend+0x46>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueGenericSend+0x48>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xQueueGenericSend+0x64>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d103      	bne.n	800502e <xQueueGenericSend+0x72>
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <xQueueGenericSend+0x76>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <xQueueGenericSend+0x78>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <xQueueGenericSend+0x94>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	623b      	str	r3, [r7, #32]
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005050:	f001 fc84 	bl	800695c <xTaskGetSchedulerState>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <xQueueGenericSend+0xa4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <xQueueGenericSend+0xa8>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <xQueueGenericSend+0xaa>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <xQueueGenericSend+0xc6>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	61fb      	str	r3, [r7, #28]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005082:	f002 fa93 	bl	80075ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508e:	429a      	cmp	r2, r3
 8005090:	d302      	bcc.n	8005098 <xQueueGenericSend+0xdc>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d129      	bne.n	80050ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800509e:	f000 fca9 	bl	80059f4 <prvCopyDataToQueue>
 80050a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	3324      	adds	r3, #36	@ 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fa8d 	bl	80065d0 <xTaskRemoveFromEventList>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050bc:	4b3f      	ldr	r3, [pc, #252]	@ (80051bc <xQueueGenericSend+0x200>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	e00a      	b.n	80050e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050d4:	4b39      	ldr	r3, [pc, #228]	@ (80051bc <xQueueGenericSend+0x200>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050e4:	f002 fa92 	bl	800760c <vPortExitCritical>
				return pdPASS;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e063      	b.n	80051b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050f2:	f002 fa8b 	bl	800760c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e05c      	b.n	80051b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fac7 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800510a:	2301      	movs	r3, #1
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800510e:	f002 fa7d 	bl	800760c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005112:	f001 f833 	bl	800617c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005116:	f002 fa49 	bl	80075ac <vPortEnterCritical>
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005120:	b25b      	sxtb	r3, r3
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d103      	bne.n	8005130 <xQueueGenericSend+0x174>
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005136:	b25b      	sxtb	r3, r3
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d103      	bne.n	8005146 <xQueueGenericSend+0x18a>
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005146:	f002 fa61 	bl	800760c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800514a:	1d3a      	adds	r2, r7, #4
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fab6 	bl	80066c4 <xTaskCheckForTimeOut>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d124      	bne.n	80051a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800515e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005160:	f000 fd40 	bl	8005be4 <prvIsQueueFull>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	3310      	adds	r3, #16
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f9da 	bl	800652c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800517a:	f000 fccb 	bl	8005b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800517e:	f001 f80b 	bl	8006198 <xTaskResumeAll>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	f47f af7c 	bne.w	8005082 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800518a:	4b0c      	ldr	r3, [pc, #48]	@ (80051bc <xQueueGenericSend+0x200>)
 800518c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	e772      	b.n	8005082 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800519c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800519e:	f000 fcb9 	bl	8005b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051a2:	f000 fff9 	bl	8006198 <xTaskResumeAll>
 80051a6:	e76c      	b.n	8005082 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051aa:	f000 fcb3 	bl	8005b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ae:	f000 fff3 	bl	8006198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3738      	adds	r7, #56	@ 0x38
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b090      	sub	sp, #64	@ 0x40
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <xQueueGenericSendFromISR+0x3e>
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <xQueueGenericSendFromISR+0x42>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <xQueueGenericSendFromISR+0x44>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d103      	bne.n	800522e <xQueueGenericSendFromISR+0x6e>
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <xQueueGenericSendFromISR+0x72>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <xQueueGenericSendFromISR+0x74>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	623b      	str	r3, [r7, #32]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005250:	f002 fa6e 	bl	8007730 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005254:	f3ef 8211 	mrs	r2, BASEPRI
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	61fa      	str	r2, [r7, #28]
 800526a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800526c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <xQueueGenericSendFromISR+0xc2>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d12f      	bne.n	80052e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005298:	f000 fbac 	bl	80059f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800529c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d112      	bne.n	80052cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	3324      	adds	r3, #36	@ 0x24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f98c 	bl	80065d0 <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00e      	beq.n	80052dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e007      	b.n	80052dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052d0:	3301      	adds	r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	b25a      	sxtb	r2, r3
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052dc:	2301      	movs	r3, #1
 80052de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052e0:	e001      	b.n	80052e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3740      	adds	r7, #64	@ 0x40
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08e      	sub	sp, #56	@ 0x38
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	623b      	str	r3, [r7, #32]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	61fb      	str	r3, [r7, #28]
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <xQueueGiveFromISR+0x5c>
 8005350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <xQueueGiveFromISR+0x60>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <xQueueGiveFromISR+0x62>
 800535c:	2300      	movs	r3, #0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	61bb      	str	r3, [r7, #24]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800537a:	f002 f9d9 	bl	8007730 <vPortValidateInterruptPriority>
	__asm volatile
 800537e:	f3ef 8211 	mrs	r2, BASEPRI
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	617a      	str	r2, [r7, #20]
 8005394:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005396:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d22b      	bcs.n	8005402 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d112      	bne.n	80053ec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	3324      	adds	r3, #36	@ 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 f8fc 	bl	80065d0 <xTaskRemoveFromEventList>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e007      	b.n	80053fc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053f0:	3301      	adds	r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	b25a      	sxtb	r2, r3
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053fc:	2301      	movs	r3, #1
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005400:	e001      	b.n	8005406 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005402:	2300      	movs	r3, #0
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f383 8811 	msr	BASEPRI, r3
}
 8005410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005414:	4618      	mov	r0, r3
 8005416:	3738      	adds	r7, #56	@ 0x38
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	@ 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <xQueueReceive+0x32>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	623b      	str	r3, [r7, #32]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <xQueueReceive+0x40>
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <xQueueReceive+0x44>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <xQueueReceive+0x46>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <xQueueReceive+0x62>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	61fb      	str	r3, [r7, #28]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800547e:	f001 fa6d 	bl	800695c <xTaskGetSchedulerState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <xQueueReceive+0x72>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <xQueueReceive+0x76>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueReceive+0x78>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <xQueueReceive+0x94>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61bb      	str	r3, [r7, #24]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b0:	f002 f87c 	bl	80075ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01f      	beq.n	8005500 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c4:	f000 fb00 	bl	8005ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 f877 	bl	80065d0 <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <xQueueReceive+0x1c0>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054f8:	f002 f888 	bl	800760c <vPortExitCritical>
				return pdPASS;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e069      	b.n	80055d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005506:	f002 f881 	bl	800760c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800550a:	2300      	movs	r3, #0
 800550c:	e062      	b.n	80055d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f001 f8bd 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005522:	f002 f873 	bl	800760c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005526:	f000 fe29 	bl	800617c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800552a:	f002 f83f 	bl	80075ac <vPortEnterCritical>
 800552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005534:	b25b      	sxtb	r3, r3
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d103      	bne.n	8005544 <xQueueReceive+0x128>
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554a:	b25b      	sxtb	r3, r3
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d103      	bne.n	800555a <xQueueReceive+0x13e>
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555a:	f002 f857 	bl	800760c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800555e:	1d3a      	adds	r2, r7, #4
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f001 f8ac 	bl	80066c4 <xTaskCheckForTimeOut>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d123      	bne.n	80055ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005574:	f000 fb20 	bl	8005bb8 <prvIsQueueEmpty>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	3324      	adds	r3, #36	@ 0x24
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f000 ffd0 	bl	800652c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800558c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558e:	f000 fac1 	bl	8005b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005592:	f000 fe01 	bl	8006198 <xTaskResumeAll>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d189      	bne.n	80054b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <xQueueReceive+0x1c0>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	e780      	b.n	80054b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055b0:	f000 fab0 	bl	8005b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b4:	f000 fdf0 	bl	8006198 <xTaskResumeAll>
 80055b8:	e77a      	b.n	80054b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055bc:	f000 faaa 	bl	8005b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055c0:	f000 fdea 	bl	8006198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c6:	f000 faf7 	bl	8005bb8 <prvIsQueueEmpty>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f43f af6f 	beq.w	80054b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3730      	adds	r7, #48	@ 0x30
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08e      	sub	sp, #56	@ 0x38
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	623b      	str	r3, [r7, #32]
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61fb      	str	r3, [r7, #28]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005634:	f001 f992 	bl	800695c <xTaskGetSchedulerState>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <xQueueSemaphoreTake+0x64>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <xQueueSemaphoreTake+0x68>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <xQueueSemaphoreTake+0x6a>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	61bb      	str	r3, [r7, #24]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005666:	f001 ffa1 	bl	80075ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d024      	beq.n	80056c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005686:	f001 fae3 	bl	8006c50 <pvTaskIncrementMutexHeldCount>
 800568a:	4602      	mov	r2, r0
 800568c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00f      	beq.n	80056b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	3310      	adds	r3, #16
 800569c:	4618      	mov	r0, r3
 800569e:	f000 ff97 	bl	80065d0 <xTaskRemoveFromEventList>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056a8:	4b54      	ldr	r3, [pc, #336]	@ (80057fc <xQueueSemaphoreTake+0x21c>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056b8:	f001 ffa8 	bl	800760c <vPortExitCritical>
				return pdPASS;
 80056bc:	2301      	movs	r3, #1
 80056be:	e098      	b.n	80057f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d112      	bne.n	80056ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	617b      	str	r3, [r7, #20]
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056e4:	f001 ff92 	bl	800760c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e082      	b.n	80057f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ffce 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005700:	f001 ff84 	bl	800760c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005704:	f000 fd3a 	bl	800617c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005708:	f001 ff50 	bl	80075ac <vPortEnterCritical>
 800570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005712:	b25b      	sxtb	r3, r3
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d103      	bne.n	8005722 <xQueueSemaphoreTake+0x142>
 800571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005728:	b25b      	sxtb	r3, r3
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d103      	bne.n	8005738 <xQueueSemaphoreTake+0x158>
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005738:	f001 ff68 	bl	800760c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800573c:	463a      	mov	r2, r7
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f000 ffbd 	bl	80066c4 <xTaskCheckForTimeOut>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d132      	bne.n	80057b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005752:	f000 fa31 	bl	8005bb8 <prvIsQueueEmpty>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d026      	beq.n	80057aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005764:	f001 ff22 	bl	80075ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f001 f913 	bl	8006998 <xTaskPriorityInherit>
 8005772:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005774:	f001 ff4a 	bl	800760c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	3324      	adds	r3, #36	@ 0x24
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fed3 	bl	800652c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005788:	f000 f9c4 	bl	8005b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800578c:	f000 fd04 	bl	8006198 <xTaskResumeAll>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	f47f af67 	bne.w	8005666 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005798:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <xQueueSemaphoreTake+0x21c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	e75d      	b.n	8005666 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057ac:	f000 f9b2 	bl	8005b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057b0:	f000 fcf2 	bl	8006198 <xTaskResumeAll>
 80057b4:	e757      	b.n	8005666 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057b8:	f000 f9ac 	bl	8005b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057bc:	f000 fcec 	bl	8006198 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057c2:	f000 f9f9 	bl	8005bb8 <prvIsQueueEmpty>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f43f af4c 	beq.w	8005666 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80057d4:	f001 feea 	bl	80075ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80057d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057da:	f000 f8f4 	bl	80059c6 <prvGetDisinheritPriorityAfterTimeout>
 80057de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f9ae 	bl	8006b48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057ec:	f001 ff0e 	bl	800760c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3738      	adds	r7, #56	@ 0x38
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	@ 0x38
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	623b      	str	r3, [r7, #32]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <xQueueReceiveFromISR+0x3c>
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <xQueueReceiveFromISR+0x40>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <xQueueReceiveFromISR+0x42>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	61fb      	str	r3, [r7, #28]
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800585e:	f001 ff67 	bl	8007730 <vPortValidateInterruptPriority>
	__asm volatile
 8005862:	f3ef 8211 	mrs	r2, BASEPRI
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	61ba      	str	r2, [r7, #24]
 8005878:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800587a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d02f      	beq.n	80058ea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005898:	f000 f916 	bl	8005ac8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d112      	bne.n	80058d4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	3310      	adds	r3, #16
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fe88 	bl	80065d0 <xTaskRemoveFromEventList>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e007      	b.n	80058e4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80058d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058d8:	3301      	adds	r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	b25a      	sxtb	r2, r3
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80058e4:	2301      	movs	r3, #1
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e8:	e001      	b.n	80058ee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f383 8811 	msr	BASEPRI, r3
}
 80058f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3738      	adds	r7, #56	@ 0x38
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	60bb      	str	r3, [r7, #8]
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	e7fd      	b.n	8005926 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800592a:	f001 fe3f 	bl	80075ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005934:	f001 fe6a 	bl	800760c <vPortExitCritical>

	return uxReturn;
 8005938:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60fb      	str	r3, [r7, #12]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005972:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <vQueueDelete+0x2a>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60bb      	str	r3, [r7, #8]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f95b 	bl	8005c64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f001 ffc7 	bl	800794c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e001      	b.n	80059e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80059e8:	68fb      	ldr	r3, [r7, #12]
	}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d14d      	bne.n	8005ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f822 	bl	8006a68 <xTaskPriorityDisinherit>
 8005a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	e043      	b.n	8005ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d119      	bne.n	8005a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6858      	ldr	r0, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	f002 fa09 	bl	8007e56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	441a      	add	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d32b      	bcc.n	8005ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	e026      	b.n	8005ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68d8      	ldr	r0, [r3, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	461a      	mov	r2, r3
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	f002 f9ef 	bl	8007e56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	425b      	negs	r3, r3
 8005a82:	441a      	add	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d207      	bcs.n	8005aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	441a      	add	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d105      	bne.n	8005ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005abe:	697b      	ldr	r3, [r7, #20]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d018      	beq.n	8005b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	441a      	add	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d303      	bcc.n	8005afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68d9      	ldr	r1, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	461a      	mov	r2, r3
 8005b06:	6838      	ldr	r0, [r7, #0]
 8005b08:	f002 f9a5 	bl	8007e56 <memcpy>
	}
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b1c:	f001 fd46 	bl	80075ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b28:	e011      	b.n	8005b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d012      	beq.n	8005b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3324      	adds	r3, #36	@ 0x24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fd4a 	bl	80065d0 <xTaskRemoveFromEventList>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b42:	f000 fe23 	bl	800678c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	dce9      	bgt.n	8005b2a <prvUnlockQueue+0x16>
 8005b56:	e000      	b.n	8005b5a <prvUnlockQueue+0x46>
					break;
 8005b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	22ff      	movs	r2, #255	@ 0xff
 8005b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b62:	f001 fd53 	bl	800760c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b66:	f001 fd21 	bl	80075ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b72:	e011      	b.n	8005b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d012      	beq.n	8005ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3310      	adds	r3, #16
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fd25 	bl	80065d0 <xTaskRemoveFromEventList>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b8c:	f000 fdfe 	bl	800678c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dce9      	bgt.n	8005b74 <prvUnlockQueue+0x60>
 8005ba0:	e000      	b.n	8005ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	22ff      	movs	r2, #255	@ 0xff
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005bac:	f001 fd2e 	bl	800760c <vPortExitCritical>
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bc0:	f001 fcf4 	bl	80075ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e001      	b.n	8005bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bd6:	f001 fd19 	bl	800760c <vPortExitCritical>

	return xReturn;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bec:	f001 fcde 	bl	80075ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d102      	bne.n	8005c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e001      	b.n	8005c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c06:	f001 fd01 	bl	800760c <vPortExitCritical>

	return xReturn;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e014      	b.n	8005c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c24:	4a0e      	ldr	r2, [pc, #56]	@ (8005c60 <vQueueAddToRegistry+0x4c>)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c30:	490b      	ldr	r1, [pc, #44]	@ (8005c60 <vQueueAddToRegistry+0x4c>)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c3a:	4a09      	ldr	r2, [pc, #36]	@ (8005c60 <vQueueAddToRegistry+0x4c>)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c46:	e006      	b.n	8005c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d9e7      	bls.n	8005c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	20000b84 	.word	0x20000b84

08005c64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e016      	b.n	8005ca0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c72:	4a10      	ldr	r2, [pc, #64]	@ (8005cb4 <vQueueUnregisterQueue+0x50>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d10b      	bne.n	8005c9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005c82:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb4 <vQueueUnregisterQueue+0x50>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2100      	movs	r1, #0
 8005c88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005c8c:	4a09      	ldr	r2, [pc, #36]	@ (8005cb4 <vQueueUnregisterQueue+0x50>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4413      	add	r3, r2
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
				break;
 8005c98:	e006      	b.n	8005ca8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	d9e5      	bls.n	8005c72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000b84 	.word	0x20000b84

08005cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cc8:	f001 fc70 	bl	80075ac <vPortEnterCritical>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d103      	bne.n	8005ce2 <vQueueWaitForMessageRestricted+0x2a>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	d103      	bne.n	8005cf8 <vQueueWaitForMessageRestricted+0x40>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf8:	f001 fc88 	bl	800760c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3324      	adds	r3, #36	@ 0x24
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fc33 	bl	8006578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d12:	6978      	ldr	r0, [r7, #20]
 8005d14:	f7ff fefe 	bl	8005b14 <prvUnlockQueue>
	}
 8005d18:	bf00      	nop
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	@ 0x38
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	623b      	str	r3, [r7, #32]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	61fb      	str	r3, [r7, #28]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d6a:	23a8      	movs	r3, #168	@ 0xa8
 8005d6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2ba8      	cmp	r3, #168	@ 0xa8
 8005d72:	d00b      	beq.n	8005d8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	61bb      	str	r3, [r7, #24]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01e      	beq.n	8005dd2 <xTaskCreateStatic+0xb2>
 8005d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01b      	beq.n	8005dd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dac:	2300      	movs	r3, #0
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	9302      	str	r3, [sp, #8]
 8005db4:	f107 0314 	add.w	r3, r7, #20
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f851 	bl	8005e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dcc:	f000 f8f6 	bl	8005fbc <prvAddNewTaskToReadyList>
 8005dd0:	e001      	b.n	8005dd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	@ 0x30
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fcdb 	bl	80077b0 <pvPortMalloc>
 8005dfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e02:	20a8      	movs	r0, #168	@ 0xa8
 8005e04:	f001 fcd4 	bl	80077b0 <pvPortMalloc>
 8005e08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e16:	e005      	b.n	8005e24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e18:	6978      	ldr	r0, [r7, #20]
 8005e1a:	f001 fd97 	bl	800794c <vPortFree>
 8005e1e:	e001      	b.n	8005e24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d017      	beq.n	8005e5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f80f 	bl	8005e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e4e:	69f8      	ldr	r0, [r7, #28]
 8005e50:	f000 f8b4 	bl	8005fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e54:	2301      	movs	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	e002      	b.n	8005e60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e60:	69bb      	ldr	r3, [r7, #24]
	}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	461a      	mov	r2, r3
 8005e84:	21a5      	movs	r1, #165	@ 0xa5
 8005e86:	f001 ff29 	bl	8007cdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e94:	3b01      	subs	r3, #1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f023 0307 	bic.w	r3, r3, #7
 8005ea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01f      	beq.n	8005f0c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e012      	b.n	8005ef8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	7819      	ldrb	r1, [r3, #0]
 8005eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3334      	adds	r3, #52	@ 0x34
 8005ee2:	460a      	mov	r2, r1
 8005ee4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	d9e9      	bls.n	8005ed2 <prvInitialiseNewTask+0x66>
 8005efe:	e000      	b.n	8005f02 <prvInitialiseNewTask+0x96>
			{
				break;
 8005f00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f0a:	e003      	b.n	8005f14 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b37      	cmp	r3, #55	@ 0x37
 8005f18:	d901      	bls.n	8005f1e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f1a:	2337      	movs	r3, #55	@ 0x37
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	3304      	adds	r3, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fdfc 	bl	8004b32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fdf7 	bl	8004b32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	3354      	adds	r3, #84	@ 0x54
 8005f6e:	224c      	movs	r2, #76	@ 0x4c
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 feb2 	bl	8007cdc <memset>
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb0 <prvInitialiseNewTask+0x144>)
 8005f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <prvInitialiseNewTask+0x148>)
 8005f82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb8 <prvInitialiseNewTask+0x14c>)
 8005f88:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	69b8      	ldr	r0, [r7, #24]
 8005f90:	f001 fa1e 	bl	80073d0 <pxPortInitialiseStack>
 8005f94:	4602      	mov	r2, r0
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20003928 	.word	0x20003928
 8005fb4:	20003990 	.word	0x20003990
 8005fb8:	200039f8 	.word	0x200039f8

08005fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc4:	f001 faf2 	bl	80075ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a2c      	ldr	r2, [pc, #176]	@ (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fda:	4a2a      	ldr	r2, [pc, #168]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe0:	4b27      	ldr	r3, [pc, #156]	@ (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d110      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fe8:	f000 fbf4 	bl	80067d4 <prvInitialiseTaskLists>
 8005fec:	e00d      	b.n	800600a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fee:	4b26      	ldr	r3, [pc, #152]	@ (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ff6:	4b23      	ldr	r3, [pc, #140]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d802      	bhi.n	800600a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006004:	4a1f      	ldr	r2, [pc, #124]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <prvAddNewTaskToReadyList+0xd0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006014:	4b1d      	ldr	r3, [pc, #116]	@ (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006020:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <prvAddNewTaskToReadyList+0xd4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <prvAddNewTaskToReadyList+0x74>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <prvAddNewTaskToReadyList+0xd4>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a15      	ldr	r2, [pc, #84]	@ (8006094 <prvAddNewTaskToReadyList+0xd8>)
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7fe fd7f 	bl	8004b4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800604c:	f001 fade 	bl	800760c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006050:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006058:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	429a      	cmp	r2, r3
 8006064:	d207      	bcs.n	8006076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006066:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <prvAddNewTaskToReadyList+0xdc>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20001098 	.word	0x20001098
 8006084:	20000bc4 	.word	0x20000bc4
 8006088:	200010a4 	.word	0x200010a4
 800608c:	200010b4 	.word	0x200010b4
 8006090:	200010a0 	.word	0x200010a0
 8006094:	20000bc8 	.word	0x20000bc8
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	@ 0x28
 80060a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060aa:	463a      	mov	r2, r7
 80060ac:	1d39      	adds	r1, r7, #4
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fcec 	bl	8004a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	9202      	str	r2, [sp, #8]
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	2300      	movs	r3, #0
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	460a      	mov	r2, r1
 80060ca:	4924      	ldr	r1, [pc, #144]	@ (800615c <vTaskStartScheduler+0xc0>)
 80060cc:	4824      	ldr	r0, [pc, #144]	@ (8006160 <vTaskStartScheduler+0xc4>)
 80060ce:	f7ff fe27 	bl	8005d20 <xTaskCreateStatic>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4a23      	ldr	r2, [pc, #140]	@ (8006164 <vTaskStartScheduler+0xc8>)
 80060d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060d8:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <vTaskStartScheduler+0xc8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060e0:	2301      	movs	r3, #1
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	e001      	b.n	80060ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d102      	bne.n	80060f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060f0:	f000 fe16 	bl	8006d20 <xTimerCreateTimerTask>
 80060f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d11b      	bne.n	8006134 <vTaskStartScheduler+0x98>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	613b      	str	r3, [r7, #16]
}
 800610e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006110:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <vTaskStartScheduler+0xcc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3354      	adds	r3, #84	@ 0x54
 8006116:	4a15      	ldr	r2, [pc, #84]	@ (800616c <vTaskStartScheduler+0xd0>)
 8006118:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800611a:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <vTaskStartScheduler+0xd4>)
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006122:	4b14      	ldr	r3, [pc, #80]	@ (8006174 <vTaskStartScheduler+0xd8>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006128:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <vTaskStartScheduler+0xdc>)
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800612e:	f001 f9cb 	bl	80074c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006132:	e00f      	b.n	8006154 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d10b      	bne.n	8006154 <vTaskStartScheduler+0xb8>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <vTaskStartScheduler+0xb4>
}
 8006154:	bf00      	nop
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	080087e4 	.word	0x080087e4
 8006160:	080067a5 	.word	0x080067a5
 8006164:	200010bc 	.word	0x200010bc
 8006168:	20000bc4 	.word	0x20000bc4
 800616c:	2000006c 	.word	0x2000006c
 8006170:	200010b8 	.word	0x200010b8
 8006174:	200010a4 	.word	0x200010a4
 8006178:	2000109c 	.word	0x2000109c

0800617c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006180:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <vTaskSuspendAll+0x18>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3301      	adds	r3, #1
 8006186:	4a03      	ldr	r2, [pc, #12]	@ (8006194 <vTaskSuspendAll+0x18>)
 8006188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800618a:	bf00      	nop
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	200010c0 	.word	0x200010c0

08006198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061a6:	4b42      	ldr	r3, [pc, #264]	@ (80062b0 <xTaskResumeAll+0x118>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	603b      	str	r3, [r7, #0]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061c6:	f001 f9f1 	bl	80075ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061ca:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <xTaskResumeAll+0x118>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	4a37      	ldr	r2, [pc, #220]	@ (80062b0 <xTaskResumeAll+0x118>)
 80061d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061d4:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <xTaskResumeAll+0x118>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d162      	bne.n	80062a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061dc:	4b35      	ldr	r3, [pc, #212]	@ (80062b4 <xTaskResumeAll+0x11c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d05e      	beq.n	80062a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061e4:	e02f      	b.n	8006246 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e6:	4b34      	ldr	r3, [pc, #208]	@ (80062b8 <xTaskResumeAll+0x120>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3318      	adds	r3, #24
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fd04 	bl	8004c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fcff 	bl	8004c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	4b2d      	ldr	r3, [pc, #180]	@ (80062bc <xTaskResumeAll+0x124>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d903      	bls.n	8006216 <xTaskResumeAll+0x7e>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	4a2a      	ldr	r2, [pc, #168]	@ (80062bc <xTaskResumeAll+0x124>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4a27      	ldr	r2, [pc, #156]	@ (80062c0 <xTaskResumeAll+0x128>)
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7fe fc8c 	bl	8004b4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006236:	4b23      	ldr	r3, [pc, #140]	@ (80062c4 <xTaskResumeAll+0x12c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006240:	4b21      	ldr	r3, [pc, #132]	@ (80062c8 <xTaskResumeAll+0x130>)
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006246:	4b1c      	ldr	r3, [pc, #112]	@ (80062b8 <xTaskResumeAll+0x120>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1cb      	bne.n	80061e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006254:	f000 fb62 	bl	800691c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006258:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <xTaskResumeAll+0x134>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d010      	beq.n	8006286 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006264:	f000 f844 	bl	80062f0 <xTaskIncrementTick>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800626e:	4b16      	ldr	r3, [pc, #88]	@ (80062c8 <xTaskResumeAll+0x130>)
 8006270:	2201      	movs	r2, #1
 8006272:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f1      	bne.n	8006264 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006280:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <xTaskResumeAll+0x134>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006286:	4b10      	ldr	r3, [pc, #64]	@ (80062c8 <xTaskResumeAll+0x130>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006292:	4b0f      	ldr	r3, [pc, #60]	@ (80062d0 <xTaskResumeAll+0x138>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062a2:	f001 f9b3 	bl	800760c <vPortExitCritical>

	return xAlreadyYielded;
 80062a6:	68bb      	ldr	r3, [r7, #8]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	200010c0 	.word	0x200010c0
 80062b4:	20001098 	.word	0x20001098
 80062b8:	20001058 	.word	0x20001058
 80062bc:	200010a0 	.word	0x200010a0
 80062c0:	20000bc8 	.word	0x20000bc8
 80062c4:	20000bc4 	.word	0x20000bc4
 80062c8:	200010ac 	.word	0x200010ac
 80062cc:	200010a8 	.word	0x200010a8
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062da:	4b04      	ldr	r3, [pc, #16]	@ (80062ec <xTaskGetTickCount+0x18>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062e0:	687b      	ldr	r3, [r7, #4]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	2000109c 	.word	0x2000109c

080062f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006438 <xTaskIncrementTick+0x148>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 8090 	bne.w	8006424 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006304:	4b4d      	ldr	r3, [pc, #308]	@ (800643c <xTaskIncrementTick+0x14c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800630c:	4a4b      	ldr	r2, [pc, #300]	@ (800643c <xTaskIncrementTick+0x14c>)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d121      	bne.n	800635c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006318:	4b49      	ldr	r3, [pc, #292]	@ (8006440 <xTaskIncrementTick+0x150>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	603b      	str	r3, [r7, #0]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <xTaskIncrementTick+0x46>
 800633a:	4b41      	ldr	r3, [pc, #260]	@ (8006440 <xTaskIncrementTick+0x150>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	4b40      	ldr	r3, [pc, #256]	@ (8006444 <xTaskIncrementTick+0x154>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a3e      	ldr	r2, [pc, #248]	@ (8006440 <xTaskIncrementTick+0x150>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4a3e      	ldr	r2, [pc, #248]	@ (8006444 <xTaskIncrementTick+0x154>)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4b3e      	ldr	r3, [pc, #248]	@ (8006448 <xTaskIncrementTick+0x158>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a3c      	ldr	r2, [pc, #240]	@ (8006448 <xTaskIncrementTick+0x158>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	f000 fae0 	bl	800691c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800635c:	4b3b      	ldr	r3, [pc, #236]	@ (800644c <xTaskIncrementTick+0x15c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	429a      	cmp	r2, r3
 8006364:	d349      	bcc.n	80063fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006366:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <xTaskIncrementTick+0x150>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006370:	4b36      	ldr	r3, [pc, #216]	@ (800644c <xTaskIncrementTick+0x15c>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	601a      	str	r2, [r3, #0]
					break;
 8006378:	e03f      	b.n	80063fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	4b31      	ldr	r3, [pc, #196]	@ (8006440 <xTaskIncrementTick+0x150>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d203      	bcs.n	800639a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006392:	4a2e      	ldr	r2, [pc, #184]	@ (800644c <xTaskIncrementTick+0x15c>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006398:	e02f      	b.n	80063fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fc2e 	bl	8004c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3318      	adds	r3, #24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe fc25 	bl	8004c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ba:	4b25      	ldr	r3, [pc, #148]	@ (8006450 <xTaskIncrementTick+0x160>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d903      	bls.n	80063ca <xTaskIncrementTick+0xda>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c6:	4a22      	ldr	r2, [pc, #136]	@ (8006450 <xTaskIncrementTick+0x160>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006454 <xTaskIncrementTick+0x164>)
 80063d8:	441a      	add	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	3304      	adds	r3, #4
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7fe fbb2 	bl	8004b4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006458 <xTaskIncrementTick+0x168>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d3b8      	bcc.n	8006366 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063f4:	2301      	movs	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f8:	e7b5      	b.n	8006366 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063fa:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <xTaskIncrementTick+0x168>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006400:	4914      	ldr	r1, [pc, #80]	@ (8006454 <xTaskIncrementTick+0x164>)
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d901      	bls.n	8006416 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006412:	2301      	movs	r3, #1
 8006414:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006416:	4b11      	ldr	r3, [pc, #68]	@ (800645c <xTaskIncrementTick+0x16c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e004      	b.n	800642e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006424:	4b0e      	ldr	r3, [pc, #56]	@ (8006460 <xTaskIncrementTick+0x170>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a0d      	ldr	r2, [pc, #52]	@ (8006460 <xTaskIncrementTick+0x170>)
 800642c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800642e:	697b      	ldr	r3, [r7, #20]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	200010c0 	.word	0x200010c0
 800643c:	2000109c 	.word	0x2000109c
 8006440:	20001050 	.word	0x20001050
 8006444:	20001054 	.word	0x20001054
 8006448:	200010b0 	.word	0x200010b0
 800644c:	200010b8 	.word	0x200010b8
 8006450:	200010a0 	.word	0x200010a0
 8006454:	20000bc8 	.word	0x20000bc8
 8006458:	20000bc4 	.word	0x20000bc4
 800645c:	200010ac 	.word	0x200010ac
 8006460:	200010a8 	.word	0x200010a8

08006464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800646a:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <vTaskSwitchContext+0xb0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006472:	4b29      	ldr	r3, [pc, #164]	@ (8006518 <vTaskSwitchContext+0xb4>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006478:	e047      	b.n	800650a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800647a:	4b27      	ldr	r3, [pc, #156]	@ (8006518 <vTaskSwitchContext+0xb4>)
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006480:	4b26      	ldr	r3, [pc, #152]	@ (800651c <vTaskSwitchContext+0xb8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	e011      	b.n	80064ac <vTaskSwitchContext+0x48>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	607b      	str	r3, [r7, #4]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <vTaskSwitchContext+0x3e>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	491c      	ldr	r1, [pc, #112]	@ (8006520 <vTaskSwitchContext+0xbc>)
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0e3      	beq.n	8006488 <vTaskSwitchContext+0x24>
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a15      	ldr	r2, [pc, #84]	@ (8006520 <vTaskSwitchContext+0xbc>)
 80064cc:	4413      	add	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3308      	adds	r3, #8
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d104      	bne.n	80064f0 <vTaskSwitchContext+0x8c>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006524 <vTaskSwitchContext+0xc0>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4a08      	ldr	r2, [pc, #32]	@ (800651c <vTaskSwitchContext+0xb8>)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006500:	4b08      	ldr	r3, [pc, #32]	@ (8006524 <vTaskSwitchContext+0xc0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3354      	adds	r3, #84	@ 0x54
 8006506:	4a08      	ldr	r2, [pc, #32]	@ (8006528 <vTaskSwitchContext+0xc4>)
 8006508:	6013      	str	r3, [r2, #0]
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	200010c0 	.word	0x200010c0
 8006518:	200010ac 	.word	0x200010ac
 800651c:	200010a0 	.word	0x200010a0
 8006520:	20000bc8 	.word	0x20000bc8
 8006524:	20000bc4 	.word	0x20000bc4
 8006528:	2000006c 	.word	0x2000006c

0800652c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006554:	4b07      	ldr	r3, [pc, #28]	@ (8006574 <vTaskPlaceOnEventList+0x48>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3318      	adds	r3, #24
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fe fb17 	bl	8004b90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006562:	2101      	movs	r1, #1
 8006564:	6838      	ldr	r0, [r7, #0]
 8006566:	f000 fb87 	bl	8006c78 <prvAddCurrentTaskToDelayedList>
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000bc4 	.word	0x20000bc4

08006578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	617b      	str	r3, [r7, #20]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a2:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <vTaskPlaceOnEventListRestricted+0x54>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3318      	adds	r3, #24
 80065a8:	4619      	mov	r1, r3
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7fe facd 	bl	8004b4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80065b6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	68b8      	ldr	r0, [r7, #8]
 80065c0:	f000 fb5a 	bl	8006c78 <prvAddCurrentTaskToDelayedList>
	}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000bc4 	.word	0x20000bc4

080065d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10b      	bne.n	80065fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60fb      	str	r3, [r7, #12]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3318      	adds	r3, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fafc 	bl	8004c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006608:	4b1d      	ldr	r3, [pc, #116]	@ (8006680 <xTaskRemoveFromEventList+0xb0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe faf3 	bl	8004c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661e:	4b19      	ldr	r3, [pc, #100]	@ (8006684 <xTaskRemoveFromEventList+0xb4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <xTaskRemoveFromEventList+0x5e>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662a:	4a16      	ldr	r2, [pc, #88]	@ (8006684 <xTaskRemoveFromEventList+0xb4>)
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4a13      	ldr	r2, [pc, #76]	@ (8006688 <xTaskRemoveFromEventList+0xb8>)
 800663c:	441a      	add	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7fe fa80 	bl	8004b4a <vListInsertEnd>
 800664a:	e005      	b.n	8006658 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3318      	adds	r3, #24
 8006650:	4619      	mov	r1, r3
 8006652:	480e      	ldr	r0, [pc, #56]	@ (800668c <xTaskRemoveFromEventList+0xbc>)
 8006654:	f7fe fa79 	bl	8004b4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665c:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <xTaskRemoveFromEventList+0xc0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	429a      	cmp	r2, r3
 8006664:	d905      	bls.n	8006672 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006666:	2301      	movs	r3, #1
 8006668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800666a:	4b0a      	ldr	r3, [pc, #40]	@ (8006694 <xTaskRemoveFromEventList+0xc4>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e001      	b.n	8006676 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006676:	697b      	ldr	r3, [r7, #20]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	200010c0 	.word	0x200010c0
 8006684:	200010a0 	.word	0x200010a0
 8006688:	20000bc8 	.word	0x20000bc8
 800668c:	20001058 	.word	0x20001058
 8006690:	20000bc4 	.word	0x20000bc4
 8006694:	200010ac 	.word	0x200010ac

08006698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066a0:	4b06      	ldr	r3, [pc, #24]	@ (80066bc <vTaskInternalSetTimeOutState+0x24>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066a8:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <vTaskInternalSetTimeOutState+0x28>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	605a      	str	r2, [r3, #4]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	200010b0 	.word	0x200010b0
 80066c0:	2000109c 	.word	0x2000109c

080066c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	613b      	str	r3, [r7, #16]
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	e7fd      	b.n	80066e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800670a:	f000 ff4f 	bl	80075ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800670e:	4b1d      	ldr	r3, [pc, #116]	@ (8006784 <xTaskCheckForTimeOut+0xc0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d102      	bne.n	800672e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e023      	b.n	8006776 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	@ (8006788 <xTaskCheckForTimeOut+0xc4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d007      	beq.n	800674a <xTaskCheckForTimeOut+0x86>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	d302      	bcc.n	800674a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	e015      	b.n	8006776 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	429a      	cmp	r2, r3
 8006752:	d20b      	bcs.n	800676c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff99 	bl	8006698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	e004      	b.n	8006776 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006776:	f000 ff49 	bl	800760c <vPortExitCritical>

	return xReturn;
 800677a:	69fb      	ldr	r3, [r7, #28]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3720      	adds	r7, #32
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	2000109c 	.word	0x2000109c
 8006788:	200010b0 	.word	0x200010b0

0800678c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006790:	4b03      	ldr	r3, [pc, #12]	@ (80067a0 <vTaskMissedYield+0x14>)
 8006792:	2201      	movs	r2, #1
 8006794:	601a      	str	r2, [r3, #0]
}
 8006796:	bf00      	nop
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200010ac 	.word	0x200010ac

080067a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067ac:	f000 f852 	bl	8006854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067b0:	4b06      	ldr	r3, [pc, #24]	@ (80067cc <prvIdleTask+0x28>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d9f9      	bls.n	80067ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <prvIdleTask+0x2c>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067c8:	e7f0      	b.n	80067ac <prvIdleTask+0x8>
 80067ca:	bf00      	nop
 80067cc:	20000bc8 	.word	0x20000bc8
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	e00c      	b.n	80067fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4a12      	ldr	r2, [pc, #72]	@ (8006834 <prvInitialiseTaskLists+0x60>)
 80067ec:	4413      	add	r3, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe f980 	bl	8004af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b37      	cmp	r3, #55	@ 0x37
 80067fe:	d9ef      	bls.n	80067e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006800:	480d      	ldr	r0, [pc, #52]	@ (8006838 <prvInitialiseTaskLists+0x64>)
 8006802:	f7fe f977 	bl	8004af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006806:	480d      	ldr	r0, [pc, #52]	@ (800683c <prvInitialiseTaskLists+0x68>)
 8006808:	f7fe f974 	bl	8004af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800680c:	480c      	ldr	r0, [pc, #48]	@ (8006840 <prvInitialiseTaskLists+0x6c>)
 800680e:	f7fe f971 	bl	8004af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006812:	480c      	ldr	r0, [pc, #48]	@ (8006844 <prvInitialiseTaskLists+0x70>)
 8006814:	f7fe f96e 	bl	8004af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006818:	480b      	ldr	r0, [pc, #44]	@ (8006848 <prvInitialiseTaskLists+0x74>)
 800681a:	f7fe f96b 	bl	8004af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800681e:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <prvInitialiseTaskLists+0x78>)
 8006820:	4a05      	ldr	r2, [pc, #20]	@ (8006838 <prvInitialiseTaskLists+0x64>)
 8006822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006824:	4b0a      	ldr	r3, [pc, #40]	@ (8006850 <prvInitialiseTaskLists+0x7c>)
 8006826:	4a05      	ldr	r2, [pc, #20]	@ (800683c <prvInitialiseTaskLists+0x68>)
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000bc8 	.word	0x20000bc8
 8006838:	20001028 	.word	0x20001028
 800683c:	2000103c 	.word	0x2000103c
 8006840:	20001058 	.word	0x20001058
 8006844:	2000106c 	.word	0x2000106c
 8006848:	20001084 	.word	0x20001084
 800684c:	20001050 	.word	0x20001050
 8006850:	20001054 	.word	0x20001054

08006854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800685a:	e019      	b.n	8006890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800685c:	f000 fea6 	bl	80075ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006860:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <prvCheckTasksWaitingTermination+0x50>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe f9c7 	bl	8004c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3b01      	subs	r3, #1
 8006878:	4a0b      	ldr	r2, [pc, #44]	@ (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 800687a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800687c:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <prvCheckTasksWaitingTermination+0x58>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3b01      	subs	r3, #1
 8006882:	4a0a      	ldr	r2, [pc, #40]	@ (80068ac <prvCheckTasksWaitingTermination+0x58>)
 8006884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006886:	f000 fec1 	bl	800760c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f810 	bl	80068b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <prvCheckTasksWaitingTermination+0x58>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e1      	bne.n	800685c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	2000106c 	.word	0x2000106c
 80068a8:	20001098 	.word	0x20001098
 80068ac:	20001080 	.word	0x20001080

080068b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3354      	adds	r3, #84	@ 0x54
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 fa3b 	bl	8007d38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d108      	bne.n	80068de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f83b 	bl	800794c <vPortFree>
				vPortFree( pxTCB );
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 f838 	bl	800794c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068dc:	e019      	b.n	8006912 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d103      	bne.n	80068f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 f82f 	bl	800794c <vPortFree>
	}
 80068ee:	e010      	b.n	8006912 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d00b      	beq.n	8006912 <prvDeleteTCB+0x62>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	60fb      	str	r3, [r7, #12]
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	e7fd      	b.n	800690e <prvDeleteTCB+0x5e>
	}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006922:	4b0c      	ldr	r3, [pc, #48]	@ (8006954 <prvResetNextTaskUnblockTime+0x38>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800692c:	4b0a      	ldr	r3, [pc, #40]	@ (8006958 <prvResetNextTaskUnblockTime+0x3c>)
 800692e:	f04f 32ff 	mov.w	r2, #4294967295
 8006932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006934:	e008      	b.n	8006948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	4b07      	ldr	r3, [pc, #28]	@ (8006954 <prvResetNextTaskUnblockTime+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4a04      	ldr	r2, [pc, #16]	@ (8006958 <prvResetNextTaskUnblockTime+0x3c>)
 8006946:	6013      	str	r3, [r2, #0]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20001050 	.word	0x20001050
 8006958:	200010b8 	.word	0x200010b8

0800695c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006962:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <xTaskGetSchedulerState+0x34>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800696a:	2301      	movs	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	e008      	b.n	8006982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006970:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <xTaskGetSchedulerState+0x38>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006978:	2302      	movs	r3, #2
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e001      	b.n	8006982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800697e:	2300      	movs	r3, #0
 8006980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006982:	687b      	ldr	r3, [r7, #4]
	}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200010a4 	.word	0x200010a4
 8006994:	200010c0 	.word	0x200010c0

08006998 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d051      	beq.n	8006a52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a5c <xTaskPriorityInherit+0xc4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d241      	bcs.n	8006a40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	db06      	blt.n	80069d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c4:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <xTaskPriorityInherit+0xc4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6959      	ldr	r1, [r3, #20]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <xTaskPriorityInherit+0xc8>)
 80069e4:	4413      	add	r3, r2
 80069e6:	4299      	cmp	r1, r3
 80069e8:	d122      	bne.n	8006a30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe f906 	bl	8004c00 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069f4:	4b19      	ldr	r3, [pc, #100]	@ (8006a5c <xTaskPriorityInherit+0xc4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a02:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <xTaskPriorityInherit+0xcc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <xTaskPriorityInherit+0x7a>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <xTaskPriorityInherit+0xcc>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4a10      	ldr	r2, [pc, #64]	@ (8006a60 <xTaskPriorityInherit+0xc8>)
 8006a20:	441a      	add	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7fe f88e 	bl	8004b4a <vListInsertEnd>
 8006a2e:	e004      	b.n	8006a3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a30:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <xTaskPriorityInherit+0xc4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e008      	b.n	8006a52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a44:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <xTaskPriorityInherit+0xc4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d201      	bcs.n	8006a52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a52:	68fb      	ldr	r3, [r7, #12]
	}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000bc4 	.word	0x20000bc4
 8006a60:	20000bc8 	.word	0x20000bc8
 8006a64:	200010a0 	.word	0x200010a0

08006a68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d058      	beq.n	8006b30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b3c <xTaskPriorityDisinherit+0xd4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d00b      	beq.n	8006aa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60bb      	str	r3, [r7, #8]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d02c      	beq.n	8006b30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d128      	bne.n	8006b30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe f88c 	bl	8004c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b00:	4b0f      	ldr	r3, [pc, #60]	@ (8006b40 <xTaskPriorityDisinherit+0xd8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d903      	bls.n	8006b10 <xTaskPriorityDisinherit+0xa8>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b40 <xTaskPriorityDisinherit+0xd8>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a09      	ldr	r2, [pc, #36]	@ (8006b44 <xTaskPriorityDisinherit+0xdc>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe f80f 	bl	8004b4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b30:	697b      	ldr	r3, [r7, #20]
	}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000bc4 	.word	0x20000bc4
 8006b40:	200010a0 	.word	0x200010a0
 8006b44:	20000bc8 	.word	0x20000bc8

08006b48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b56:	2301      	movs	r3, #1
 8006b58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d06c      	beq.n	8006c3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	60fb      	str	r3, [r7, #12]
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d902      	bls.n	8006b90 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	e002      	b.n	8006b96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d04c      	beq.n	8006c3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d147      	bne.n	8006c3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006baa:	4b26      	ldr	r3, [pc, #152]	@ (8006c44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d10b      	bne.n	8006bcc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	60bb      	str	r3, [r7, #8]
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	db04      	blt.n	8006bea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	6959      	ldr	r1, [r3, #20]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4a13      	ldr	r2, [pc, #76]	@ (8006c48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bfa:	4413      	add	r3, r2
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	d11c      	bne.n	8006c3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fd fffb 	bl	8004c00 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d903      	bls.n	8006c1e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4a07      	ldr	r2, [pc, #28]	@ (8006c48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006c2c:	441a      	add	r2, r3
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	3304      	adds	r3, #4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7fd ff88 	bl	8004b4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c3a:	bf00      	nop
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000bc4 	.word	0x20000bc4
 8006c48:	20000bc8 	.word	0x20000bc8
 8006c4c:	200010a0 	.word	0x200010a0

08006c50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c54:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c5c:	4b05      	ldr	r3, [pc, #20]	@ (8006c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c62:	3201      	adds	r2, #1
 8006c64:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006c66:	4b03      	ldr	r3, [pc, #12]	@ (8006c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c68:	681b      	ldr	r3, [r3, #0]
	}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000bc4 	.word	0x20000bc4

08006c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c82:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c88:	4b20      	ldr	r3, [pc, #128]	@ (8006d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd ffb6 	bl	8004c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d10a      	bne.n	8006cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4819      	ldr	r0, [pc, #100]	@ (8006d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cac:	f7fd ff4d 	bl	8004b4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cb0:	e026      	b.n	8006d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cba:	4b14      	ldr	r3, [pc, #80]	@ (8006d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d209      	bcs.n	8006cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cca:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b0f      	ldr	r3, [pc, #60]	@ (8006d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f7fd ff5a 	bl	8004b90 <vListInsert>
}
 8006cdc:	e010      	b.n	8006d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cde:	4b0e      	ldr	r3, [pc, #56]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8006d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f7fd ff50 	bl	8004b90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d202      	bcs.n	8006d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cfa:	4a08      	ldr	r2, [pc, #32]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	6013      	str	r3, [r2, #0]
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	2000109c 	.word	0x2000109c
 8006d0c:	20000bc4 	.word	0x20000bc4
 8006d10:	20001084 	.word	0x20001084
 8006d14:	20001054 	.word	0x20001054
 8006d18:	20001050 	.word	0x20001050
 8006d1c:	200010b8 	.word	0x200010b8

08006d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	@ 0x28
 8006d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d2a:	f000 fb11 	bl	8007350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <xTimerCreateTimerTask+0x84>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d021      	beq.n	8006d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d3e:	1d3a      	adds	r2, r7, #4
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	f107 030c 	add.w	r3, r7, #12
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd feb9 	bl	8004ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	2302      	movs	r3, #2
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	460a      	mov	r2, r1
 8006d60:	4911      	ldr	r1, [pc, #68]	@ (8006da8 <xTimerCreateTimerTask+0x88>)
 8006d62:	4812      	ldr	r0, [pc, #72]	@ (8006dac <xTimerCreateTimerTask+0x8c>)
 8006d64:	f7fe ffdc 	bl	8005d20 <xTaskCreateStatic>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <xTimerCreateTimerTask+0x90>)
 8006d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d6e:	4b10      	ldr	r3, [pc, #64]	@ (8006db0 <xTimerCreateTimerTask+0x90>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d76:	2301      	movs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	613b      	str	r3, [r7, #16]
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	e7fd      	b.n	8006d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d98:	697b      	ldr	r3, [r7, #20]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	200010f4 	.word	0x200010f4
 8006da8:	080087ec 	.word	0x080087ec
 8006dac:	08006eed 	.word	0x08006eed
 8006db0:	200010f8 	.word	0x200010f8

08006db4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	@ 0x28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10b      	bne.n	8006de4 <xTimerGenericCommand+0x30>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	623b      	str	r3, [r7, #32]
}
 8006dde:	bf00      	nop
 8006de0:	bf00      	nop
 8006de2:	e7fd      	b.n	8006de0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006de4:	4b19      	ldr	r3, [pc, #100]	@ (8006e4c <xTimerGenericCommand+0x98>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02a      	beq.n	8006e42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	dc18      	bgt.n	8006e30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dfe:	f7ff fdad 	bl	800695c <xTaskGetSchedulerState>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d109      	bne.n	8006e1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e08:	4b10      	ldr	r3, [pc, #64]	@ (8006e4c <xTimerGenericCommand+0x98>)
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	f107 0110 	add.w	r1, r7, #16
 8006e10:	2300      	movs	r3, #0
 8006e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e14:	f7fe f8d2 	bl	8004fbc <xQueueGenericSend>
 8006e18:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e1a:	e012      	b.n	8006e42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <xTimerGenericCommand+0x98>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	f107 0110 	add.w	r1, r7, #16
 8006e24:	2300      	movs	r3, #0
 8006e26:	2200      	movs	r2, #0
 8006e28:	f7fe f8c8 	bl	8004fbc <xQueueGenericSend>
 8006e2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e2e:	e008      	b.n	8006e42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <xTimerGenericCommand+0x98>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	f107 0110 	add.w	r1, r7, #16
 8006e38:	2300      	movs	r3, #0
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	f7fe f9c0 	bl	80051c0 <xQueueGenericSendFromISR>
 8006e40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	@ 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	200010f4 	.word	0x200010f4

08006e50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5a:	4b23      	ldr	r3, [pc, #140]	@ (8006ee8 <prvProcessExpiredTimer+0x98>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fd fec9 	bl	8004c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d023      	beq.n	8006ec4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	18d1      	adds	r1, r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	6978      	ldr	r0, [r7, #20]
 8006e8a:	f000 f8d3 	bl	8007034 <prvInsertTimerInActiveList>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d020      	beq.n	8006ed6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e94:	2300      	movs	r3, #0
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	6978      	ldr	r0, [r7, #20]
 8006ea0:	f7ff ff88 	bl	8006db4 <xTimerGenericCommand>
 8006ea4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d114      	bne.n	8006ed6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eca:	f023 0301 	bic.w	r3, r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	6978      	ldr	r0, [r7, #20]
 8006edc:	4798      	blx	r3
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200010ec 	.word	0x200010ec

08006eec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ef4:	f107 0308 	add.w	r3, r7, #8
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f859 	bl	8006fb0 <prvGetNextExpireTime>
 8006efe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f805 	bl	8006f14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f0a:	f000 f8d5 	bl	80070b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f0e:	bf00      	nop
 8006f10:	e7f0      	b.n	8006ef4 <prvTimerTask+0x8>
	...

08006f14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f1e:	f7ff f92d 	bl	800617c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f22:	f107 0308 	add.w	r3, r7, #8
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f864 	bl	8006ff4 <prvSampleTimeNow>
 8006f2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d130      	bne.n	8006f96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <prvProcessTimerOrBlockTask+0x3c>
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d806      	bhi.n	8006f50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f42:	f7ff f929 	bl	8006198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff81 	bl	8006e50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f4e:	e024      	b.n	8006f9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f56:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <prvProcessTimerOrBlockTask+0x90>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <prvProcessTimerOrBlockTask+0x50>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <prvProcessTimerOrBlockTask+0x52>
 8006f64:	2300      	movs	r3, #0
 8006f66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f68:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa8 <prvProcessTimerOrBlockTask+0x94>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4619      	mov	r1, r3
 8006f76:	f7fe fe9f 	bl	8005cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f7a:	f7ff f90d 	bl	8006198 <xTaskResumeAll>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f84:	4b09      	ldr	r3, [pc, #36]	@ (8006fac <prvProcessTimerOrBlockTask+0x98>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
}
 8006f94:	e001      	b.n	8006f9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f96:	f7ff f8ff 	bl	8006198 <xTaskResumeAll>
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200010f0 	.word	0x200010f0
 8006fa8:	200010f4 	.word	0x200010f4
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <prvGetNextExpireTime+0x40>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <prvGetNextExpireTime+0x16>
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	e000      	b.n	8006fc8 <prvGetNextExpireTime+0x18>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fd4:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <prvGetNextExpireTime+0x40>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	e001      	b.n	8006fe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	200010ec 	.word	0x200010ec

08006ff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ffc:	f7ff f96a 	bl	80062d4 <xTaskGetTickCount>
 8007000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007002:	4b0b      	ldr	r3, [pc, #44]	@ (8007030 <prvSampleTimeNow+0x3c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	429a      	cmp	r2, r3
 800700a:	d205      	bcs.n	8007018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800700c:	f000 f93a 	bl	8007284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e002      	b.n	800701e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800701e:	4a04      	ldr	r2, [pc, #16]	@ (8007030 <prvSampleTimeNow+0x3c>)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200010fc 	.word	0x200010fc

08007034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d812      	bhi.n	8007080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	429a      	cmp	r2, r3
 8007066:	d302      	bcc.n	800706e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	e01b      	b.n	80070a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800706e:	4b10      	ldr	r3, [pc, #64]	@ (80070b0 <prvInsertTimerInActiveList+0x7c>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3304      	adds	r3, #4
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7fd fd89 	bl	8004b90 <vListInsert>
 800707e:	e012      	b.n	80070a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d206      	bcs.n	8007096 <prvInsertTimerInActiveList+0x62>
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e007      	b.n	80070a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007096:	4b07      	ldr	r3, [pc, #28]	@ (80070b4 <prvInsertTimerInActiveList+0x80>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fd fd75 	bl	8004b90 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070a6:	697b      	ldr	r3, [r7, #20]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	200010f0 	.word	0x200010f0
 80070b4:	200010ec 	.word	0x200010ec

080070b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08e      	sub	sp, #56	@ 0x38
 80070bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070be:	e0ce      	b.n	800725e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da19      	bge.n	80070fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070c6:	1d3b      	adds	r3, r7, #4
 80070c8:	3304      	adds	r3, #4
 80070ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61fb      	str	r3, [r7, #28]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f0:	6850      	ldr	r0, [r2, #4]
 80070f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f4:	6892      	ldr	r2, [r2, #8]
 80070f6:	4611      	mov	r1, r2
 80070f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f2c0 80ae 	blt.w	800725e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd fd74 	bl	8004c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007118:	463b      	mov	r3, r7
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff ff6a 	bl	8006ff4 <prvSampleTimeNow>
 8007120:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b09      	cmp	r3, #9
 8007126:	f200 8097 	bhi.w	8007258 <prvProcessReceivedCommands+0x1a0>
 800712a:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <prvProcessReceivedCommands+0x78>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007159 	.word	0x08007159
 8007134:	08007159 	.word	0x08007159
 8007138:	08007159 	.word	0x08007159
 800713c:	080071cf 	.word	0x080071cf
 8007140:	080071e3 	.word	0x080071e3
 8007144:	0800722f 	.word	0x0800722f
 8007148:	08007159 	.word	0x08007159
 800714c:	08007159 	.word	0x08007159
 8007150:	080071cf 	.word	0x080071cf
 8007154:	080071e3 	.word	0x080071e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	b2da      	uxtb	r2, r3
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	18d1      	adds	r1, r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007178:	f7ff ff5c 	bl	8007034 <prvInsertTimerInActiveList>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d06c      	beq.n	800725c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007188:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d061      	beq.n	800725c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	441a      	add	r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2300      	movs	r3, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071aa:	f7ff fe03 	bl	8006db4 <xTimerGenericCommand>
 80071ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d152      	bne.n	800725c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	61bb      	str	r3, [r7, #24]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071e0:	e03d      	b.n	800725e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	617b      	str	r3, [r7, #20]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	18d1      	adds	r1, r2, r3
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007228:	f7ff ff04 	bl	8007034 <prvInsertTimerInActiveList>
					break;
 800722c:	e017      	b.n	800725e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800723c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800723e:	f000 fb85 	bl	800794c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007242:	e00c      	b.n	800725e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007256:	e002      	b.n	800725e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <prvProcessReceivedCommands+0x1a6>
					break;
 800725c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800725e:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <prvProcessReceivedCommands+0x1c8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	1d39      	adds	r1, r7, #4
 8007264:	2200      	movs	r2, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe f8d8 	bl	800541c <xQueueReceive>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	f47f af26 	bne.w	80070c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3730      	adds	r7, #48	@ 0x30
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200010f4 	.word	0x200010f4

08007284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800728a:	e049      	b.n	8007320 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800728c:	4b2e      	ldr	r3, [pc, #184]	@ (8007348 <prvSwitchTimerLists+0xc4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007296:	4b2c      	ldr	r3, [pc, #176]	@ (8007348 <prvSwitchTimerLists+0xc4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fd fcab 	bl	8004c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02f      	beq.n	8007320 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d90e      	bls.n	80072f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072de:	4b1a      	ldr	r3, [pc, #104]	@ (8007348 <prvSwitchTimerLists+0xc4>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f7fd fc51 	bl	8004b90 <vListInsert>
 80072ee:	e017      	b.n	8007320 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072f0:	2300      	movs	r3, #0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	2100      	movs	r1, #0
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f7ff fd5a 	bl	8006db4 <xTimerGenericCommand>
 8007300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	603b      	str	r3, [r7, #0]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007320:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <prvSwitchTimerLists+0xc4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1b0      	bne.n	800728c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800732a:	4b07      	ldr	r3, [pc, #28]	@ (8007348 <prvSwitchTimerLists+0xc4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <prvSwitchTimerLists+0xc8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a04      	ldr	r2, [pc, #16]	@ (8007348 <prvSwitchTimerLists+0xc4>)
 8007336:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007338:	4a04      	ldr	r2, [pc, #16]	@ (800734c <prvSwitchTimerLists+0xc8>)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6013      	str	r3, [r2, #0]
}
 800733e:	bf00      	nop
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	200010ec 	.word	0x200010ec
 800734c:	200010f0 	.word	0x200010f0

08007350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007356:	f000 f929 	bl	80075ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800735a:	4b15      	ldr	r3, [pc, #84]	@ (80073b0 <prvCheckForValidListAndQueue+0x60>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d120      	bne.n	80073a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007362:	4814      	ldr	r0, [pc, #80]	@ (80073b4 <prvCheckForValidListAndQueue+0x64>)
 8007364:	f7fd fbc6 	bl	8004af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007368:	4813      	ldr	r0, [pc, #76]	@ (80073b8 <prvCheckForValidListAndQueue+0x68>)
 800736a:	f7fd fbc3 	bl	8004af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800736e:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <prvCheckForValidListAndQueue+0x6c>)
 8007370:	4a10      	ldr	r2, [pc, #64]	@ (80073b4 <prvCheckForValidListAndQueue+0x64>)
 8007372:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007374:	4b12      	ldr	r3, [pc, #72]	@ (80073c0 <prvCheckForValidListAndQueue+0x70>)
 8007376:	4a10      	ldr	r2, [pc, #64]	@ (80073b8 <prvCheckForValidListAndQueue+0x68>)
 8007378:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800737a:	2300      	movs	r3, #0
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4b11      	ldr	r3, [pc, #68]	@ (80073c4 <prvCheckForValidListAndQueue+0x74>)
 8007380:	4a11      	ldr	r2, [pc, #68]	@ (80073c8 <prvCheckForValidListAndQueue+0x78>)
 8007382:	2110      	movs	r1, #16
 8007384:	200a      	movs	r0, #10
 8007386:	f7fd fccf 	bl	8004d28 <xQueueGenericCreateStatic>
 800738a:	4603      	mov	r3, r0
 800738c:	4a08      	ldr	r2, [pc, #32]	@ (80073b0 <prvCheckForValidListAndQueue+0x60>)
 800738e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007390:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <prvCheckForValidListAndQueue+0x60>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <prvCheckForValidListAndQueue+0x60>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	490b      	ldr	r1, [pc, #44]	@ (80073cc <prvCheckForValidListAndQueue+0x7c>)
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fc38 	bl	8005c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073a4:	f000 f932 	bl	800760c <vPortExitCritical>
}
 80073a8:	bf00      	nop
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200010f4 	.word	0x200010f4
 80073b4:	200010c4 	.word	0x200010c4
 80073b8:	200010d8 	.word	0x200010d8
 80073bc:	200010ec 	.word	0x200010ec
 80073c0:	200010f0 	.word	0x200010f0
 80073c4:	200011a0 	.word	0x200011a0
 80073c8:	20001100 	.word	0x20001100
 80073cc:	080087f4 	.word	0x080087f4

080073d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3b04      	subs	r3, #4
 80073e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b04      	subs	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f023 0201 	bic.w	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007400:	4a08      	ldr	r2, [pc, #32]	@ (8007424 <pxPortInitialiseStack+0x54>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b14      	subs	r3, #20
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b20      	subs	r3, #32
 8007416:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007418:	68fb      	ldr	r3, [r7, #12]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr
 8007424:	08007429 	.word	0x08007429

08007428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007432:	4b12      	ldr	r3, [pc, #72]	@ (800747c <prvTaskExitError+0x54>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d00b      	beq.n	8007454 <prvTaskExitError+0x2c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <prvTaskExitError+0x28>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	60bb      	str	r3, [r7, #8]
}
 8007466:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007468:	bf00      	nop
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0fc      	beq.n	800746a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	20000068 	.word	0x20000068

08007480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <pxCurrentTCBConst2>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800748a:	f380 8809 	msr	PSP, r0
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8811 	msr	BASEPRI, r0
 800749a:	f04e 0e0d 	orr.w	lr, lr, #13
 800749e:	4770      	bx	lr

080074a0 <pxCurrentTCBConst2>:
 80074a0:	20000bc4 	.word	0x20000bc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80074a8:	4806      	ldr	r0, [pc, #24]	@ (80074c4 <prvPortStartFirstTask+0x1c>)
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f380 8808 	msr	MSP, r0
 80074b2:	b662      	cpsie	i
 80074b4:	b661      	cpsie	f
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	df00      	svc	0
 80074c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074c2:	bf00      	nop
 80074c4:	e000ed08 	.word	0xe000ed08

080074c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ce:	4b32      	ldr	r3, [pc, #200]	@ (8007598 <xPortStartScheduler+0xd0>)
 80074d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	22ff      	movs	r2, #255	@ 0xff
 80074de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	4b2a      	ldr	r3, [pc, #168]	@ (800759c <xPortStartScheduler+0xd4>)
 80074f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074f6:	4b2a      	ldr	r3, [pc, #168]	@ (80075a0 <xPortStartScheduler+0xd8>)
 80074f8:	2207      	movs	r2, #7
 80074fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074fc:	e009      	b.n	8007512 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80074fe:	4b28      	ldr	r3, [pc, #160]	@ (80075a0 <xPortStartScheduler+0xd8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	4a26      	ldr	r2, [pc, #152]	@ (80075a0 <xPortStartScheduler+0xd8>)
 8007506:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	b2db      	uxtb	r3, r3
 8007510:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b80      	cmp	r3, #128	@ 0x80
 800751c:	d0ef      	beq.n	80074fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800751e:	4b20      	ldr	r3, [pc, #128]	@ (80075a0 <xPortStartScheduler+0xd8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1c3 0307 	rsb	r3, r3, #7
 8007526:	2b04      	cmp	r3, #4
 8007528:	d00b      	beq.n	8007542 <xPortStartScheduler+0x7a>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60bb      	str	r3, [r7, #8]
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007542:	4b17      	ldr	r3, [pc, #92]	@ (80075a0 <xPortStartScheduler+0xd8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	4a15      	ldr	r2, [pc, #84]	@ (80075a0 <xPortStartScheduler+0xd8>)
 800754a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800754c:	4b14      	ldr	r3, [pc, #80]	@ (80075a0 <xPortStartScheduler+0xd8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007554:	4a12      	ldr	r2, [pc, #72]	@ (80075a0 <xPortStartScheduler+0xd8>)
 8007556:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	b2da      	uxtb	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007560:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <xPortStartScheduler+0xdc>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a0f      	ldr	r2, [pc, #60]	@ (80075a4 <xPortStartScheduler+0xdc>)
 8007566:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800756a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800756c:	4b0d      	ldr	r3, [pc, #52]	@ (80075a4 <xPortStartScheduler+0xdc>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a0c      	ldr	r2, [pc, #48]	@ (80075a4 <xPortStartScheduler+0xdc>)
 8007572:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007576:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007578:	f000 f8b8 	bl	80076ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <xPortStartScheduler+0xe0>)
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007582:	f7ff ff91 	bl	80074a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007586:	f7fe ff6d 	bl	8006464 <vTaskSwitchContext>
	prvTaskExitError();
 800758a:	f7ff ff4d 	bl	8007428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000e400 	.word	0xe000e400
 800759c:	200011f0 	.word	0x200011f0
 80075a0:	200011f4 	.word	0x200011f4
 80075a4:	e000ed20 	.word	0xe000ed20
 80075a8:	20000068 	.word	0x20000068

080075ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <vPortEnterCritical+0x58>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007604 <vPortEnterCritical+0x58>)
 80075ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <vPortEnterCritical+0x58>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d110      	bne.n	80075fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <vPortEnterCritical+0x5c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <vPortEnterCritical+0x4e>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	603b      	str	r3, [r7, #0]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <vPortEnterCritical+0x4a>
	}
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	20000068 	.word	0x20000068
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007612:	4b12      	ldr	r3, [pc, #72]	@ (800765c <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <vPortExitCritical+0x26>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	607b      	str	r3, [r7, #4]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007632:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <vPortExitCritical+0x50>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3b01      	subs	r3, #1
 8007638:	4a08      	ldr	r2, [pc, #32]	@ (800765c <vPortExitCritical+0x50>)
 800763a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800763c:	4b07      	ldr	r3, [pc, #28]	@ (800765c <vPortExitCritical+0x50>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <vPortExitCritical+0x44>
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	bc80      	pop	{r7}
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000068 	.word	0x20000068

08007660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007660:	f3ef 8009 	mrs	r0, PSP
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <pxCurrentTCBConst>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007670:	6010      	str	r0, [r2, #0]
 8007672:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007676:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800767a:	f380 8811 	msr	BASEPRI, r0
 800767e:	f7fe fef1 	bl	8006464 <vTaskSwitchContext>
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8811 	msr	BASEPRI, r0
 800768a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007696:	f380 8809 	msr	PSP, r0
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	4770      	bx	lr

080076a0 <pxCurrentTCBConst>:
 80076a0:	20000bc4 	.word	0x20000bc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
}
 80076c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076c2:	f7fe fe15 	bl	80062f0 <xTaskIncrementTick>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076cc:	4b06      	ldr	r3, [pc, #24]	@ (80076e8 <xPortSysTickHandler+0x40>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f383 8811 	msr	BASEPRI, r3
}
 80076de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076f0:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <vPortSetupTimerInterrupt+0x30>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <vPortSetupTimerInterrupt+0x34>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <vPortSetupTimerInterrupt+0x38>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a09      	ldr	r2, [pc, #36]	@ (8007728 <vPortSetupTimerInterrupt+0x3c>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	4a08      	ldr	r2, [pc, #32]	@ (800772c <vPortSetupTimerInterrupt+0x40>)
 800770a:	3b01      	subs	r3, #1
 800770c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800770e:	4b03      	ldr	r3, [pc, #12]	@ (800771c <vPortSetupTimerInterrupt+0x30>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr
 800771c:	e000e010 	.word	0xe000e010
 8007720:	e000e018 	.word	0xe000e018
 8007724:	2000005c 	.word	0x2000005c
 8007728:	10624dd3 	.word	0x10624dd3
 800772c:	e000e014 	.word	0xe000e014

08007730 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007736:	f3ef 8305 	mrs	r3, IPSR
 800773a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b0f      	cmp	r3, #15
 8007740:	d915      	bls.n	800776e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007742:	4a17      	ldr	r2, [pc, #92]	@ (80077a0 <vPortValidateInterruptPriority+0x70>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800774c:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <vPortValidateInterruptPriority+0x74>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	7afa      	ldrb	r2, [r7, #11]
 8007752:	429a      	cmp	r2, r3
 8007754:	d20b      	bcs.n	800776e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	607b      	str	r3, [r7, #4]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800776e:	4b0e      	ldr	r3, [pc, #56]	@ (80077a8 <vPortValidateInterruptPriority+0x78>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <vPortValidateInterruptPriority+0x7c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d90b      	bls.n	8007796 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	603b      	str	r3, [r7, #0]
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	e7fd      	b.n	8007792 <vPortValidateInterruptPriority+0x62>
	}
 8007796:	bf00      	nop
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr
 80077a0:	e000e3f0 	.word	0xe000e3f0
 80077a4:	200011f0 	.word	0x200011f0
 80077a8:	e000ed0c 	.word	0xe000ed0c
 80077ac:	200011f4 	.word	0x200011f4

080077b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	@ 0x28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077bc:	f7fe fcde 	bl	800617c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007934 <pvPortMalloc+0x184>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077c8:	f000 f924 	bl	8007a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007938 <pvPortMalloc+0x188>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4013      	ands	r3, r2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 8095 	bne.w	8007904 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01e      	beq.n	800781e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077e0:	2208      	movs	r2, #8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4413      	add	r3, r2
 80077e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d015      	beq.n	800781e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f023 0307 	bic.w	r3, r3, #7
 80077f8:	3308      	adds	r3, #8
 80077fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <pvPortMalloc+0x6e>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	617b      	str	r3, [r7, #20]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d06f      	beq.n	8007904 <pvPortMalloc+0x154>
 8007824:	4b45      	ldr	r3, [pc, #276]	@ (800793c <pvPortMalloc+0x18c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d86a      	bhi.n	8007904 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800782e:	4b44      	ldr	r3, [pc, #272]	@ (8007940 <pvPortMalloc+0x190>)
 8007830:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007832:	4b43      	ldr	r3, [pc, #268]	@ (8007940 <pvPortMalloc+0x190>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007838:	e004      	b.n	8007844 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	d903      	bls.n	8007856 <pvPortMalloc+0xa6>
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f1      	bne.n	800783a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007856:	4b37      	ldr	r3, [pc, #220]	@ (8007934 <pvPortMalloc+0x184>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800785c:	429a      	cmp	r2, r3
 800785e:	d051      	beq.n	8007904 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2208      	movs	r2, #8
 8007866:	4413      	add	r3, r2
 8007868:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	1ad2      	subs	r2, r2, r3
 800787a:	2308      	movs	r3, #8
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	429a      	cmp	r2, r3
 8007880:	d920      	bls.n	80078c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <pvPortMalloc+0xfc>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	613b      	str	r3, [r7, #16]
}
 80078a6:	bf00      	nop
 80078a8:	bf00      	nop
 80078aa:	e7fd      	b.n	80078a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078be:	69b8      	ldr	r0, [r7, #24]
 80078c0:	f000 f90a 	bl	8007ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c4:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <pvPortMalloc+0x18c>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	4a1b      	ldr	r2, [pc, #108]	@ (800793c <pvPortMalloc+0x18c>)
 80078d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078d2:	4b1a      	ldr	r3, [pc, #104]	@ (800793c <pvPortMalloc+0x18c>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007944 <pvPortMalloc+0x194>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d203      	bcs.n	80078e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078de:	4b17      	ldr	r3, [pc, #92]	@ (800793c <pvPortMalloc+0x18c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a18      	ldr	r2, [pc, #96]	@ (8007944 <pvPortMalloc+0x194>)
 80078e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <pvPortMalloc+0x188>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	431a      	orrs	r2, r3
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078fa:	4b13      	ldr	r3, [pc, #76]	@ (8007948 <pvPortMalloc+0x198>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	4a11      	ldr	r2, [pc, #68]	@ (8007948 <pvPortMalloc+0x198>)
 8007902:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007904:	f7fe fc48 	bl	8006198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <pvPortMalloc+0x17a>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60fb      	str	r3, [r7, #12]
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <pvPortMalloc+0x176>
	return pvReturn;
 800792a:	69fb      	ldr	r3, [r7, #28]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3728      	adds	r7, #40	@ 0x28
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20003910 	.word	0x20003910
 8007938:	20003924 	.word	0x20003924
 800793c:	20003914 	.word	0x20003914
 8007940:	20003908 	.word	0x20003908
 8007944:	20003918 	.word	0x20003918
 8007948:	2000391c 	.word	0x2000391c

0800794c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d04f      	beq.n	80079fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800795e:	2308      	movs	r3, #8
 8007960:	425b      	negs	r3, r3
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	4b25      	ldr	r3, [pc, #148]	@ (8007a08 <vPortFree+0xbc>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4013      	ands	r3, r2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10b      	bne.n	8007992 <vPortFree+0x46>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60fb      	str	r3, [r7, #12]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <vPortFree+0x66>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60bb      	str	r3, [r7, #8]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4b14      	ldr	r3, [pc, #80]	@ (8007a08 <vPortFree+0xbc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01e      	beq.n	80079fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d11a      	bne.n	80079fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <vPortFree+0xbc>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	401a      	ands	r2, r3
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079d8:	f7fe fbd0 	bl	800617c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <vPortFree+0xc0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4413      	add	r3, r2
 80079e6:	4a09      	ldr	r2, [pc, #36]	@ (8007a0c <vPortFree+0xc0>)
 80079e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ea:	6938      	ldr	r0, [r7, #16]
 80079ec:	f000 f874 	bl	8007ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079f0:	4b07      	ldr	r3, [pc, #28]	@ (8007a10 <vPortFree+0xc4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	4a06      	ldr	r2, [pc, #24]	@ (8007a10 <vPortFree+0xc4>)
 80079f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079fa:	f7fe fbcd 	bl	8006198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079fe:	bf00      	nop
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20003924 	.word	0x20003924
 8007a0c:	20003914 	.word	0x20003914
 8007a10:	20003920 	.word	0x20003920

08007a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a1a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a20:	4b27      	ldr	r3, [pc, #156]	@ (8007ac0 <prvHeapInit+0xac>)
 8007a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3307      	adds	r3, #7
 8007a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0307 	bic.w	r3, r3, #7
 8007a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac0 <prvHeapInit+0xac>)
 8007a44:	4413      	add	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <prvHeapInit+0xb0>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac4 <prvHeapInit+0xb0>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a60:	2208      	movs	r2, #8
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a15      	ldr	r2, [pc, #84]	@ (8007ac8 <prvHeapInit+0xb4>)
 8007a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a76:	4b14      	ldr	r3, [pc, #80]	@ (8007ac8 <prvHeapInit+0xb4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a7e:	4b12      	ldr	r3, [pc, #72]	@ (8007ac8 <prvHeapInit+0xb4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <prvHeapInit+0xb4>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <prvHeapInit+0xb8>)
 8007aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4a09      	ldr	r2, [pc, #36]	@ (8007ad0 <prvHeapInit+0xbc>)
 8007aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aac:	4b09      	ldr	r3, [pc, #36]	@ (8007ad4 <prvHeapInit+0xc0>)
 8007aae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	200011f8 	.word	0x200011f8
 8007ac4:	20003908 	.word	0x20003908
 8007ac8:	20003910 	.word	0x20003910
 8007acc:	20003918 	.word	0x20003918
 8007ad0:	20003914 	.word	0x20003914
 8007ad4:	20003924 	.word	0x20003924

08007ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ae0:	4b27      	ldr	r3, [pc, #156]	@ (8007b80 <prvInsertBlockIntoFreeList+0xa8>)
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e002      	b.n	8007aec <prvInsertBlockIntoFreeList+0x14>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d8f7      	bhi.n	8007ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d108      	bne.n	8007b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	441a      	add	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d118      	bne.n	8007b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b14      	ldr	r3, [pc, #80]	@ (8007b84 <prvInsertBlockIntoFreeList+0xac>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d00d      	beq.n	8007b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e008      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	@ (8007b84 <prvInsertBlockIntoFreeList+0xac>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e003      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d002      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr
 8007b80:	20003908 	.word	0x20003908
 8007b84:	20003910 	.word	0x20003910

08007b88 <_strtoul_l.isra.0>:
 8007b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	4686      	mov	lr, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	4e33      	ldr	r6, [pc, #204]	@ (8007c60 <_strtoul_l.isra.0+0xd8>)
 8007b92:	4628      	mov	r0, r5
 8007b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b98:	5d37      	ldrb	r7, [r6, r4]
 8007b9a:	f017 0708 	ands.w	r7, r7, #8
 8007b9e:	d1f8      	bne.n	8007b92 <_strtoul_l.isra.0+0xa>
 8007ba0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ba2:	d110      	bne.n	8007bc6 <_strtoul_l.isra.0+0x3e>
 8007ba4:	2701      	movs	r7, #1
 8007ba6:	782c      	ldrb	r4, [r5, #0]
 8007ba8:	1c85      	adds	r5, r0, #2
 8007baa:	f033 0010 	bics.w	r0, r3, #16
 8007bae:	d115      	bne.n	8007bdc <_strtoul_l.isra.0+0x54>
 8007bb0:	2c30      	cmp	r4, #48	@ 0x30
 8007bb2:	d10d      	bne.n	8007bd0 <_strtoul_l.isra.0+0x48>
 8007bb4:	7828      	ldrb	r0, [r5, #0]
 8007bb6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007bba:	2858      	cmp	r0, #88	@ 0x58
 8007bbc:	d108      	bne.n	8007bd0 <_strtoul_l.isra.0+0x48>
 8007bbe:	786c      	ldrb	r4, [r5, #1]
 8007bc0:	3502      	adds	r5, #2
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	e00a      	b.n	8007bdc <_strtoul_l.isra.0+0x54>
 8007bc6:	2c2b      	cmp	r4, #43	@ 0x2b
 8007bc8:	bf04      	itt	eq
 8007bca:	782c      	ldrbeq	r4, [r5, #0]
 8007bcc:	1c85      	addeq	r5, r0, #2
 8007bce:	e7ec      	b.n	8007baa <_strtoul_l.isra.0+0x22>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f6      	bne.n	8007bc2 <_strtoul_l.isra.0+0x3a>
 8007bd4:	2c30      	cmp	r4, #48	@ 0x30
 8007bd6:	bf14      	ite	ne
 8007bd8:	230a      	movne	r3, #10
 8007bda:	2308      	moveq	r3, #8
 8007bdc:	f04f 38ff 	mov.w	r8, #4294967295
 8007be0:	fbb8 f8f3 	udiv	r8, r8, r3
 8007be4:	2600      	movs	r6, #0
 8007be6:	fb03 f908 	mul.w	r9, r3, r8
 8007bea:	4630      	mov	r0, r6
 8007bec:	ea6f 0909 	mvn.w	r9, r9
 8007bf0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007bf4:	f1bc 0f09 	cmp.w	ip, #9
 8007bf8:	d810      	bhi.n	8007c1c <_strtoul_l.isra.0+0x94>
 8007bfa:	4664      	mov	r4, ip
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	dd1e      	ble.n	8007c3e <_strtoul_l.isra.0+0xb6>
 8007c00:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007c04:	d007      	beq.n	8007c16 <_strtoul_l.isra.0+0x8e>
 8007c06:	4580      	cmp	r8, r0
 8007c08:	d316      	bcc.n	8007c38 <_strtoul_l.isra.0+0xb0>
 8007c0a:	d101      	bne.n	8007c10 <_strtoul_l.isra.0+0x88>
 8007c0c:	45a1      	cmp	r9, r4
 8007c0e:	db13      	blt.n	8007c38 <_strtoul_l.isra.0+0xb0>
 8007c10:	2601      	movs	r6, #1
 8007c12:	fb00 4003 	mla	r0, r0, r3, r4
 8007c16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c1a:	e7e9      	b.n	8007bf0 <_strtoul_l.isra.0+0x68>
 8007c1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007c20:	f1bc 0f19 	cmp.w	ip, #25
 8007c24:	d801      	bhi.n	8007c2a <_strtoul_l.isra.0+0xa2>
 8007c26:	3c37      	subs	r4, #55	@ 0x37
 8007c28:	e7e8      	b.n	8007bfc <_strtoul_l.isra.0+0x74>
 8007c2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007c2e:	f1bc 0f19 	cmp.w	ip, #25
 8007c32:	d804      	bhi.n	8007c3e <_strtoul_l.isra.0+0xb6>
 8007c34:	3c57      	subs	r4, #87	@ 0x57
 8007c36:	e7e1      	b.n	8007bfc <_strtoul_l.isra.0+0x74>
 8007c38:	f04f 36ff 	mov.w	r6, #4294967295
 8007c3c:	e7eb      	b.n	8007c16 <_strtoul_l.isra.0+0x8e>
 8007c3e:	1c73      	adds	r3, r6, #1
 8007c40:	d106      	bne.n	8007c50 <_strtoul_l.isra.0+0xc8>
 8007c42:	2322      	movs	r3, #34	@ 0x22
 8007c44:	4630      	mov	r0, r6
 8007c46:	f8ce 3000 	str.w	r3, [lr]
 8007c4a:	b932      	cbnz	r2, 8007c5a <_strtoul_l.isra.0+0xd2>
 8007c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c50:	b107      	cbz	r7, 8007c54 <_strtoul_l.isra.0+0xcc>
 8007c52:	4240      	negs	r0, r0
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	d0f9      	beq.n	8007c4c <_strtoul_l.isra.0+0xc4>
 8007c58:	b106      	cbz	r6, 8007c5c <_strtoul_l.isra.0+0xd4>
 8007c5a:	1e69      	subs	r1, r5, #1
 8007c5c:	6011      	str	r1, [r2, #0]
 8007c5e:	e7f5      	b.n	8007c4c <_strtoul_l.isra.0+0xc4>
 8007c60:	08008b93 	.word	0x08008b93

08007c64 <strtoul>:
 8007c64:	4613      	mov	r3, r2
 8007c66:	460a      	mov	r2, r1
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4802      	ldr	r0, [pc, #8]	@ (8007c74 <strtoul+0x10>)
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f7ff bf8b 	b.w	8007b88 <_strtoul_l.isra.0>
 8007c72:	bf00      	nop
 8007c74:	2000006c 	.word	0x2000006c

08007c78 <siprintf>:
 8007c78:	b40e      	push	{r1, r2, r3}
 8007c7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	2400      	movs	r4, #0
 8007c82:	b09d      	sub	sp, #116	@ 0x74
 8007c84:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007c86:	9002      	str	r0, [sp, #8]
 8007c88:	9006      	str	r0, [sp, #24]
 8007c8a:	9107      	str	r1, [sp, #28]
 8007c8c:	9104      	str	r1, [sp, #16]
 8007c8e:	4809      	ldr	r0, [pc, #36]	@ (8007cb4 <siprintf+0x3c>)
 8007c90:	4909      	ldr	r1, [pc, #36]	@ (8007cb8 <siprintf+0x40>)
 8007c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c96:	9105      	str	r1, [sp, #20]
 8007c98:	6800      	ldr	r0, [r0, #0]
 8007c9a:	a902      	add	r1, sp, #8
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007ca0:	f000 fa3a 	bl	8008118 <_svfiprintf_r>
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	701c      	strb	r4, [r3, #0]
 8007ca8:	b01d      	add	sp, #116	@ 0x74
 8007caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cae:	b003      	add	sp, #12
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	2000006c 	.word	0x2000006c
 8007cb8:	ffff0208 	.word	0xffff0208

08007cbc <memcmp>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	3901      	subs	r1, #1
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4290      	cmp	r0, r2
 8007cc4:	d101      	bne.n	8007cca <memcmp+0xe>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e005      	b.n	8007cd6 <memcmp+0x1a>
 8007cca:	7803      	ldrb	r3, [r0, #0]
 8007ccc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cd0:	42a3      	cmp	r3, r4
 8007cd2:	d001      	beq.n	8007cd8 <memcmp+0x1c>
 8007cd4:	1b18      	subs	r0, r3, r4
 8007cd6:	bd10      	pop	{r4, pc}
 8007cd8:	3001      	adds	r0, #1
 8007cda:	e7f2      	b.n	8007cc2 <memcmp+0x6>

08007cdc <memset>:
 8007cdc:	4603      	mov	r3, r0
 8007cde:	4402      	add	r2, r0
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d100      	bne.n	8007ce6 <memset+0xa>
 8007ce4:	4770      	bx	lr
 8007ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cea:	e7f9      	b.n	8007ce0 <memset+0x4>

08007cec <strncmp>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	b16a      	cbz	r2, 8007d0c <strncmp+0x20>
 8007cf0:	3901      	subs	r1, #1
 8007cf2:	1884      	adds	r4, r0, r2
 8007cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d103      	bne.n	8007d08 <strncmp+0x1c>
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	d001      	beq.n	8007d08 <strncmp+0x1c>
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	d1f5      	bne.n	8007cf4 <strncmp+0x8>
 8007d08:	1ad0      	subs	r0, r2, r3
 8007d0a:	bd10      	pop	{r4, pc}
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	e7fc      	b.n	8007d0a <strncmp+0x1e>

08007d10 <strncpy>:
 8007d10:	4603      	mov	r3, r0
 8007d12:	b510      	push	{r4, lr}
 8007d14:	3901      	subs	r1, #1
 8007d16:	b132      	cbz	r2, 8007d26 <strncpy+0x16>
 8007d18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d1c:	3a01      	subs	r2, #1
 8007d1e:	f803 4b01 	strb.w	r4, [r3], #1
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1f7      	bne.n	8007d16 <strncpy+0x6>
 8007d26:	2100      	movs	r1, #0
 8007d28:	441a      	add	r2, r3
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d100      	bne.n	8007d30 <strncpy+0x20>
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	f803 1b01 	strb.w	r1, [r3], #1
 8007d34:	e7f9      	b.n	8007d2a <strncpy+0x1a>
	...

08007d38 <_reclaim_reent>:
 8007d38:	4b2d      	ldr	r3, [pc, #180]	@ (8007df0 <_reclaim_reent+0xb8>)
 8007d3a:	b570      	push	{r4, r5, r6, lr}
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4283      	cmp	r3, r0
 8007d42:	d053      	beq.n	8007dec <_reclaim_reent+0xb4>
 8007d44:	69c3      	ldr	r3, [r0, #28]
 8007d46:	b31b      	cbz	r3, 8007d90 <_reclaim_reent+0x58>
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	b163      	cbz	r3, 8007d66 <_reclaim_reent+0x2e>
 8007d4c:	2500      	movs	r5, #0
 8007d4e:	69e3      	ldr	r3, [r4, #28]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	5959      	ldr	r1, [r3, r5]
 8007d54:	b9b1      	cbnz	r1, 8007d84 <_reclaim_reent+0x4c>
 8007d56:	3504      	adds	r5, #4
 8007d58:	2d80      	cmp	r5, #128	@ 0x80
 8007d5a:	d1f8      	bne.n	8007d4e <_reclaim_reent+0x16>
 8007d5c:	69e3      	ldr	r3, [r4, #28]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	68d9      	ldr	r1, [r3, #12]
 8007d62:	f000 f887 	bl	8007e74 <_free_r>
 8007d66:	69e3      	ldr	r3, [r4, #28]
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	b111      	cbz	r1, 8007d72 <_reclaim_reent+0x3a>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 f881 	bl	8007e74 <_free_r>
 8007d72:	69e3      	ldr	r3, [r4, #28]
 8007d74:	689d      	ldr	r5, [r3, #8]
 8007d76:	b15d      	cbz	r5, 8007d90 <_reclaim_reent+0x58>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	682d      	ldr	r5, [r5, #0]
 8007d7e:	f000 f879 	bl	8007e74 <_free_r>
 8007d82:	e7f8      	b.n	8007d76 <_reclaim_reent+0x3e>
 8007d84:	680e      	ldr	r6, [r1, #0]
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 f874 	bl	8007e74 <_free_r>
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	e7e1      	b.n	8007d54 <_reclaim_reent+0x1c>
 8007d90:	6961      	ldr	r1, [r4, #20]
 8007d92:	b111      	cbz	r1, 8007d9a <_reclaim_reent+0x62>
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 f86d 	bl	8007e74 <_free_r>
 8007d9a:	69e1      	ldr	r1, [r4, #28]
 8007d9c:	b111      	cbz	r1, 8007da4 <_reclaim_reent+0x6c>
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 f868 	bl	8007e74 <_free_r>
 8007da4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007da6:	b111      	cbz	r1, 8007dae <_reclaim_reent+0x76>
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 f863 	bl	8007e74 <_free_r>
 8007dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007db0:	b111      	cbz	r1, 8007db8 <_reclaim_reent+0x80>
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 f85e 	bl	8007e74 <_free_r>
 8007db8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007dba:	b111      	cbz	r1, 8007dc2 <_reclaim_reent+0x8a>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 f859 	bl	8007e74 <_free_r>
 8007dc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007dc4:	b111      	cbz	r1, 8007dcc <_reclaim_reent+0x94>
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 f854 	bl	8007e74 <_free_r>
 8007dcc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007dce:	b111      	cbz	r1, 8007dd6 <_reclaim_reent+0x9e>
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 f84f 	bl	8007e74 <_free_r>
 8007dd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007dd8:	b111      	cbz	r1, 8007de0 <_reclaim_reent+0xa8>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 f84a 	bl	8007e74 <_free_r>
 8007de0:	6a23      	ldr	r3, [r4, #32]
 8007de2:	b11b      	cbz	r3, 8007dec <_reclaim_reent+0xb4>
 8007de4:	4620      	mov	r0, r4
 8007de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dea:	4718      	bx	r3
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	bf00      	nop
 8007df0:	2000006c 	.word	0x2000006c

08007df4 <__errno>:
 8007df4:	4b01      	ldr	r3, [pc, #4]	@ (8007dfc <__errno+0x8>)
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	2000006c 	.word	0x2000006c

08007e00 <__libc_init_array>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	2600      	movs	r6, #0
 8007e04:	4d0c      	ldr	r5, [pc, #48]	@ (8007e38 <__libc_init_array+0x38>)
 8007e06:	4c0d      	ldr	r4, [pc, #52]	@ (8007e3c <__libc_init_array+0x3c>)
 8007e08:	1b64      	subs	r4, r4, r5
 8007e0a:	10a4      	asrs	r4, r4, #2
 8007e0c:	42a6      	cmp	r6, r4
 8007e0e:	d109      	bne.n	8007e24 <__libc_init_array+0x24>
 8007e10:	f000 fc82 	bl	8008718 <_init>
 8007e14:	2600      	movs	r6, #0
 8007e16:	4d0a      	ldr	r5, [pc, #40]	@ (8007e40 <__libc_init_array+0x40>)
 8007e18:	4c0a      	ldr	r4, [pc, #40]	@ (8007e44 <__libc_init_array+0x44>)
 8007e1a:	1b64      	subs	r4, r4, r5
 8007e1c:	10a4      	asrs	r4, r4, #2
 8007e1e:	42a6      	cmp	r6, r4
 8007e20:	d105      	bne.n	8007e2e <__libc_init_array+0x2e>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e28:	4798      	blx	r3
 8007e2a:	3601      	adds	r6, #1
 8007e2c:	e7ee      	b.n	8007e0c <__libc_init_array+0xc>
 8007e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e32:	4798      	blx	r3
 8007e34:	3601      	adds	r6, #1
 8007e36:	e7f2      	b.n	8007e1e <__libc_init_array+0x1e>
 8007e38:	080091d0 	.word	0x080091d0
 8007e3c:	080091d0 	.word	0x080091d0
 8007e40:	080091d0 	.word	0x080091d0
 8007e44:	080091d4 	.word	0x080091d4

08007e48 <__retarget_lock_acquire_recursive>:
 8007e48:	4770      	bx	lr

08007e4a <__retarget_lock_release_recursive>:
 8007e4a:	4770      	bx	lr

08007e4c <__aeabi_memcpy>:
 8007e4c:	f000 b803 	b.w	8007e56 <memcpy>

08007e50 <__aeabi_memclr>:
 8007e50:	2200      	movs	r2, #0
 8007e52:	f000 bc17 	b.w	8008684 <__aeabi_memset>

08007e56 <memcpy>:
 8007e56:	440a      	add	r2, r1
 8007e58:	4291      	cmp	r1, r2
 8007e5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e5e:	d100      	bne.n	8007e62 <memcpy+0xc>
 8007e60:	4770      	bx	lr
 8007e62:	b510      	push	{r4, lr}
 8007e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e68:	4291      	cmp	r1, r2
 8007e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e6e:	d1f9      	bne.n	8007e64 <memcpy+0xe>
 8007e70:	bd10      	pop	{r4, pc}
	...

08007e74 <_free_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4605      	mov	r5, r0
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	d040      	beq.n	8007efe <_free_r+0x8a>
 8007e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e80:	1f0c      	subs	r4, r1, #4
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	bfb8      	it	lt
 8007e86:	18e4      	addlt	r4, r4, r3
 8007e88:	f000 f8de 	bl	8008048 <__malloc_lock>
 8007e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <_free_r+0x8c>)
 8007e8e:	6813      	ldr	r3, [r2, #0]
 8007e90:	b933      	cbnz	r3, 8007ea0 <_free_r+0x2c>
 8007e92:	6063      	str	r3, [r4, #4]
 8007e94:	6014      	str	r4, [r2, #0]
 8007e96:	4628      	mov	r0, r5
 8007e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9c:	f000 b8da 	b.w	8008054 <__malloc_unlock>
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d908      	bls.n	8007eb6 <_free_r+0x42>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	1821      	adds	r1, r4, r0
 8007ea8:	428b      	cmp	r3, r1
 8007eaa:	bf01      	itttt	eq
 8007eac:	6819      	ldreq	r1, [r3, #0]
 8007eae:	685b      	ldreq	r3, [r3, #4]
 8007eb0:	1809      	addeq	r1, r1, r0
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	e7ed      	b.n	8007e92 <_free_r+0x1e>
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b10b      	cbz	r3, 8007ec0 <_free_r+0x4c>
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d9fa      	bls.n	8007eb6 <_free_r+0x42>
 8007ec0:	6811      	ldr	r1, [r2, #0]
 8007ec2:	1850      	adds	r0, r2, r1
 8007ec4:	42a0      	cmp	r0, r4
 8007ec6:	d10b      	bne.n	8007ee0 <_free_r+0x6c>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	4401      	add	r1, r0
 8007ecc:	1850      	adds	r0, r2, r1
 8007ece:	4283      	cmp	r3, r0
 8007ed0:	6011      	str	r1, [r2, #0]
 8007ed2:	d1e0      	bne.n	8007e96 <_free_r+0x22>
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4408      	add	r0, r1
 8007eda:	6010      	str	r0, [r2, #0]
 8007edc:	6053      	str	r3, [r2, #4]
 8007ede:	e7da      	b.n	8007e96 <_free_r+0x22>
 8007ee0:	d902      	bls.n	8007ee8 <_free_r+0x74>
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	e7d6      	b.n	8007e96 <_free_r+0x22>
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	1821      	adds	r1, r4, r0
 8007eec:	428b      	cmp	r3, r1
 8007eee:	bf01      	itttt	eq
 8007ef0:	6819      	ldreq	r1, [r3, #0]
 8007ef2:	685b      	ldreq	r3, [r3, #4]
 8007ef4:	1809      	addeq	r1, r1, r0
 8007ef6:	6021      	streq	r1, [r4, #0]
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	6054      	str	r4, [r2, #4]
 8007efc:	e7cb      	b.n	8007e96 <_free_r+0x22>
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20003a6c 	.word	0x20003a6c

08007f04 <sbrk_aligned>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4e0f      	ldr	r6, [pc, #60]	@ (8007f44 <sbrk_aligned+0x40>)
 8007f08:	460c      	mov	r4, r1
 8007f0a:	6831      	ldr	r1, [r6, #0]
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b911      	cbnz	r1, 8007f16 <sbrk_aligned+0x12>
 8007f10:	f000 fba8 	bl	8008664 <_sbrk_r>
 8007f14:	6030      	str	r0, [r6, #0]
 8007f16:	4621      	mov	r1, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 fba3 	bl	8008664 <_sbrk_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d103      	bne.n	8007f2a <sbrk_aligned+0x26>
 8007f22:	f04f 34ff 	mov.w	r4, #4294967295
 8007f26:	4620      	mov	r0, r4
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d0f8      	beq.n	8007f26 <sbrk_aligned+0x22>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 fb94 	bl	8008664 <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d1f2      	bne.n	8007f26 <sbrk_aligned+0x22>
 8007f40:	e7ef      	b.n	8007f22 <sbrk_aligned+0x1e>
 8007f42:	bf00      	nop
 8007f44:	20003a68 	.word	0x20003a68

08007f48 <_malloc_r>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	1ccd      	adds	r5, r1, #3
 8007f4e:	f025 0503 	bic.w	r5, r5, #3
 8007f52:	3508      	adds	r5, #8
 8007f54:	2d0c      	cmp	r5, #12
 8007f56:	bf38      	it	cc
 8007f58:	250c      	movcc	r5, #12
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	db01      	blt.n	8007f64 <_malloc_r+0x1c>
 8007f60:	42a9      	cmp	r1, r5
 8007f62:	d904      	bls.n	8007f6e <_malloc_r+0x26>
 8007f64:	230c      	movs	r3, #12
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008044 <_malloc_r+0xfc>
 8007f72:	f000 f869 	bl	8008048 <__malloc_lock>
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	bb44      	cbnz	r4, 8007fd0 <_malloc_r+0x88>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffbf 	bl	8007f04 <sbrk_aligned>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	4604      	mov	r4, r0
 8007f8a:	d158      	bne.n	800803e <_malloc_r+0xf6>
 8007f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f90:	4627      	mov	r7, r4
 8007f92:	2f00      	cmp	r7, #0
 8007f94:	d143      	bne.n	800801e <_malloc_r+0xd6>
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	d04b      	beq.n	8008032 <_malloc_r+0xea>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	eb04 0903 	add.w	r9, r4, r3
 8007fa4:	f000 fb5e 	bl	8008664 <_sbrk_r>
 8007fa8:	4581      	cmp	r9, r0
 8007faa:	d142      	bne.n	8008032 <_malloc_r+0xea>
 8007fac:	6821      	ldr	r1, [r4, #0]
 8007fae:	4630      	mov	r0, r6
 8007fb0:	1a6d      	subs	r5, r5, r1
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f7ff ffa6 	bl	8007f04 <sbrk_aligned>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d03a      	beq.n	8008032 <_malloc_r+0xea>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	442b      	add	r3, r5
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	bb62      	cbnz	r2, 8008024 <_malloc_r+0xdc>
 8007fca:	f8c8 7000 	str.w	r7, [r8]
 8007fce:	e00f      	b.n	8007ff0 <_malloc_r+0xa8>
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	1b52      	subs	r2, r2, r5
 8007fd4:	d420      	bmi.n	8008018 <_malloc_r+0xd0>
 8007fd6:	2a0b      	cmp	r2, #11
 8007fd8:	d917      	bls.n	800800a <_malloc_r+0xc2>
 8007fda:	1961      	adds	r1, r4, r5
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	6025      	str	r5, [r4, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	6059      	strne	r1, [r3, #4]
 8007fe4:	6863      	ldr	r3, [r4, #4]
 8007fe6:	bf08      	it	eq
 8007fe8:	f8c8 1000 	streq.w	r1, [r8]
 8007fec:	5162      	str	r2, [r4, r5]
 8007fee:	604b      	str	r3, [r1, #4]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f82f 	bl	8008054 <__malloc_unlock>
 8007ff6:	f104 000b 	add.w	r0, r4, #11
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	f020 0007 	bic.w	r0, r0, #7
 8008000:	1ac2      	subs	r2, r0, r3
 8008002:	bf1c      	itt	ne
 8008004:	1a1b      	subne	r3, r3, r0
 8008006:	50a3      	strne	r3, [r4, r2]
 8008008:	e7af      	b.n	8007f6a <_malloc_r+0x22>
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	42a3      	cmp	r3, r4
 800800e:	bf0c      	ite	eq
 8008010:	f8c8 2000 	streq.w	r2, [r8]
 8008014:	605a      	strne	r2, [r3, #4]
 8008016:	e7eb      	b.n	8007ff0 <_malloc_r+0xa8>
 8008018:	4623      	mov	r3, r4
 800801a:	6864      	ldr	r4, [r4, #4]
 800801c:	e7ae      	b.n	8007f7c <_malloc_r+0x34>
 800801e:	463c      	mov	r4, r7
 8008020:	687f      	ldr	r7, [r7, #4]
 8008022:	e7b6      	b.n	8007f92 <_malloc_r+0x4a>
 8008024:	461a      	mov	r2, r3
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	42a3      	cmp	r3, r4
 800802a:	d1fb      	bne.n	8008024 <_malloc_r+0xdc>
 800802c:	2300      	movs	r3, #0
 800802e:	6053      	str	r3, [r2, #4]
 8008030:	e7de      	b.n	8007ff0 <_malloc_r+0xa8>
 8008032:	230c      	movs	r3, #12
 8008034:	4630      	mov	r0, r6
 8008036:	6033      	str	r3, [r6, #0]
 8008038:	f000 f80c 	bl	8008054 <__malloc_unlock>
 800803c:	e794      	b.n	8007f68 <_malloc_r+0x20>
 800803e:	6005      	str	r5, [r0, #0]
 8008040:	e7d6      	b.n	8007ff0 <_malloc_r+0xa8>
 8008042:	bf00      	nop
 8008044:	20003a6c 	.word	0x20003a6c

08008048 <__malloc_lock>:
 8008048:	4801      	ldr	r0, [pc, #4]	@ (8008050 <__malloc_lock+0x8>)
 800804a:	f7ff befd 	b.w	8007e48 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	20003a64 	.word	0x20003a64

08008054 <__malloc_unlock>:
 8008054:	4801      	ldr	r0, [pc, #4]	@ (800805c <__malloc_unlock+0x8>)
 8008056:	f7ff bef8 	b.w	8007e4a <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	20003a64 	.word	0x20003a64

08008060 <__ssputs_r>:
 8008060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	461f      	mov	r7, r3
 8008066:	688e      	ldr	r6, [r1, #8]
 8008068:	4682      	mov	sl, r0
 800806a:	42be      	cmp	r6, r7
 800806c:	460c      	mov	r4, r1
 800806e:	4690      	mov	r8, r2
 8008070:	680b      	ldr	r3, [r1, #0]
 8008072:	d82d      	bhi.n	80080d0 <__ssputs_r+0x70>
 8008074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008078:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800807c:	d026      	beq.n	80080cc <__ssputs_r+0x6c>
 800807e:	6965      	ldr	r5, [r4, #20]
 8008080:	6909      	ldr	r1, [r1, #16]
 8008082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008086:	eba3 0901 	sub.w	r9, r3, r1
 800808a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800808e:	1c7b      	adds	r3, r7, #1
 8008090:	444b      	add	r3, r9
 8008092:	106d      	asrs	r5, r5, #1
 8008094:	429d      	cmp	r5, r3
 8008096:	bf38      	it	cc
 8008098:	461d      	movcc	r5, r3
 800809a:	0553      	lsls	r3, r2, #21
 800809c:	d527      	bpl.n	80080ee <__ssputs_r+0x8e>
 800809e:	4629      	mov	r1, r5
 80080a0:	f7ff ff52 	bl	8007f48 <_malloc_r>
 80080a4:	4606      	mov	r6, r0
 80080a6:	b360      	cbz	r0, 8008102 <__ssputs_r+0xa2>
 80080a8:	464a      	mov	r2, r9
 80080aa:	6921      	ldr	r1, [r4, #16]
 80080ac:	f7ff fed3 	bl	8007e56 <memcpy>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	6126      	str	r6, [r4, #16]
 80080be:	444e      	add	r6, r9
 80080c0:	6026      	str	r6, [r4, #0]
 80080c2:	463e      	mov	r6, r7
 80080c4:	6165      	str	r5, [r4, #20]
 80080c6:	eba5 0509 	sub.w	r5, r5, r9
 80080ca:	60a5      	str	r5, [r4, #8]
 80080cc:	42be      	cmp	r6, r7
 80080ce:	d900      	bls.n	80080d2 <__ssputs_r+0x72>
 80080d0:	463e      	mov	r6, r7
 80080d2:	4632      	mov	r2, r6
 80080d4:	4641      	mov	r1, r8
 80080d6:	6820      	ldr	r0, [r4, #0]
 80080d8:	f000 faaa 	bl	8008630 <memmove>
 80080dc:	2000      	movs	r0, #0
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	1b9b      	subs	r3, r3, r6
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	4433      	add	r3, r6
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	462a      	mov	r2, r5
 80080f0:	f000 fadb 	bl	80086aa <_realloc_r>
 80080f4:	4606      	mov	r6, r0
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d1e0      	bne.n	80080bc <__ssputs_r+0x5c>
 80080fa:	4650      	mov	r0, sl
 80080fc:	6921      	ldr	r1, [r4, #16]
 80080fe:	f7ff feb9 	bl	8007e74 <_free_r>
 8008102:	230c      	movs	r3, #12
 8008104:	f8ca 3000 	str.w	r3, [sl]
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f04f 30ff 	mov.w	r0, #4294967295
 800810e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	e7e9      	b.n	80080ea <__ssputs_r+0x8a>
	...

08008118 <_svfiprintf_r>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4698      	mov	r8, r3
 800811e:	898b      	ldrh	r3, [r1, #12]
 8008120:	4607      	mov	r7, r0
 8008122:	061b      	lsls	r3, r3, #24
 8008124:	460d      	mov	r5, r1
 8008126:	4614      	mov	r4, r2
 8008128:	b09d      	sub	sp, #116	@ 0x74
 800812a:	d510      	bpl.n	800814e <_svfiprintf_r+0x36>
 800812c:	690b      	ldr	r3, [r1, #16]
 800812e:	b973      	cbnz	r3, 800814e <_svfiprintf_r+0x36>
 8008130:	2140      	movs	r1, #64	@ 0x40
 8008132:	f7ff ff09 	bl	8007f48 <_malloc_r>
 8008136:	6028      	str	r0, [r5, #0]
 8008138:	6128      	str	r0, [r5, #16]
 800813a:	b930      	cbnz	r0, 800814a <_svfiprintf_r+0x32>
 800813c:	230c      	movs	r3, #12
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
 8008144:	b01d      	add	sp, #116	@ 0x74
 8008146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814a:	2340      	movs	r3, #64	@ 0x40
 800814c:	616b      	str	r3, [r5, #20]
 800814e:	2300      	movs	r3, #0
 8008150:	9309      	str	r3, [sp, #36]	@ 0x24
 8008152:	2320      	movs	r3, #32
 8008154:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008158:	2330      	movs	r3, #48	@ 0x30
 800815a:	f04f 0901 	mov.w	r9, #1
 800815e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008162:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082fc <_svfiprintf_r+0x1e4>
 8008166:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800816a:	4623      	mov	r3, r4
 800816c:	469a      	mov	sl, r3
 800816e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008172:	b10a      	cbz	r2, 8008178 <_svfiprintf_r+0x60>
 8008174:	2a25      	cmp	r2, #37	@ 0x25
 8008176:	d1f9      	bne.n	800816c <_svfiprintf_r+0x54>
 8008178:	ebba 0b04 	subs.w	fp, sl, r4
 800817c:	d00b      	beq.n	8008196 <_svfiprintf_r+0x7e>
 800817e:	465b      	mov	r3, fp
 8008180:	4622      	mov	r2, r4
 8008182:	4629      	mov	r1, r5
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff ff6b 	bl	8008060 <__ssputs_r>
 800818a:	3001      	adds	r0, #1
 800818c:	f000 80a7 	beq.w	80082de <_svfiprintf_r+0x1c6>
 8008190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008192:	445a      	add	r2, fp
 8008194:	9209      	str	r2, [sp, #36]	@ 0x24
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 809f 	beq.w	80082de <_svfiprintf_r+0x1c6>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081aa:	f10a 0a01 	add.w	sl, sl, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b8:	4654      	mov	r4, sl
 80081ba:	2205      	movs	r2, #5
 80081bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c0:	484e      	ldr	r0, [pc, #312]	@ (80082fc <_svfiprintf_r+0x1e4>)
 80081c2:	f000 fa64 	bl	800868e <memchr>
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	b9d8      	cbnz	r0, 8008202 <_svfiprintf_r+0xea>
 80081ca:	06d0      	lsls	r0, r2, #27
 80081cc:	bf44      	itt	mi
 80081ce:	2320      	movmi	r3, #32
 80081d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d4:	0711      	lsls	r1, r2, #28
 80081d6:	bf44      	itt	mi
 80081d8:	232b      	movmi	r3, #43	@ 0x2b
 80081da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081de:	f89a 3000 	ldrb.w	r3, [sl]
 80081e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e4:	d015      	beq.n	8008212 <_svfiprintf_r+0xfa>
 80081e6:	4654      	mov	r4, sl
 80081e8:	2000      	movs	r0, #0
 80081ea:	f04f 0c0a 	mov.w	ip, #10
 80081ee:	9a07      	ldr	r2, [sp, #28]
 80081f0:	4621      	mov	r1, r4
 80081f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f6:	3b30      	subs	r3, #48	@ 0x30
 80081f8:	2b09      	cmp	r3, #9
 80081fa:	d94b      	bls.n	8008294 <_svfiprintf_r+0x17c>
 80081fc:	b1b0      	cbz	r0, 800822c <_svfiprintf_r+0x114>
 80081fe:	9207      	str	r2, [sp, #28]
 8008200:	e014      	b.n	800822c <_svfiprintf_r+0x114>
 8008202:	eba0 0308 	sub.w	r3, r0, r8
 8008206:	fa09 f303 	lsl.w	r3, r9, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	46a2      	mov	sl, r4
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	e7d2      	b.n	80081b8 <_svfiprintf_r+0xa0>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d19      	adds	r1, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9103      	str	r1, [sp, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfbb      	ittet	lt
 800821e:	425b      	neglt	r3, r3
 8008220:	f042 0202 	orrlt.w	r2, r2, #2
 8008224:	9307      	strge	r3, [sp, #28]
 8008226:	9307      	strlt	r3, [sp, #28]
 8008228:	bfb8      	it	lt
 800822a:	9204      	strlt	r2, [sp, #16]
 800822c:	7823      	ldrb	r3, [r4, #0]
 800822e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008230:	d10a      	bne.n	8008248 <_svfiprintf_r+0x130>
 8008232:	7863      	ldrb	r3, [r4, #1]
 8008234:	2b2a      	cmp	r3, #42	@ 0x2a
 8008236:	d132      	bne.n	800829e <_svfiprintf_r+0x186>
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	3402      	adds	r4, #2
 800823c:	1d1a      	adds	r2, r3, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	9203      	str	r2, [sp, #12]
 8008242:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008246:	9305      	str	r3, [sp, #20]
 8008248:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008300 <_svfiprintf_r+0x1e8>
 800824c:	2203      	movs	r2, #3
 800824e:	4650      	mov	r0, sl
 8008250:	7821      	ldrb	r1, [r4, #0]
 8008252:	f000 fa1c 	bl	800868e <memchr>
 8008256:	b138      	cbz	r0, 8008268 <_svfiprintf_r+0x150>
 8008258:	2240      	movs	r2, #64	@ 0x40
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	eba0 000a 	sub.w	r0, r0, sl
 8008260:	4082      	lsls	r2, r0
 8008262:	4313      	orrs	r3, r2
 8008264:	3401      	adds	r4, #1
 8008266:	9304      	str	r3, [sp, #16]
 8008268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826c:	2206      	movs	r2, #6
 800826e:	4825      	ldr	r0, [pc, #148]	@ (8008304 <_svfiprintf_r+0x1ec>)
 8008270:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008274:	f000 fa0b 	bl	800868e <memchr>
 8008278:	2800      	cmp	r0, #0
 800827a:	d036      	beq.n	80082ea <_svfiprintf_r+0x1d2>
 800827c:	4b22      	ldr	r3, [pc, #136]	@ (8008308 <_svfiprintf_r+0x1f0>)
 800827e:	bb1b      	cbnz	r3, 80082c8 <_svfiprintf_r+0x1b0>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	3307      	adds	r3, #7
 8008284:	f023 0307 	bic.w	r3, r3, #7
 8008288:	3308      	adds	r3, #8
 800828a:	9303      	str	r3, [sp, #12]
 800828c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828e:	4433      	add	r3, r6
 8008290:	9309      	str	r3, [sp, #36]	@ 0x24
 8008292:	e76a      	b.n	800816a <_svfiprintf_r+0x52>
 8008294:	460c      	mov	r4, r1
 8008296:	2001      	movs	r0, #1
 8008298:	fb0c 3202 	mla	r2, ip, r2, r3
 800829c:	e7a8      	b.n	80081f0 <_svfiprintf_r+0xd8>
 800829e:	2300      	movs	r3, #0
 80082a0:	f04f 0c0a 	mov.w	ip, #10
 80082a4:	4619      	mov	r1, r3
 80082a6:	3401      	adds	r4, #1
 80082a8:	9305      	str	r3, [sp, #20]
 80082aa:	4620      	mov	r0, r4
 80082ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b0:	3a30      	subs	r2, #48	@ 0x30
 80082b2:	2a09      	cmp	r2, #9
 80082b4:	d903      	bls.n	80082be <_svfiprintf_r+0x1a6>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0c6      	beq.n	8008248 <_svfiprintf_r+0x130>
 80082ba:	9105      	str	r1, [sp, #20]
 80082bc:	e7c4      	b.n	8008248 <_svfiprintf_r+0x130>
 80082be:	4604      	mov	r4, r0
 80082c0:	2301      	movs	r3, #1
 80082c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c6:	e7f0      	b.n	80082aa <_svfiprintf_r+0x192>
 80082c8:	ab03      	add	r3, sp, #12
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	462a      	mov	r2, r5
 80082ce:	4638      	mov	r0, r7
 80082d0:	4b0e      	ldr	r3, [pc, #56]	@ (800830c <_svfiprintf_r+0x1f4>)
 80082d2:	a904      	add	r1, sp, #16
 80082d4:	f3af 8000 	nop.w
 80082d8:	1c42      	adds	r2, r0, #1
 80082da:	4606      	mov	r6, r0
 80082dc:	d1d6      	bne.n	800828c <_svfiprintf_r+0x174>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	065b      	lsls	r3, r3, #25
 80082e2:	f53f af2d 	bmi.w	8008140 <_svfiprintf_r+0x28>
 80082e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e8:	e72c      	b.n	8008144 <_svfiprintf_r+0x2c>
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	462a      	mov	r2, r5
 80082f0:	4638      	mov	r0, r7
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <_svfiprintf_r+0x1f4>)
 80082f4:	a904      	add	r1, sp, #16
 80082f6:	f000 f87d 	bl	80083f4 <_printf_i>
 80082fa:	e7ed      	b.n	80082d8 <_svfiprintf_r+0x1c0>
 80082fc:	08008c93 	.word	0x08008c93
 8008300:	08008c99 	.word	0x08008c99
 8008304:	08008c9d 	.word	0x08008c9d
 8008308:	00000000 	.word	0x00000000
 800830c:	08008061 	.word	0x08008061

08008310 <_printf_common>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	4616      	mov	r6, r2
 8008316:	4698      	mov	r8, r3
 8008318:	688a      	ldr	r2, [r1, #8]
 800831a:	690b      	ldr	r3, [r1, #16]
 800831c:	4607      	mov	r7, r0
 800831e:	4293      	cmp	r3, r2
 8008320:	bfb8      	it	lt
 8008322:	4613      	movlt	r3, r2
 8008324:	6033      	str	r3, [r6, #0]
 8008326:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800832a:	460c      	mov	r4, r1
 800832c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008330:	b10a      	cbz	r2, 8008336 <_printf_common+0x26>
 8008332:	3301      	adds	r3, #1
 8008334:	6033      	str	r3, [r6, #0]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	0699      	lsls	r1, r3, #26
 800833a:	bf42      	ittt	mi
 800833c:	6833      	ldrmi	r3, [r6, #0]
 800833e:	3302      	addmi	r3, #2
 8008340:	6033      	strmi	r3, [r6, #0]
 8008342:	6825      	ldr	r5, [r4, #0]
 8008344:	f015 0506 	ands.w	r5, r5, #6
 8008348:	d106      	bne.n	8008358 <_printf_common+0x48>
 800834a:	f104 0a19 	add.w	sl, r4, #25
 800834e:	68e3      	ldr	r3, [r4, #12]
 8008350:	6832      	ldr	r2, [r6, #0]
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	42ab      	cmp	r3, r5
 8008356:	dc2b      	bgt.n	80083b0 <_printf_common+0xa0>
 8008358:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	3b00      	subs	r3, #0
 8008360:	bf18      	it	ne
 8008362:	2301      	movne	r3, #1
 8008364:	0692      	lsls	r2, r2, #26
 8008366:	d430      	bmi.n	80083ca <_printf_common+0xba>
 8008368:	4641      	mov	r1, r8
 800836a:	4638      	mov	r0, r7
 800836c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008370:	47c8      	blx	r9
 8008372:	3001      	adds	r0, #1
 8008374:	d023      	beq.n	80083be <_printf_common+0xae>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	6922      	ldr	r2, [r4, #16]
 800837a:	f003 0306 	and.w	r3, r3, #6
 800837e:	2b04      	cmp	r3, #4
 8008380:	bf14      	ite	ne
 8008382:	2500      	movne	r5, #0
 8008384:	6833      	ldreq	r3, [r6, #0]
 8008386:	f04f 0600 	mov.w	r6, #0
 800838a:	bf08      	it	eq
 800838c:	68e5      	ldreq	r5, [r4, #12]
 800838e:	f104 041a 	add.w	r4, r4, #26
 8008392:	bf08      	it	eq
 8008394:	1aed      	subeq	r5, r5, r3
 8008396:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800839a:	bf08      	it	eq
 800839c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a0:	4293      	cmp	r3, r2
 80083a2:	bfc4      	itt	gt
 80083a4:	1a9b      	subgt	r3, r3, r2
 80083a6:	18ed      	addgt	r5, r5, r3
 80083a8:	42b5      	cmp	r5, r6
 80083aa:	d11a      	bne.n	80083e2 <_printf_common+0xd2>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e008      	b.n	80083c2 <_printf_common+0xb2>
 80083b0:	2301      	movs	r3, #1
 80083b2:	4652      	mov	r2, sl
 80083b4:	4641      	mov	r1, r8
 80083b6:	4638      	mov	r0, r7
 80083b8:	47c8      	blx	r9
 80083ba:	3001      	adds	r0, #1
 80083bc:	d103      	bne.n	80083c6 <_printf_common+0xb6>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c6:	3501      	adds	r5, #1
 80083c8:	e7c1      	b.n	800834e <_printf_common+0x3e>
 80083ca:	2030      	movs	r0, #48	@ 0x30
 80083cc:	18e1      	adds	r1, r4, r3
 80083ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083d8:	4422      	add	r2, r4
 80083da:	3302      	adds	r3, #2
 80083dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083e0:	e7c2      	b.n	8008368 <_printf_common+0x58>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4622      	mov	r2, r4
 80083e6:	4641      	mov	r1, r8
 80083e8:	4638      	mov	r0, r7
 80083ea:	47c8      	blx	r9
 80083ec:	3001      	adds	r0, #1
 80083ee:	d0e6      	beq.n	80083be <_printf_common+0xae>
 80083f0:	3601      	adds	r6, #1
 80083f2:	e7d9      	b.n	80083a8 <_printf_common+0x98>

080083f4 <_printf_i>:
 80083f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	7e0f      	ldrb	r7, [r1, #24]
 80083fa:	4691      	mov	r9, r2
 80083fc:	2f78      	cmp	r7, #120	@ 0x78
 80083fe:	4680      	mov	r8, r0
 8008400:	460c      	mov	r4, r1
 8008402:	469a      	mov	sl, r3
 8008404:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800840a:	d807      	bhi.n	800841c <_printf_i+0x28>
 800840c:	2f62      	cmp	r7, #98	@ 0x62
 800840e:	d80a      	bhi.n	8008426 <_printf_i+0x32>
 8008410:	2f00      	cmp	r7, #0
 8008412:	f000 80d1 	beq.w	80085b8 <_printf_i+0x1c4>
 8008416:	2f58      	cmp	r7, #88	@ 0x58
 8008418:	f000 80b8 	beq.w	800858c <_printf_i+0x198>
 800841c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008424:	e03a      	b.n	800849c <_printf_i+0xa8>
 8008426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800842a:	2b15      	cmp	r3, #21
 800842c:	d8f6      	bhi.n	800841c <_printf_i+0x28>
 800842e:	a101      	add	r1, pc, #4	@ (adr r1, 8008434 <_printf_i+0x40>)
 8008430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008434:	0800848d 	.word	0x0800848d
 8008438:	080084a1 	.word	0x080084a1
 800843c:	0800841d 	.word	0x0800841d
 8008440:	0800841d 	.word	0x0800841d
 8008444:	0800841d 	.word	0x0800841d
 8008448:	0800841d 	.word	0x0800841d
 800844c:	080084a1 	.word	0x080084a1
 8008450:	0800841d 	.word	0x0800841d
 8008454:	0800841d 	.word	0x0800841d
 8008458:	0800841d 	.word	0x0800841d
 800845c:	0800841d 	.word	0x0800841d
 8008460:	0800859f 	.word	0x0800859f
 8008464:	080084cb 	.word	0x080084cb
 8008468:	08008559 	.word	0x08008559
 800846c:	0800841d 	.word	0x0800841d
 8008470:	0800841d 	.word	0x0800841d
 8008474:	080085c1 	.word	0x080085c1
 8008478:	0800841d 	.word	0x0800841d
 800847c:	080084cb 	.word	0x080084cb
 8008480:	0800841d 	.word	0x0800841d
 8008484:	0800841d 	.word	0x0800841d
 8008488:	08008561 	.word	0x08008561
 800848c:	6833      	ldr	r3, [r6, #0]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6032      	str	r2, [r6, #0]
 8008494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800849c:	2301      	movs	r3, #1
 800849e:	e09c      	b.n	80085da <_printf_i+0x1e6>
 80084a0:	6833      	ldr	r3, [r6, #0]
 80084a2:	6820      	ldr	r0, [r4, #0]
 80084a4:	1d19      	adds	r1, r3, #4
 80084a6:	6031      	str	r1, [r6, #0]
 80084a8:	0606      	lsls	r6, r0, #24
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0xbc>
 80084ac:	681d      	ldr	r5, [r3, #0]
 80084ae:	e003      	b.n	80084b8 <_printf_i+0xc4>
 80084b0:	0645      	lsls	r5, r0, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0xb8>
 80084b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	da03      	bge.n	80084c4 <_printf_i+0xd0>
 80084bc:	232d      	movs	r3, #45	@ 0x2d
 80084be:	426d      	negs	r5, r5
 80084c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084c4:	230a      	movs	r3, #10
 80084c6:	4858      	ldr	r0, [pc, #352]	@ (8008628 <_printf_i+0x234>)
 80084c8:	e011      	b.n	80084ee <_printf_i+0xfa>
 80084ca:	6821      	ldr	r1, [r4, #0]
 80084cc:	6833      	ldr	r3, [r6, #0]
 80084ce:	0608      	lsls	r0, r1, #24
 80084d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80084d4:	d402      	bmi.n	80084dc <_printf_i+0xe8>
 80084d6:	0649      	lsls	r1, r1, #25
 80084d8:	bf48      	it	mi
 80084da:	b2ad      	uxthmi	r5, r5
 80084dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80084de:	6033      	str	r3, [r6, #0]
 80084e0:	bf14      	ite	ne
 80084e2:	230a      	movne	r3, #10
 80084e4:	2308      	moveq	r3, #8
 80084e6:	4850      	ldr	r0, [pc, #320]	@ (8008628 <_printf_i+0x234>)
 80084e8:	2100      	movs	r1, #0
 80084ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084ee:	6866      	ldr	r6, [r4, #4]
 80084f0:	2e00      	cmp	r6, #0
 80084f2:	60a6      	str	r6, [r4, #8]
 80084f4:	db05      	blt.n	8008502 <_printf_i+0x10e>
 80084f6:	6821      	ldr	r1, [r4, #0]
 80084f8:	432e      	orrs	r6, r5
 80084fa:	f021 0104 	bic.w	r1, r1, #4
 80084fe:	6021      	str	r1, [r4, #0]
 8008500:	d04b      	beq.n	800859a <_printf_i+0x1a6>
 8008502:	4616      	mov	r6, r2
 8008504:	fbb5 f1f3 	udiv	r1, r5, r3
 8008508:	fb03 5711 	mls	r7, r3, r1, r5
 800850c:	5dc7      	ldrb	r7, [r0, r7]
 800850e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008512:	462f      	mov	r7, r5
 8008514:	42bb      	cmp	r3, r7
 8008516:	460d      	mov	r5, r1
 8008518:	d9f4      	bls.n	8008504 <_printf_i+0x110>
 800851a:	2b08      	cmp	r3, #8
 800851c:	d10b      	bne.n	8008536 <_printf_i+0x142>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	07df      	lsls	r7, r3, #31
 8008522:	d508      	bpl.n	8008536 <_printf_i+0x142>
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	6861      	ldr	r1, [r4, #4]
 8008528:	4299      	cmp	r1, r3
 800852a:	bfde      	ittt	le
 800852c:	2330      	movle	r3, #48	@ 0x30
 800852e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008532:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008536:	1b92      	subs	r2, r2, r6
 8008538:	6122      	str	r2, [r4, #16]
 800853a:	464b      	mov	r3, r9
 800853c:	4621      	mov	r1, r4
 800853e:	4640      	mov	r0, r8
 8008540:	f8cd a000 	str.w	sl, [sp]
 8008544:	aa03      	add	r2, sp, #12
 8008546:	f7ff fee3 	bl	8008310 <_printf_common>
 800854a:	3001      	adds	r0, #1
 800854c:	d14a      	bne.n	80085e4 <_printf_i+0x1f0>
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	b004      	add	sp, #16
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	f043 0320 	orr.w	r3, r3, #32
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	2778      	movs	r7, #120	@ 0x78
 8008562:	4832      	ldr	r0, [pc, #200]	@ (800862c <_printf_i+0x238>)
 8008564:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	6831      	ldr	r1, [r6, #0]
 800856c:	061f      	lsls	r7, r3, #24
 800856e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008572:	d402      	bmi.n	800857a <_printf_i+0x186>
 8008574:	065f      	lsls	r7, r3, #25
 8008576:	bf48      	it	mi
 8008578:	b2ad      	uxthmi	r5, r5
 800857a:	6031      	str	r1, [r6, #0]
 800857c:	07d9      	lsls	r1, r3, #31
 800857e:	bf44      	itt	mi
 8008580:	f043 0320 	orrmi.w	r3, r3, #32
 8008584:	6023      	strmi	r3, [r4, #0]
 8008586:	b11d      	cbz	r5, 8008590 <_printf_i+0x19c>
 8008588:	2310      	movs	r3, #16
 800858a:	e7ad      	b.n	80084e8 <_printf_i+0xf4>
 800858c:	4826      	ldr	r0, [pc, #152]	@ (8008628 <_printf_i+0x234>)
 800858e:	e7e9      	b.n	8008564 <_printf_i+0x170>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	f023 0320 	bic.w	r3, r3, #32
 8008596:	6023      	str	r3, [r4, #0]
 8008598:	e7f6      	b.n	8008588 <_printf_i+0x194>
 800859a:	4616      	mov	r6, r2
 800859c:	e7bd      	b.n	800851a <_printf_i+0x126>
 800859e:	6833      	ldr	r3, [r6, #0]
 80085a0:	6825      	ldr	r5, [r4, #0]
 80085a2:	1d18      	adds	r0, r3, #4
 80085a4:	6961      	ldr	r1, [r4, #20]
 80085a6:	6030      	str	r0, [r6, #0]
 80085a8:	062e      	lsls	r6, r5, #24
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	d501      	bpl.n	80085b2 <_printf_i+0x1be>
 80085ae:	6019      	str	r1, [r3, #0]
 80085b0:	e002      	b.n	80085b8 <_printf_i+0x1c4>
 80085b2:	0668      	lsls	r0, r5, #25
 80085b4:	d5fb      	bpl.n	80085ae <_printf_i+0x1ba>
 80085b6:	8019      	strh	r1, [r3, #0]
 80085b8:	2300      	movs	r3, #0
 80085ba:	4616      	mov	r6, r2
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	e7bc      	b.n	800853a <_printf_i+0x146>
 80085c0:	6833      	ldr	r3, [r6, #0]
 80085c2:	2100      	movs	r1, #0
 80085c4:	1d1a      	adds	r2, r3, #4
 80085c6:	6032      	str	r2, [r6, #0]
 80085c8:	681e      	ldr	r6, [r3, #0]
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 f85e 	bl	800868e <memchr>
 80085d2:	b108      	cbz	r0, 80085d8 <_printf_i+0x1e4>
 80085d4:	1b80      	subs	r0, r0, r6
 80085d6:	6060      	str	r0, [r4, #4]
 80085d8:	6863      	ldr	r3, [r4, #4]
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	2300      	movs	r3, #0
 80085de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085e2:	e7aa      	b.n	800853a <_printf_i+0x146>
 80085e4:	4632      	mov	r2, r6
 80085e6:	4649      	mov	r1, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	47d0      	blx	sl
 80085ee:	3001      	adds	r0, #1
 80085f0:	d0ad      	beq.n	800854e <_printf_i+0x15a>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	079b      	lsls	r3, r3, #30
 80085f6:	d413      	bmi.n	8008620 <_printf_i+0x22c>
 80085f8:	68e0      	ldr	r0, [r4, #12]
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	4298      	cmp	r0, r3
 80085fe:	bfb8      	it	lt
 8008600:	4618      	movlt	r0, r3
 8008602:	e7a6      	b.n	8008552 <_printf_i+0x15e>
 8008604:	2301      	movs	r3, #1
 8008606:	4632      	mov	r2, r6
 8008608:	4649      	mov	r1, r9
 800860a:	4640      	mov	r0, r8
 800860c:	47d0      	blx	sl
 800860e:	3001      	adds	r0, #1
 8008610:	d09d      	beq.n	800854e <_printf_i+0x15a>
 8008612:	3501      	adds	r5, #1
 8008614:	68e3      	ldr	r3, [r4, #12]
 8008616:	9903      	ldr	r1, [sp, #12]
 8008618:	1a5b      	subs	r3, r3, r1
 800861a:	42ab      	cmp	r3, r5
 800861c:	dcf2      	bgt.n	8008604 <_printf_i+0x210>
 800861e:	e7eb      	b.n	80085f8 <_printf_i+0x204>
 8008620:	2500      	movs	r5, #0
 8008622:	f104 0619 	add.w	r6, r4, #25
 8008626:	e7f5      	b.n	8008614 <_printf_i+0x220>
 8008628:	08008ca4 	.word	0x08008ca4
 800862c:	08008cb5 	.word	0x08008cb5

08008630 <memmove>:
 8008630:	4288      	cmp	r0, r1
 8008632:	b510      	push	{r4, lr}
 8008634:	eb01 0402 	add.w	r4, r1, r2
 8008638:	d902      	bls.n	8008640 <memmove+0x10>
 800863a:	4284      	cmp	r4, r0
 800863c:	4623      	mov	r3, r4
 800863e:	d807      	bhi.n	8008650 <memmove+0x20>
 8008640:	1e43      	subs	r3, r0, #1
 8008642:	42a1      	cmp	r1, r4
 8008644:	d008      	beq.n	8008658 <memmove+0x28>
 8008646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800864a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800864e:	e7f8      	b.n	8008642 <memmove+0x12>
 8008650:	4601      	mov	r1, r0
 8008652:	4402      	add	r2, r0
 8008654:	428a      	cmp	r2, r1
 8008656:	d100      	bne.n	800865a <memmove+0x2a>
 8008658:	bd10      	pop	{r4, pc}
 800865a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800865e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008662:	e7f7      	b.n	8008654 <memmove+0x24>

08008664 <_sbrk_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	2300      	movs	r3, #0
 8008668:	4d05      	ldr	r5, [pc, #20]	@ (8008680 <_sbrk_r+0x1c>)
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	602b      	str	r3, [r5, #0]
 8008670:	f7f9 fd70 	bl	8002154 <_sbrk>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d102      	bne.n	800867e <_sbrk_r+0x1a>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	b103      	cbz	r3, 800867e <_sbrk_r+0x1a>
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	20003a60 	.word	0x20003a60

08008684 <__aeabi_memset>:
 8008684:	4613      	mov	r3, r2
 8008686:	460a      	mov	r2, r1
 8008688:	4619      	mov	r1, r3
 800868a:	f7ff bb27 	b.w	8007cdc <memset>

0800868e <memchr>:
 800868e:	4603      	mov	r3, r0
 8008690:	b510      	push	{r4, lr}
 8008692:	b2c9      	uxtb	r1, r1
 8008694:	4402      	add	r2, r0
 8008696:	4293      	cmp	r3, r2
 8008698:	4618      	mov	r0, r3
 800869a:	d101      	bne.n	80086a0 <memchr+0x12>
 800869c:	2000      	movs	r0, #0
 800869e:	e003      	b.n	80086a8 <memchr+0x1a>
 80086a0:	7804      	ldrb	r4, [r0, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	428c      	cmp	r4, r1
 80086a6:	d1f6      	bne.n	8008696 <memchr+0x8>
 80086a8:	bd10      	pop	{r4, pc}

080086aa <_realloc_r>:
 80086aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	4607      	mov	r7, r0
 80086b0:	4614      	mov	r4, r2
 80086b2:	460d      	mov	r5, r1
 80086b4:	b921      	cbnz	r1, 80086c0 <_realloc_r+0x16>
 80086b6:	4611      	mov	r1, r2
 80086b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086bc:	f7ff bc44 	b.w	8007f48 <_malloc_r>
 80086c0:	b92a      	cbnz	r2, 80086ce <_realloc_r+0x24>
 80086c2:	f7ff fbd7 	bl	8007e74 <_free_r>
 80086c6:	4625      	mov	r5, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ce:	f000 f81a 	bl	8008706 <_malloc_usable_size_r>
 80086d2:	4284      	cmp	r4, r0
 80086d4:	4606      	mov	r6, r0
 80086d6:	d802      	bhi.n	80086de <_realloc_r+0x34>
 80086d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086dc:	d8f4      	bhi.n	80086c8 <_realloc_r+0x1e>
 80086de:	4621      	mov	r1, r4
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7ff fc31 	bl	8007f48 <_malloc_r>
 80086e6:	4680      	mov	r8, r0
 80086e8:	b908      	cbnz	r0, 80086ee <_realloc_r+0x44>
 80086ea:	4645      	mov	r5, r8
 80086ec:	e7ec      	b.n	80086c8 <_realloc_r+0x1e>
 80086ee:	42b4      	cmp	r4, r6
 80086f0:	4622      	mov	r2, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	bf28      	it	cs
 80086f6:	4632      	movcs	r2, r6
 80086f8:	f7ff fbad 	bl	8007e56 <memcpy>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4638      	mov	r0, r7
 8008700:	f7ff fbb8 	bl	8007e74 <_free_r>
 8008704:	e7f1      	b.n	80086ea <_realloc_r+0x40>

08008706 <_malloc_usable_size_r>:
 8008706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800870a:	1f18      	subs	r0, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfbc      	itt	lt
 8008710:	580b      	ldrlt	r3, [r1, r0]
 8008712:	18c0      	addlt	r0, r0, r3
 8008714:	4770      	bx	lr
	...

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
