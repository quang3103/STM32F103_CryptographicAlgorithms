
NUCLEO-F103RB_SeedAndKey_DRNG_AES128.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008510  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08008620  08008620  00009620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  08008bb8  08008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080090b8  080090b8  0000b0bc  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  080090b8  080090b8  0000a0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080090c0  080090c0  0000b0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080090c0  080090c0  0000a0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080090c4  080090c4  0000a0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000000bc  20000000  080090c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000032a0  200000c0  08009184  0000b0c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003360  08009184  0000b360  2**0
                  ALLOC
 12 .ARM.attributes 0000002d  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c59  00000000  00000000  0000b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003502  00000000  00000000  00022d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00026248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd0  00000000  00000000  000276a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a173  00000000  00000000  00028670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cc4  00000000  00000000  000427e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098785  00000000  00000000  000594a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f1c2c  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000034  00000000  00000000  000f1c70  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00005bb4  00000000  00000000  000f1ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  000f7858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008608 	.word	0x08008608

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	08008608 	.word	0x08008608

08000150 <CMOX_CBC_ENC_AESFAST_IMPL>:
 8000150:	0800046d 08008938                       m...8...

08000158 <cmox_cbc_encrypt>:
 8000158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015a:	b0cb      	sub	sp, #300	@ 0x12c
 800015c:	0006      	movs	r6, r0
 800015e:	000c      	movs	r4, r1
 8000160:	0017      	movs	r7, r2
 8000162:	001d      	movs	r5, r3
 8000164:	4909      	ldr	r1, [pc, #36]	@ (800018c <cmox_cbc_encrypt+0x34>)
 8000166:	a805      	add	r0, sp, #20
 8000168:	f000 f86e 	bl	8000248 <cmox_cbc_construct>
 800016c:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 800016e:	9104      	str	r1, [sp, #16]
 8000170:	9952      	ldr	r1, [sp, #328]	@ 0x148
 8000172:	9103      	str	r1, [sp, #12]
 8000174:	9951      	ldr	r1, [sp, #324]	@ 0x144
 8000176:	9102      	str	r1, [sp, #8]
 8000178:	9950      	ldr	r1, [sp, #320]	@ 0x140
 800017a:	9101      	str	r1, [sp, #4]
 800017c:	9500      	str	r5, [sp, #0]
 800017e:	003b      	movs	r3, r7
 8000180:	0022      	movs	r2, r4
 8000182:	0031      	movs	r1, r6
 8000184:	f000 f9a8 	bl	80004d8 <cmox_cipher_innerCompute>
 8000188:	b04b      	add	sp, #300	@ 0x12c
 800018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800018c:	08000150 	.word	0x08000150

08000190 <cmox_cbc_getByCipher>:
 8000190:	6802      	ldr	r2, [r0, #0]
 8000192:	428a      	cmp	r2, r1
 8000194:	d000      	beq.n	8000198 <cmox_cbc_getByCipher+0x8>
 8000196:	2000      	movs	r0, #0
 8000198:	4770      	bx	lr

0800019a <cmox_cbc_cleanup>:
 800019a:	b510      	push	{r4, lr}
 800019c:	2480      	movs	r4, #128	@ 0x80
 800019e:	0264      	lsls	r4, r4, #9
 80001a0:	f7ff fff6 	bl	8000190 <cmox_cbc_getByCipher>
 80001a4:	2800      	cmp	r0, #0
 80001a6:	d101      	bne.n	80001ac <cmox_cbc_cleanup+0x12>
 80001a8:	1ce4      	adds	r4, r4, #3
 80001aa:	e003      	b.n	80001b4 <cmox_cbc_cleanup+0x1a>
 80001ac:	218a      	movs	r1, #138	@ 0x8a
 80001ae:	0049      	lsls	r1, r1, #1
 80001b0:	f007 fdc6 	bl	8007d40 <__aeabi_memclr>
 80001b4:	0020      	movs	r0, r4
 80001b6:	bd10      	pop	{r4, pc}

080001b8 <cmox_cbc_init>:
 80001b8:	b538      	push	{r3, r4, r5, lr}
 80001ba:	0004      	movs	r4, r0
 80001bc:	4d07      	ldr	r5, [pc, #28]	@ (80001dc <cmox_cbc_init+0x24>)
 80001be:	2c00      	cmp	r4, #0
 80001c0:	d009      	beq.n	80001d6 <cmox_cbc_init+0x1e>
 80001c2:	f7ff ffe5 	bl	8000190 <cmox_cbc_getByCipher>
 80001c6:	2800      	cmp	r0, #0
 80001c8:	d005      	beq.n	80001d6 <cmox_cbc_init+0x1e>
 80001ca:	0001      	movs	r1, r0
 80001cc:	3108      	adds	r1, #8
 80001ce:	0020      	movs	r0, r4
 80001d0:	f000 f9b3 	bl	800053a <cmox_cipherMode_init>
 80001d4:	0005      	movs	r5, r0
 80001d6:	0028      	movs	r0, r5
 80001d8:	bd32      	pop	{r1, r4, r5, pc}
 80001da:	bf00      	nop
 80001dc:	00010003 	.word	0x00010003

080001e0 <cmox_cbc_setKey>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	000e      	movs	r6, r1
 80001e4:	0014      	movs	r4, r2
 80001e6:	0019      	movs	r1, r3
 80001e8:	4d07      	ldr	r5, [pc, #28]	@ (8000208 <cmox_cbc_setKey+0x28>)
 80001ea:	2800      	cmp	r0, #0
 80001ec:	d003      	beq.n	80001f6 <cmox_cbc_setKey+0x16>
 80001ee:	f7ff ffcf 	bl	8000190 <cmox_cbc_getByCipher>
 80001f2:	2800      	cmp	r0, #0
 80001f4:	d101      	bne.n	80001fa <cmox_cbc_setKey+0x1a>
 80001f6:	0028      	movs	r0, r5
 80001f8:	bd70      	pop	{r4, r5, r6, pc}
 80001fa:	0022      	movs	r2, r4
 80001fc:	0031      	movs	r1, r6
 80001fe:	3008      	adds	r0, #8
 8000200:	f000 f9a2 	bl	8000548 <cmox_cipherMode_setKey>
 8000204:	bd70      	pop	{r4, r5, r6, pc}
 8000206:	bf00      	nop
 8000208:	00010003 	.word	0x00010003

0800020c <cmox_cbc_setIV>:
 800020c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800020e:	0006      	movs	r6, r0
 8000210:	000d      	movs	r5, r1
 8000212:	0014      	movs	r4, r2
 8000214:	0019      	movs	r1, r3
 8000216:	2e00      	cmp	r6, #0
 8000218:	d003      	beq.n	8000222 <cmox_cbc_setIV+0x16>
 800021a:	f7ff ffb9 	bl	8000190 <cmox_cbc_getByCipher>
 800021e:	2800      	cmp	r0, #0
 8000220:	d101      	bne.n	8000226 <cmox_cbc_setIV+0x1a>
 8000222:	4808      	ldr	r0, [pc, #32]	@ (8000244 <cmox_cbc_setIV+0x38>)
 8000224:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000226:	0023      	movs	r3, r4
 8000228:	2b10      	cmp	r3, #16
 800022a:	d101      	bne.n	8000230 <cmox_cbc_setIV+0x24>
 800022c:	2101      	movs	r1, #1
 800022e:	e000      	b.n	8000232 <cmox_cbc_setIV+0x26>
 8000230:	2100      	movs	r1, #0
 8000232:	002a      	movs	r2, r5
 8000234:	9100      	str	r1, [sp, #0]
 8000236:	2182      	movs	r1, #130	@ 0x82
 8000238:	0049      	lsls	r1, r1, #1
 800023a:	1841      	adds	r1, r0, r1
 800023c:	0030      	movs	r0, r6
 800023e:	f000 fb63 	bl	8000908 <cmox_cipherMode_setIV>
 8000242:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8000244:	00010003 	.word	0x00010003

08000248 <cmox_cbc_construct>:
 8000248:	b580      	push	{r7, lr}
 800024a:	000a      	movs	r2, r1
 800024c:	6851      	ldr	r1, [r2, #4]
 800024e:	6809      	ldr	r1, [r1, #0]
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	4790      	blx	r2
 8000254:	bd02      	pop	{r1, pc}
	...

08000258 <cmox_cbc_encrypt_cleanup>:
 8000258:	b580      	push	{r7, lr}
 800025a:	4902      	ldr	r1, [pc, #8]	@ (8000264 <cmox_cbc_encrypt_cleanup+0xc>)
 800025c:	f7ff ff9d 	bl	800019a <cmox_cbc_cleanup>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	bf00      	nop
 8000264:	080086f8 	.word	0x080086f8

08000268 <cmox_cbc_encrypt_init>:
 8000268:	b580      	push	{r7, lr}
 800026a:	4902      	ldr	r1, [pc, #8]	@ (8000274 <cmox_cbc_encrypt_init+0xc>)
 800026c:	f7ff ffa4 	bl	80001b8 <cmox_cbc_init>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	bf00      	nop
 8000274:	080086f8 	.word	0x080086f8

08000278 <cmox_cbc_encrypt_setKey>:
 8000278:	b580      	push	{r7, lr}
 800027a:	4b02      	ldr	r3, [pc, #8]	@ (8000284 <cmox_cbc_encrypt_setKey+0xc>)
 800027c:	f7ff ffb0 	bl	80001e0 <cmox_cbc_setKey>
 8000280:	bd02      	pop	{r1, pc}
 8000282:	bf00      	nop
 8000284:	080086f8 	.word	0x080086f8

08000288 <cmox_cbc_encrypt_setIV>:
 8000288:	b580      	push	{r7, lr}
 800028a:	4b02      	ldr	r3, [pc, #8]	@ (8000294 <cmox_cbc_encrypt_setIV+0xc>)
 800028c:	f7ff ffbe 	bl	800020c <cmox_cbc_setIV>
 8000290:	bd02      	pop	{r1, pc}
 8000292:	bf00      	nop
 8000294:	080086f8 	.word	0x080086f8

08000298 <cmox_cbc_encrypt>:
 8000298:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 800029a:	b08c      	sub	sp, #48	@ 0x30
 800029c:	000c      	movs	r4, r1
 800029e:	001e      	movs	r6, r3
 80002a0:	2a10      	cmp	r2, #16
 80002a2:	d309      	bcc.n	80002b8 <cmox_cbc_encrypt+0x20>
 80002a4:	0005      	movs	r5, r0
 80002a6:	7928      	ldrb	r0, [r5, #4]
 80002a8:	07c0      	lsls	r0, r0, #31
 80002aa:	d505      	bpl.n	80002b8 <cmox_cbc_encrypt+0x20>
 80002ac:	496c      	ldr	r1, [pc, #432]	@ (8000460 <cmox_cbc_encrypt+0x1c8>)
 80002ae:	0028      	movs	r0, r5
 80002b0:	f7ff ff6e 	bl	8000190 <cmox_cbc_getByCipher>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d101      	bne.n	80002bc <cmox_cbc_encrypt+0x24>
 80002b8:	486a      	ldr	r0, [pc, #424]	@ (8000464 <cmox_cbc_encrypt+0x1cc>)
 80002ba:	e0ce      	b.n	800045a <cmox_cbc_encrypt+0x1c2>
 80002bc:	7c01      	ldrb	r1, [r0, #16]
 80002be:	2205      	movs	r2, #5
 80002c0:	400a      	ands	r2, r1
 80002c2:	2a05      	cmp	r2, #5
 80002c4:	d001      	beq.n	80002ca <cmox_cbc_encrypt+0x32>
 80002c6:	4868      	ldr	r0, [pc, #416]	@ (8000468 <cmox_cbc_encrypt+0x1d0>)
 80002c8:	e0c7      	b.n	800045a <cmox_cbc_encrypt+0x1c2>
 80002ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d001      	beq.n	80002d4 <cmox_cbc_encrypt+0x3c>
 80002d0:	2100      	movs	r1, #0
 80002d2:	6011      	str	r1, [r2, #0]
 80002d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80002d6:	0709      	lsls	r1, r1, #28
 80002d8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80002da:	d003      	beq.n	80002e4 <cmox_cbc_encrypt+0x4c>
 80002dc:	210f      	movs	r1, #15
 80002de:	438f      	bics	r7, r1
 80002e0:	2100      	movs	r1, #0
 80002e2:	6069      	str	r1, [r5, #4]
 80002e4:	9400      	str	r4, [sp, #0]
 80002e6:	9605      	str	r6, [sp, #20]
 80002e8:	0016      	movs	r6, r2
 80002ea:	0005      	movs	r5, r0
 80002ec:	2400      	movs	r4, #0
 80002ee:	e022      	b.n	8000336 <cmox_cbc_encrypt+0x9e>
 80002f0:	a901      	add	r1, sp, #4
 80002f2:	9800      	ldr	r0, [sp, #0]
 80002f4:	1900      	adds	r0, r0, r4
 80002f6:	f000 fb43 	bl	8000980 <convert_block_2_words>
 80002fa:	2082      	movs	r0, #130	@ 0x82
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	1829      	adds	r1, r5, r0
 8000300:	a801      	add	r0, sp, #4
 8000302:	f000 fb66 	bl	80009d2 <xor_blocks>
 8000306:	aa01      	add	r2, sp, #4
 8000308:	a901      	add	r1, sp, #4
 800030a:	0028      	movs	r0, r5
 800030c:	3008      	adds	r0, #8
 800030e:	68ab      	ldr	r3, [r5, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4798      	blx	r3
 8000314:	9805      	ldr	r0, [sp, #20]
 8000316:	1901      	adds	r1, r0, r4
 8000318:	a801      	add	r0, sp, #4
 800031a:	f000 fb45 	bl	80009a8 <convert_block_2_bytes>
 800031e:	2082      	movs	r0, #130	@ 0x82
 8000320:	0040      	lsls	r0, r0, #1
 8000322:	1829      	adds	r1, r5, r0
 8000324:	a801      	add	r0, sp, #4
 8000326:	f000 fb60 	bl	80009ea <copy_block>
 800032a:	2e00      	cmp	r6, #0
 800032c:	d002      	beq.n	8000334 <cmox_cbc_encrypt+0x9c>
 800032e:	6830      	ldr	r0, [r6, #0]
 8000330:	3010      	adds	r0, #16
 8000332:	6030      	str	r0, [r6, #0]
 8000334:	3410      	adds	r4, #16
 8000336:	42bc      	cmp	r4, r7
 8000338:	d3da      	bcc.n	80002f0 <cmox_cbc_encrypt+0x58>
 800033a:	9805      	ldr	r0, [sp, #20]
 800033c:	9612      	str	r6, [sp, #72]	@ 0x48
 800033e:	0029      	movs	r1, r5
 8000340:	003a      	movs	r2, r7
 8000342:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000344:	429a      	cmp	r2, r3
 8000346:	d300      	bcc.n	800034a <cmox_cbc_encrypt+0xb2>
 8000348:	e085      	b.n	8000456 <cmox_cbc_encrypt+0x1be>
 800034a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800034c:	1a9b      	subs	r3, r3, r2
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	2400      	movs	r4, #0
 8000352:	e02a      	b.n	80003aa <cmox_cbc_encrypt+0x112>
 8000354:	00a5      	lsls	r5, r4, #2
 8000356:	1955      	adds	r5, r2, r5
 8000358:	9506      	str	r5, [sp, #24]
 800035a:	9d00      	ldr	r5, [sp, #0]
 800035c:	9e06      	ldr	r6, [sp, #24]
 800035e:	19ad      	adds	r5, r5, r6
 8000360:	782e      	ldrb	r6, [r5, #0]
 8000362:	0636      	lsls	r6, r6, #24
 8000364:	786f      	ldrb	r7, [r5, #1]
 8000366:	043f      	lsls	r7, r7, #16
 8000368:	4337      	orrs	r7, r6
 800036a:	78ae      	ldrb	r6, [r5, #2]
 800036c:	0236      	lsls	r6, r6, #8
 800036e:	433e      	orrs	r6, r7
 8000370:	78ed      	ldrb	r5, [r5, #3]
 8000372:	4335      	orrs	r5, r6
 8000374:	00a6      	lsls	r6, r4, #2
 8000376:	af01      	add	r7, sp, #4
 8000378:	19bf      	adds	r7, r7, r6
 800037a:	9705      	str	r7, [sp, #20]
 800037c:	603d      	str	r5, [r7, #0]
 800037e:	198e      	adds	r6, r1, r6
 8000380:	2782      	movs	r7, #130	@ 0x82
 8000382:	007f      	lsls	r7, r7, #1
 8000384:	19f6      	adds	r6, r6, r7
 8000386:	6837      	ldr	r7, [r6, #0]
 8000388:	406f      	eors	r7, r5
 800038a:	9d05      	ldr	r5, [sp, #20]
 800038c:	602f      	str	r7, [r5, #0]
 800038e:	9d06      	ldr	r5, [sp, #24]
 8000390:	1945      	adds	r5, r0, r5
 8000392:	6837      	ldr	r7, [r6, #0]
 8000394:	70ef      	strb	r7, [r5, #3]
 8000396:	6837      	ldr	r7, [r6, #0]
 8000398:	0a3f      	lsrs	r7, r7, #8
 800039a:	70af      	strb	r7, [r5, #2]
 800039c:	6837      	ldr	r7, [r6, #0]
 800039e:	0c3f      	lsrs	r7, r7, #16
 80003a0:	706f      	strb	r7, [r5, #1]
 80003a2:	6836      	ldr	r6, [r6, #0]
 80003a4:	0e36      	lsrs	r6, r6, #24
 80003a6:	702e      	strb	r6, [r5, #0]
 80003a8:	1c64      	adds	r4, r4, #1
 80003aa:	429c      	cmp	r4, r3
 80003ac:	d3d2      	bcc.n	8000354 <cmox_cbc_encrypt+0xbc>
 80003ae:	9c00      	ldr	r4, [sp, #0]
 80003b0:	9107      	str	r1, [sp, #28]
 80003b2:	9206      	str	r2, [sp, #24]
 80003b4:	9305      	str	r3, [sp, #20]
 80003b6:	9906      	ldr	r1, [sp, #24]
 80003b8:	009a      	lsls	r2, r3, #2
 80003ba:	1889      	adds	r1, r1, r2
 80003bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80003be:	9a05      	ldr	r2, [sp, #20]
 80003c0:	0092      	lsls	r2, r2, #2
 80003c2:	ab01      	add	r3, sp, #4
 80003c4:	189b      	adds	r3, r3, r2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	9b07      	ldr	r3, [sp, #28]
 80003ca:	2582      	movs	r5, #130	@ 0x82
 80003cc:	006d      	lsls	r5, r5, #1
 80003ce:	195b      	adds	r3, r3, r5
 80003d0:	9308      	str	r3, [sp, #32]
 80003d2:	189a      	adds	r2, r3, r2
 80003d4:	920a      	str	r2, [sp, #40]	@ 0x28
 80003d6:	6812      	ldr	r2, [r2, #0]
 80003d8:	9b00      	ldr	r3, [sp, #0]
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	2700      	movs	r7, #0
 80003de:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80003e0:	e013      	b.n	800040a <cmox_cbc_encrypt+0x172>
 80003e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80003e4:	19d2      	adds	r2, r2, r7
 80003e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80003e8:	2218      	movs	r2, #24
 80003ea:	00fb      	lsls	r3, r7, #3
 80003ec:	1ad2      	subs	r2, r2, r3
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80003f4:	5da6      	ldrb	r6, [r4, r6]
 80003f6:	4096      	lsls	r6, r2
 80003f8:	405e      	eors	r6, r3
 80003fa:	9b00      	ldr	r3, [sp, #0]
 80003fc:	601e      	str	r6, [r3, #0]
 80003fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	40d3      	lsrs	r3, r2
 8000404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000406:	5483      	strb	r3, [r0, r2]
 8000408:	1c7f      	adds	r7, r7, #1
 800040a:	1a6a      	subs	r2, r5, r1
 800040c:	4297      	cmp	r7, r2
 800040e:	d3e8      	bcc.n	80003e2 <cmox_cbc_encrypt+0x14a>
 8000410:	0004      	movs	r4, r0
 8000412:	9805      	ldr	r0, [sp, #20]
 8000414:	1c40      	adds	r0, r0, #1
 8000416:	ab01      	add	r3, sp, #4
 8000418:	e004      	b.n	8000424 <cmox_cbc_encrypt+0x18c>
 800041a:	0081      	lsls	r1, r0, #2
 800041c:	9a08      	ldr	r2, [sp, #32]
 800041e:	5852      	ldr	r2, [r2, r1]
 8000420:	505a      	str	r2, [r3, r1]
 8000422:	1c40      	adds	r0, r0, #1
 8000424:	2804      	cmp	r0, #4
 8000426:	d3f8      	bcc.n	800041a <cmox_cbc_encrypt+0x182>
 8000428:	aa01      	add	r2, sp, #4
 800042a:	a901      	add	r1, sp, #4
 800042c:	9807      	ldr	r0, [sp, #28]
 800042e:	3008      	adds	r0, #8
 8000430:	9b07      	ldr	r3, [sp, #28]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4798      	blx	r3
 8000438:	9806      	ldr	r0, [sp, #24]
 800043a:	1821      	adds	r1, r4, r0
 800043c:	3910      	subs	r1, #16
 800043e:	a801      	add	r0, sp, #4
 8000440:	f000 fab2 	bl	80009a8 <convert_block_2_bytes>
 8000444:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8000446:	2800      	cmp	r0, #0
 8000448:	d005      	beq.n	8000456 <cmox_cbc_encrypt+0x1be>
 800044a:	6800      	ldr	r0, [r0, #0]
 800044c:	1940      	adds	r0, r0, r5
 800044e:	9906      	ldr	r1, [sp, #24]
 8000450:	1a40      	subs	r0, r0, r1
 8000452:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8000454:	6008      	str	r0, [r1, #0]
 8000456:	2080      	movs	r0, #128	@ 0x80
 8000458:	0240      	lsls	r0, r0, #9
 800045a:	b00d      	add	sp, #52	@ 0x34
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800045e:	bf00      	nop
 8000460:	080086f8 	.word	0x080086f8
 8000464:	00010003 	.word	0x00010003
 8000468:	00010004 	.word	0x00010004

0800046c <cmox_cbcEncrypt_construct>:
 800046c:	2800      	cmp	r0, #0
 800046e:	d002      	beq.n	8000476 <cmox_cbcEncrypt_construct+0xa>
 8000470:	4a01      	ldr	r2, [pc, #4]	@ (8000478 <cmox_cbcEncrypt_construct+0xc>)
 8000472:	6002      	str	r2, [r0, #0]
 8000474:	6081      	str	r1, [r0, #8]
 8000476:	4770      	bx	lr
 8000478:	080086f8 	.word	0x080086f8

0800047c <cmox_cipher_encrypt>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	b085      	sub	sp, #20
 8000480:	0004      	movs	r4, r0
 8000482:	4814      	ldr	r0, [pc, #80]	@ (80004d4 <cmox_cipher_encrypt+0x58>)
 8000484:	2c00      	cmp	r4, #0
 8000486:	d022      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 8000488:	6865      	ldr	r5, [r4, #4]
 800048a:	2d3a      	cmp	r5, #58	@ 0x3a
 800048c:	d001      	beq.n	8000492 <cmox_cipher_encrypt+0x16>
 800048e:	1e40      	subs	r0, r0, #1
 8000490:	e01d      	b.n	80004ce <cmox_cipher_encrypt+0x52>
 8000492:	9104      	str	r1, [sp, #16]
 8000494:	0011      	movs	r1, r2
 8000496:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8000498:	9a04      	ldr	r2, [sp, #16]
 800049a:	2a00      	cmp	r2, #0
 800049c:	d102      	bne.n	80004a4 <cmox_cipher_encrypt+0x28>
 800049e:	2900      	cmp	r1, #0
 80004a0:	d002      	beq.n	80004a8 <cmox_cipher_encrypt+0x2c>
 80004a2:	e014      	b.n	80004ce <cmox_cipher_encrypt+0x52>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d012      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 80004a8:	001a      	movs	r2, r3
 80004aa:	d010      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 80004ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80004ae:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d101      	bne.n	80004b8 <cmox_cipher_encrypt+0x3c>
 80004b4:	2f00      	cmp	r7, #0
 80004b6:	d10a      	bne.n	80004ce <cmox_cipher_encrypt+0x52>
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d008      	beq.n	80004ce <cmox_cipher_encrypt+0x52>
 80004bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80004be:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80004c0:	9003      	str	r0, [sp, #12]
 80004c2:	9502      	str	r5, [sp, #8]
 80004c4:	9701      	str	r7, [sp, #4]
 80004c6:	9600      	str	r6, [sp, #0]
 80004c8:	9804      	ldr	r0, [sp, #16]
 80004ca:	6824      	ldr	r4, [r4, #0]
 80004cc:	47a0      	blx	r4
 80004ce:	b005      	add	sp, #20
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d2:	bf00      	nop
 80004d4:	00010003 	.word	0x00010003

080004d8 <cmox_cipher_innerCompute>:
 80004d8:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80004da:	b081      	sub	sp, #4
 80004dc:	0004      	movs	r4, r0
 80004de:	0017      	movs	r7, r2
 80004e0:	001d      	movs	r5, r3
 80004e2:	6821      	ldr	r1, [r4, #0]
 80004e4:	6849      	ldr	r1, [r1, #4]
 80004e6:	4788      	blx	r1
 80004e8:	0006      	movs	r6, r0
 80004ea:	2080      	movs	r0, #128	@ 0x80
 80004ec:	0240      	lsls	r0, r0, #9
 80004ee:	4286      	cmp	r6, r0
 80004f0:	d11d      	bne.n	800052e <cmox_cipher_innerCompute+0x56>
 80004f2:	9a08      	ldr	r2, [sp, #32]
 80004f4:	0029      	movs	r1, r5
 80004f6:	0020      	movs	r0, r4
 80004f8:	6823      	ldr	r3, [r4, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4798      	blx	r3
 80004fe:	0006      	movs	r6, r0
 8000500:	2580      	movs	r5, #128	@ 0x80
 8000502:	026d      	lsls	r5, r5, #9
 8000504:	42ae      	cmp	r6, r5
 8000506:	d112      	bne.n	800052e <cmox_cipher_innerCompute+0x56>
 8000508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800050a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800050c:	0020      	movs	r0, r4
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4798      	blx	r3
 8000514:	0006      	movs	r6, r0
 8000516:	42ae      	cmp	r6, r5
 8000518:	d109      	bne.n	800052e <cmox_cipher_innerCompute+0x56>
 800051a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800051c:	003a      	movs	r2, r7
 800051e:	9902      	ldr	r1, [sp, #8]
 8000520:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000522:	9000      	str	r0, [sp, #0]
 8000524:	0020      	movs	r0, r4
 8000526:	6825      	ldr	r5, [r4, #0]
 8000528:	6a2d      	ldr	r5, [r5, #32]
 800052a:	47a8      	blx	r5
 800052c:	0006      	movs	r6, r0
 800052e:	0020      	movs	r0, r4
 8000530:	6821      	ldr	r1, [r4, #0]
 8000532:	6809      	ldr	r1, [r1, #0]
 8000534:	4788      	blx	r1
 8000536:	0030      	movs	r0, r6
 8000538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800053a <cmox_cipherMode_init>:
 800053a:	2200      	movs	r2, #0
 800053c:	6042      	str	r2, [r0, #4]
 800053e:	2001      	movs	r0, #1
 8000540:	6088      	str	r0, [r1, #8]
 8000542:	0400      	lsls	r0, r0, #16
 8000544:	4770      	bx	lr
	...

08000548 <cmox_cipherMode_setKey>:
 8000548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800054a:	b08e      	sub	sp, #56	@ 0x38
 800054c:	49de      	ldr	r1, [pc, #888]	@ (80008c8 <cmox_cipherMode_setKey+0x380>)
 800054e:	4bdf      	ldr	r3, [pc, #892]	@ (80008cc <cmox_cipherMode_setKey+0x384>)
 8000550:	2200      	movs	r2, #0
 8000552:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8000554:	2810      	cmp	r0, #16
 8000556:	d006      	beq.n	8000566 <cmox_cipherMode_setKey+0x1e>
 8000558:	2818      	cmp	r0, #24
 800055a:	d100      	bne.n	800055e <cmox_cipherMode_setKey+0x16>
 800055c:	e094      	b.n	8000688 <cmox_cipherMode_setKey+0x140>
 800055e:	2820      	cmp	r0, #32
 8000560:	d100      	bne.n	8000564 <cmox_cipherMode_setKey+0x1c>
 8000562:	e121      	b.n	80007a8 <cmox_cipherMode_setKey+0x260>
 8000564:	e1b8      	b.n	80008d8 <cmox_cipherMode_setKey+0x390>
 8000566:	a80b      	add	r0, sp, #44	@ 0x2c
 8000568:	4cd9      	ldr	r4, [pc, #868]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 800056a:	cc60      	ldmia	r4!, {r5, r6}
 800056c:	c060      	stmia	r0!, {r5, r6}
 800056e:	48d9      	ldr	r0, [pc, #868]	@ (80008d4 <cmox_cipherMode_setKey+0x38c>)
 8000570:	7800      	ldrb	r0, [r0, #0]
 8000572:	466c      	mov	r4, sp
 8000574:	7020      	strb	r0, [r4, #0]
 8000576:	4668      	mov	r0, sp
 8000578:	7800      	ldrb	r0, [r0, #0]
 800057a:	2800      	cmp	r0, #0
 800057c:	d101      	bne.n	8000582 <cmox_cipherMode_setKey+0x3a>
 800057e:	2400      	movs	r4, #0
 8000580:	e001      	b.n	8000586 <cmox_cipherMode_setKey+0x3e>
 8000582:	2004      	movs	r0, #4
 8000584:	2404      	movs	r4, #4
 8000586:	4ddd      	ldr	r5, [pc, #884]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000588:	5828      	ldr	r0, [r5, r0]
 800058a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800058c:	592c      	ldr	r4, [r5, r4]
 800058e:	1900      	adds	r0, r0, r4
 8000590:	4cdb      	ldr	r4, [pc, #876]	@ (8000900 <cmox_cipherMode_setKey+0x3b8>)
 8000592:	6004      	str	r4, [r0, #0]
 8000594:	6805      	ldr	r5, [r0, #0]
 8000596:	2401      	movs	r4, #1
 8000598:	6084      	str	r4, [r0, #8]
 800059a:	48d8      	ldr	r0, [pc, #864]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 800059c:	6840      	ldr	r0, [r0, #4]
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	48d6      	ldr	r0, [pc, #856]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80005a2:	6800      	ldr	r0, [r0, #0]
 80005a4:	9001      	str	r0, [sp, #4]
 80005a6:	ac03      	add	r4, sp, #12
 80005a8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80005aa:	7b80      	ldrb	r0, [r0, #14]
 80005ac:	9e02      	ldr	r6, [sp, #8]
 80005ae:	406e      	eors	r6, r5
 80005b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80005b2:	4077      	eors	r7, r6
 80005b4:	2504      	movs	r5, #4
 80005b6:	407d      	eors	r5, r7
 80005b8:	9f01      	ldr	r7, [sp, #4]
 80005ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80005bc:	407e      	eors	r6, r7
 80005be:	27fc      	movs	r7, #252	@ 0xfc
 80005c0:	4077      	eors	r7, r6
 80005c2:	19ed      	adds	r5, r5, r7
 80005c4:	2652      	movs	r6, #82	@ 0x52
 80005c6:	406e      	eors	r6, r5
 80005c8:	1980      	adds	r0, r0, r6
 80005ca:	73a0      	strb	r0, [r4, #14]
 80005cc:	2501      	movs	r5, #1
 80005ce:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80005d0:	5d46      	ldrb	r6, [r0, r5]
 80005d2:	5566      	strb	r6, [r4, r5]
 80005d4:	1c6d      	adds	r5, r5, #1
 80005d6:	2d0e      	cmp	r5, #14
 80005d8:	d3fa      	bcc.n	80005d0 <cmox_cipherMode_setKey+0x88>
 80005da:	4cbd      	ldr	r4, [pc, #756]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 80005dc:	ad0c      	add	r5, sp, #48	@ 0x30
 80005de:	ccc0      	ldmia	r4!, {r6, r7}
 80005e0:	c5c0      	stmia	r5!, {r6, r7}
 80005e2:	3c08      	subs	r4, #8
 80005e4:	2504      	movs	r5, #4
 80005e6:	466e      	mov	r6, sp
 80005e8:	7836      	ldrb	r6, [r6, #0]
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d101      	bne.n	80005f2 <cmox_cipherMode_setKey+0xaa>
 80005ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80005f0:	e001      	b.n	80005f6 <cmox_cipherMode_setKey+0xae>
 80005f2:	2604      	movs	r6, #4
 80005f4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80005f6:	4fc1      	ldr	r7, [pc, #772]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80005f8:	59bf      	ldr	r7, [r7, r6]
 80005fa:	46bc      	mov	ip, r7
 80005fc:	af0c      	add	r7, sp, #48	@ 0x30
 80005fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8000600:	59be      	ldr	r6, [r7, r6]
 8000602:	4667      	mov	r7, ip
 8000604:	19be      	adds	r6, r7, r6
 8000606:	6033      	str	r3, [r6, #0]
 8000608:	6833      	ldr	r3, [r6, #0]
 800060a:	2701      	movs	r7, #1
 800060c:	60b7      	str	r7, [r6, #8]
 800060e:	7806      	ldrb	r6, [r0, #0]
 8000610:	46b4      	mov	ip, r6
 8000612:	9e02      	ldr	r6, [sp, #8]
 8000614:	405e      	eors	r6, r3
 8000616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000618:	4073      	eors	r3, r6
 800061a:	2604      	movs	r6, #4
 800061c:	405e      	eors	r6, r3
 800061e:	9f01      	ldr	r7, [sp, #4]
 8000620:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000622:	407b      	eors	r3, r7
 8000624:	27fc      	movs	r7, #252	@ 0xfc
 8000626:	405f      	eors	r7, r3
 8000628:	19f6      	adds	r6, r6, r7
 800062a:	230b      	movs	r3, #11
 800062c:	4073      	eors	r3, r6
 800062e:	4666      	mov	r6, ip
 8000630:	18f3      	adds	r3, r6, r3
 8000632:	466e      	mov	r6, sp
 8000634:	7333      	strb	r3, [r6, #12]
 8000636:	ab0b      	add	r3, sp, #44	@ 0x2c
 8000638:	ccc0      	ldmia	r4!, {r6, r7}
 800063a:	c3c0      	stmia	r3!, {r6, r7}
 800063c:	466b      	mov	r3, sp
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <cmox_cipherMode_setKey+0x100>
 8000644:	2304      	movs	r3, #4
 8000646:	2204      	movs	r2, #4
 8000648:	4cac      	ldr	r4, [pc, #688]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 800064a:	58e3      	ldr	r3, [r4, r3]
 800064c:	ac0b      	add	r4, sp, #44	@ 0x2c
 800064e:	58a2      	ldr	r2, [r4, r2]
 8000650:	189a      	adds	r2, r3, r2
 8000652:	6011      	str	r1, [r2, #0]
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	6093      	str	r3, [r2, #8]
 800065a:	7bc0      	ldrb	r0, [r0, #15]
 800065c:	9a02      	ldr	r2, [sp, #8]
 800065e:	404a      	eors	r2, r1
 8000660:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000662:	4051      	eors	r1, r2
 8000664:	404d      	eors	r5, r1
 8000666:	9901      	ldr	r1, [sp, #4]
 8000668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800066a:	404a      	eors	r2, r1
 800066c:	21fc      	movs	r1, #252	@ 0xfc
 800066e:	4051      	eors	r1, r2
 8000670:	1869      	adds	r1, r5, r1
 8000672:	2285      	movs	r2, #133	@ 0x85
 8000674:	404a      	eors	r2, r1
 8000676:	1880      	adds	r0, r0, r2
 8000678:	a903      	add	r1, sp, #12
 800067a:	73c8      	strb	r0, [r1, #15]
 800067c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800067e:	7a20      	ldrb	r0, [r4, #8]
 8000680:	07c0      	lsls	r0, r0, #31
 8000682:	d500      	bpl.n	8000686 <cmox_cipherMode_setKey+0x13e>
 8000684:	e12a      	b.n	80008dc <cmox_cipherMode_setKey+0x394>
 8000686:	e127      	b.n	80008d8 <cmox_cipherMode_setKey+0x390>
 8000688:	a80b      	add	r0, sp, #44	@ 0x2c
 800068a:	4c91      	ldr	r4, [pc, #580]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 800068c:	cc60      	ldmia	r4!, {r5, r6}
 800068e:	c060      	stmia	r0!, {r5, r6}
 8000690:	4890      	ldr	r0, [pc, #576]	@ (80008d4 <cmox_cipherMode_setKey+0x38c>)
 8000692:	7800      	ldrb	r0, [r0, #0]
 8000694:	466c      	mov	r4, sp
 8000696:	7020      	strb	r0, [r4, #0]
 8000698:	4668      	mov	r0, sp
 800069a:	7800      	ldrb	r0, [r0, #0]
 800069c:	2800      	cmp	r0, #0
 800069e:	d101      	bne.n	80006a4 <cmox_cipherMode_setKey+0x15c>
 80006a0:	2400      	movs	r4, #0
 80006a2:	e001      	b.n	80006a8 <cmox_cipherMode_setKey+0x160>
 80006a4:	2004      	movs	r0, #4
 80006a6:	2404      	movs	r4, #4
 80006a8:	4d94      	ldr	r5, [pc, #592]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80006aa:	5828      	ldr	r0, [r5, r0]
 80006ac:	ad0b      	add	r5, sp, #44	@ 0x2c
 80006ae:	592c      	ldr	r4, [r5, r4]
 80006b0:	1904      	adds	r4, r0, r4
 80006b2:	6021      	str	r1, [r4, #0]
 80006b4:	6820      	ldr	r0, [r4, #0]
 80006b6:	2101      	movs	r1, #1
 80006b8:	60a1      	str	r1, [r4, #8]
 80006ba:	4990      	ldr	r1, [pc, #576]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80006bc:	6849      	ldr	r1, [r1, #4]
 80006be:	9102      	str	r1, [sp, #8]
 80006c0:	498e      	ldr	r1, [pc, #568]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80006c2:	6809      	ldr	r1, [r1, #0]
 80006c4:	9101      	str	r1, [sp, #4]
 80006c6:	a903      	add	r1, sp, #12
 80006c8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80006ca:	7ba4      	ldrb	r4, [r4, #14]
 80006cc:	9d02      	ldr	r5, [sp, #8]
 80006ce:	4045      	eors	r5, r0
 80006d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80006d2:	406e      	eors	r6, r5
 80006d4:	2004      	movs	r0, #4
 80006d6:	4070      	eors	r0, r6
 80006d8:	9d01      	ldr	r5, [sp, #4]
 80006da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80006dc:	406e      	eors	r6, r5
 80006de:	25fc      	movs	r5, #252	@ 0xfc
 80006e0:	4075      	eors	r5, r6
 80006e2:	1940      	adds	r0, r0, r5
 80006e4:	2585      	movs	r5, #133	@ 0x85
 80006e6:	4045      	eors	r5, r0
 80006e8:	1960      	adds	r0, r4, r5
 80006ea:	7388      	strb	r0, [r1, #14]
 80006ec:	2401      	movs	r4, #1
 80006ee:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80006f0:	5d05      	ldrb	r5, [r0, r4]
 80006f2:	550d      	strb	r5, [r1, r4]
 80006f4:	1c64      	adds	r4, r4, #1
 80006f6:	2c0e      	cmp	r4, #14
 80006f8:	d3fa      	bcc.n	80006f0 <cmox_cipherMode_setKey+0x1a8>
 80006fa:	4c75      	ldr	r4, [pc, #468]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 80006fc:	a90b      	add	r1, sp, #44	@ 0x2c
 80006fe:	cc60      	ldmia	r4!, {r5, r6}
 8000700:	c160      	stmia	r1!, {r5, r6}
 8000702:	3c08      	subs	r4, #8
 8000704:	4669      	mov	r1, sp
 8000706:	7809      	ldrb	r1, [r1, #0]
 8000708:	2900      	cmp	r1, #0
 800070a:	d101      	bne.n	8000710 <cmox_cipherMode_setKey+0x1c8>
 800070c:	2500      	movs	r5, #0
 800070e:	e001      	b.n	8000714 <cmox_cipherMode_setKey+0x1cc>
 8000710:	2504      	movs	r5, #4
 8000712:	2104      	movs	r1, #4
 8000714:	4e79      	ldr	r6, [pc, #484]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000716:	5975      	ldr	r5, [r6, r5]
 8000718:	ae0b      	add	r6, sp, #44	@ 0x2c
 800071a:	5871      	ldr	r1, [r6, r1]
 800071c:	186d      	adds	r5, r5, r1
 800071e:	4978      	ldr	r1, [pc, #480]	@ (8000900 <cmox_cipherMode_setKey+0x3b8>)
 8000720:	6029      	str	r1, [r5, #0]
 8000722:	6829      	ldr	r1, [r5, #0]
 8000724:	2601      	movs	r6, #1
 8000726:	60ae      	str	r6, [r5, #8]
 8000728:	2504      	movs	r5, #4
 800072a:	7806      	ldrb	r6, [r0, #0]
 800072c:	46b4      	mov	ip, r6
 800072e:	9e02      	ldr	r6, [sp, #8]
 8000730:	404e      	eors	r6, r1
 8000732:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000734:	4071      	eors	r1, r6
 8000736:	2604      	movs	r6, #4
 8000738:	404e      	eors	r6, r1
 800073a:	9f01      	ldr	r7, [sp, #4]
 800073c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800073e:	4079      	eors	r1, r7
 8000740:	27fc      	movs	r7, #252	@ 0xfc
 8000742:	404f      	eors	r7, r1
 8000744:	19f6      	adds	r6, r6, r7
 8000746:	2152      	movs	r1, #82	@ 0x52
 8000748:	4071      	eors	r1, r6
 800074a:	4666      	mov	r6, ip
 800074c:	1871      	adds	r1, r6, r1
 800074e:	466e      	mov	r6, sp
 8000750:	7331      	strb	r1, [r6, #12]
 8000752:	a90b      	add	r1, sp, #44	@ 0x2c
 8000754:	ccc0      	ldmia	r4!, {r6, r7}
 8000756:	c1c0      	stmia	r1!, {r6, r7}
 8000758:	4669      	mov	r1, sp
 800075a:	7809      	ldrb	r1, [r1, #0]
 800075c:	2900      	cmp	r1, #0
 800075e:	d001      	beq.n	8000764 <cmox_cipherMode_setKey+0x21c>
 8000760:	2104      	movs	r1, #4
 8000762:	2204      	movs	r2, #4
 8000764:	4c65      	ldr	r4, [pc, #404]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000766:	5861      	ldr	r1, [r4, r1]
 8000768:	ac0b      	add	r4, sp, #44	@ 0x2c
 800076a:	58a2      	ldr	r2, [r4, r2]
 800076c:	1889      	adds	r1, r1, r2
 800076e:	600b      	str	r3, [r1, #0]
 8000770:	680b      	ldr	r3, [r1, #0]
 8000772:	2201      	movs	r2, #1
 8000774:	608a      	str	r2, [r1, #8]
 8000776:	a903      	add	r1, sp, #12
 8000778:	7bc2      	ldrb	r2, [r0, #15]
 800077a:	9c02      	ldr	r4, [sp, #8]
 800077c:	405c      	eors	r4, r3
 800077e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000780:	4063      	eors	r3, r4
 8000782:	405d      	eors	r5, r3
 8000784:	9b01      	ldr	r3, [sp, #4]
 8000786:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8000788:	405c      	eors	r4, r3
 800078a:	23fc      	movs	r3, #252	@ 0xfc
 800078c:	4063      	eors	r3, r4
 800078e:	18eb      	adds	r3, r5, r3
 8000790:	240b      	movs	r4, #11
 8000792:	405c      	eors	r4, r3
 8000794:	1912      	adds	r2, r2, r4
 8000796:	73ca      	strb	r2, [r1, #15]
 8000798:	2210      	movs	r2, #16
 800079a:	5c83      	ldrb	r3, [r0, r2]
 800079c:	548b      	strb	r3, [r1, r2]
 800079e:	1c52      	adds	r2, r2, #1
 80007a0:	2a18      	cmp	r2, #24
 80007a2:	d300      	bcc.n	80007a6 <cmox_cipherMode_setKey+0x25e>
 80007a4:	e76a      	b.n	800067c <cmox_cipherMode_setKey+0x134>
 80007a6:	e7f8      	b.n	800079a <cmox_cipherMode_setKey+0x252>
 80007a8:	a80b      	add	r0, sp, #44	@ 0x2c
 80007aa:	4c49      	ldr	r4, [pc, #292]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 80007ac:	cc60      	ldmia	r4!, {r5, r6}
 80007ae:	c060      	stmia	r0!, {r5, r6}
 80007b0:	4848      	ldr	r0, [pc, #288]	@ (80008d4 <cmox_cipherMode_setKey+0x38c>)
 80007b2:	7800      	ldrb	r0, [r0, #0]
 80007b4:	466c      	mov	r4, sp
 80007b6:	7020      	strb	r0, [r4, #0]
 80007b8:	4668      	mov	r0, sp
 80007ba:	7800      	ldrb	r0, [r0, #0]
 80007bc:	2800      	cmp	r0, #0
 80007be:	d101      	bne.n	80007c4 <cmox_cipherMode_setKey+0x27c>
 80007c0:	2400      	movs	r4, #0
 80007c2:	e001      	b.n	80007c8 <cmox_cipherMode_setKey+0x280>
 80007c4:	2004      	movs	r0, #4
 80007c6:	2404      	movs	r4, #4
 80007c8:	4d4c      	ldr	r5, [pc, #304]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80007ca:	5828      	ldr	r0, [r5, r0]
 80007cc:	ad0b      	add	r5, sp, #44	@ 0x2c
 80007ce:	592c      	ldr	r4, [r5, r4]
 80007d0:	1900      	adds	r0, r0, r4
 80007d2:	6003      	str	r3, [r0, #0]
 80007d4:	6805      	ldr	r5, [r0, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	6083      	str	r3, [r0, #8]
 80007da:	4848      	ldr	r0, [pc, #288]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80007dc:	6840      	ldr	r0, [r0, #4]
 80007de:	9002      	str	r0, [sp, #8]
 80007e0:	4846      	ldr	r0, [pc, #280]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 80007e2:	6800      	ldr	r0, [r0, #0]
 80007e4:	9001      	str	r0, [sp, #4]
 80007e6:	2304      	movs	r3, #4
 80007e8:	ac03      	add	r4, sp, #12
 80007ea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80007ec:	7fc0      	ldrb	r0, [r0, #31]
 80007ee:	9e02      	ldr	r6, [sp, #8]
 80007f0:	406e      	eors	r6, r5
 80007f2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80007f4:	4077      	eors	r7, r6
 80007f6:	2504      	movs	r5, #4
 80007f8:	407d      	eors	r5, r7
 80007fa:	9f01      	ldr	r7, [sp, #4]
 80007fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80007fe:	407e      	eors	r6, r7
 8000800:	27fc      	movs	r7, #252	@ 0xfc
 8000802:	4077      	eors	r7, r6
 8000804:	19ed      	adds	r5, r5, r7
 8000806:	260b      	movs	r6, #11
 8000808:	406e      	eors	r6, r5
 800080a:	1980      	adds	r0, r0, r6
 800080c:	77e0      	strb	r0, [r4, #31]
 800080e:	2500      	movs	r5, #0
 8000810:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8000812:	5d46      	ldrb	r6, [r0, r5]
 8000814:	5566      	strb	r6, [r4, r5]
 8000816:	1c6d      	adds	r5, r5, #1
 8000818:	2d10      	cmp	r5, #16
 800081a:	d3fa      	bcc.n	8000812 <cmox_cipherMode_setKey+0x2ca>
 800081c:	4c2c      	ldr	r4, [pc, #176]	@ (80008d0 <cmox_cipherMode_setKey+0x388>)
 800081e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8000820:	ccc0      	ldmia	r4!, {r6, r7}
 8000822:	c5c0      	stmia	r5!, {r6, r7}
 8000824:	3c08      	subs	r4, #8
 8000826:	466d      	mov	r5, sp
 8000828:	782d      	ldrb	r5, [r5, #0]
 800082a:	2d00      	cmp	r5, #0
 800082c:	d101      	bne.n	8000832 <cmox_cipherMode_setKey+0x2ea>
 800082e:	2600      	movs	r6, #0
 8000830:	e001      	b.n	8000836 <cmox_cipherMode_setKey+0x2ee>
 8000832:	2604      	movs	r6, #4
 8000834:	2504      	movs	r5, #4
 8000836:	4f31      	ldr	r7, [pc, #196]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000838:	59be      	ldr	r6, [r7, r6]
 800083a:	af0b      	add	r7, sp, #44	@ 0x2c
 800083c:	597d      	ldr	r5, [r7, r5]
 800083e:	1976      	adds	r6, r6, r5
 8000840:	6031      	str	r1, [r6, #0]
 8000842:	6831      	ldr	r1, [r6, #0]
 8000844:	2501      	movs	r5, #1
 8000846:	60b5      	str	r5, [r6, #8]
 8000848:	7c46      	ldrb	r6, [r0, #17]
 800084a:	46b4      	mov	ip, r6
 800084c:	9e02      	ldr	r6, [sp, #8]
 800084e:	404e      	eors	r6, r1
 8000850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000852:	4071      	eors	r1, r6
 8000854:	2604      	movs	r6, #4
 8000856:	404e      	eors	r6, r1
 8000858:	9f01      	ldr	r7, [sp, #4]
 800085a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800085c:	4079      	eors	r1, r7
 800085e:	27fc      	movs	r7, #252	@ 0xfc
 8000860:	404f      	eors	r7, r1
 8000862:	19f6      	adds	r6, r6, r7
 8000864:	2185      	movs	r1, #133	@ 0x85
 8000866:	4071      	eors	r1, r6
 8000868:	4666      	mov	r6, ip
 800086a:	1871      	adds	r1, r6, r1
 800086c:	ae03      	add	r6, sp, #12
 800086e:	7471      	strb	r1, [r6, #17]
 8000870:	a90b      	add	r1, sp, #44	@ 0x2c
 8000872:	ccc0      	ldmia	r4!, {r6, r7}
 8000874:	c1c0      	stmia	r1!, {r6, r7}
 8000876:	4669      	mov	r1, sp
 8000878:	7809      	ldrb	r1, [r1, #0]
 800087a:	2900      	cmp	r1, #0
 800087c:	d001      	beq.n	8000882 <cmox_cipherMode_setKey+0x33a>
 800087e:	2104      	movs	r1, #4
 8000880:	2204      	movs	r2, #4
 8000882:	4c1e      	ldr	r4, [pc, #120]	@ (80008fc <cmox_cipherMode_setKey+0x3b4>)
 8000884:	5861      	ldr	r1, [r4, r1]
 8000886:	ac0b      	add	r4, sp, #44	@ 0x2c
 8000888:	58a2      	ldr	r2, [r4, r2]
 800088a:	1889      	adds	r1, r1, r2
 800088c:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <cmox_cipherMode_setKey+0x3b8>)
 800088e:	600a      	str	r2, [r1, #0]
 8000890:	680c      	ldr	r4, [r1, #0]
 8000892:	608d      	str	r5, [r1, #8]
 8000894:	a903      	add	r1, sp, #12
 8000896:	7c02      	ldrb	r2, [r0, #16]
 8000898:	9d02      	ldr	r5, [sp, #8]
 800089a:	4065      	eors	r5, r4
 800089c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800089e:	406c      	eors	r4, r5
 80008a0:	4063      	eors	r3, r4
 80008a2:	9c01      	ldr	r4, [sp, #4]
 80008a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80008a6:	4065      	eors	r5, r4
 80008a8:	24fc      	movs	r4, #252	@ 0xfc
 80008aa:	406c      	eors	r4, r5
 80008ac:	191b      	adds	r3, r3, r4
 80008ae:	2452      	movs	r4, #82	@ 0x52
 80008b0:	405c      	eors	r4, r3
 80008b2:	1912      	adds	r2, r2, r4
 80008b4:	740a      	strb	r2, [r1, #16]
 80008b6:	2212      	movs	r2, #18
 80008b8:	5c83      	ldrb	r3, [r0, r2]
 80008ba:	548b      	strb	r3, [r1, r2]
 80008bc:	1c52      	adds	r2, r2, #1
 80008be:	2a1f      	cmp	r2, #31
 80008c0:	d300      	bcc.n	80008c4 <cmox_cipherMode_setKey+0x37c>
 80008c2:	e6db      	b.n	800067c <cmox_cipherMode_setKey+0x134>
 80008c4:	e7f8      	b.n	80008b8 <cmox_cipherMode_setKey+0x370>
 80008c6:	bf00      	nop
 80008c8:	2e8f137d 	.word	0x2e8f137d
 80008cc:	910e0ba4 	.word	0x910e0ba4
 80008d0:	08000978 	.word	0x08000978
 80008d4:	200000dc 	.word	0x200000dc
 80008d8:	480a      	ldr	r0, [pc, #40]	@ (8000904 <cmox_cipherMode_setKey+0x3bc>)
 80008da:	e00c      	b.n	80008f6 <cmox_cipherMode_setKey+0x3ae>
 80008dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80008de:	0020      	movs	r0, r4
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4798      	blx	r3
 80008e6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80008e8:	6060      	str	r0, [r4, #4]
 80008ea:	68a0      	ldr	r0, [r4, #8]
 80008ec:	2104      	movs	r1, #4
 80008ee:	4301      	orrs	r1, r0
 80008f0:	60a1      	str	r1, [r4, #8]
 80008f2:	2080      	movs	r0, #128	@ 0x80
 80008f4:	0240      	lsls	r0, r0, #9
 80008f6:	b011      	add	sp, #68	@ 0x44
 80008f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	08008928 	.word	0x08008928
 8000900:	f78e2254 	.word	0xf78e2254
 8000904:	00010003 	.word	0x00010003

08000908 <cmox_cipherMode_setIV>:
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090a:	9c05      	ldr	r4, [sp, #20]
 800090c:	2c00      	cmp	r4, #0
 800090e:	d001      	beq.n	8000914 <cmox_cipherMode_setIV+0xc>
 8000910:	2a00      	cmp	r2, #0
 8000912:	d101      	bne.n	8000918 <cmox_cipherMode_setIV+0x10>
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <cmox_cipherMode_setIV+0x44>)
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000918:	2400      	movs	r4, #0
 800091a:	e00d      	b.n	8000938 <cmox_cipherMode_setIV+0x30>
 800091c:	1955      	adds	r5, r2, r5
 800091e:	782e      	ldrb	r6, [r5, #0]
 8000920:	0637      	lsls	r7, r6, #24
 8000922:	786e      	ldrb	r6, [r5, #1]
 8000924:	0436      	lsls	r6, r6, #16
 8000926:	433e      	orrs	r6, r7
 8000928:	78af      	ldrb	r7, [r5, #2]
 800092a:	023f      	lsls	r7, r7, #8
 800092c:	4337      	orrs	r7, r6
 800092e:	78ed      	ldrb	r5, [r5, #3]
 8000930:	433d      	orrs	r5, r7
 8000932:	00a6      	lsls	r6, r4, #2
 8000934:	518d      	str	r5, [r1, r6]
 8000936:	1c64      	adds	r4, r4, #1
 8000938:	00a5      	lsls	r5, r4, #2
 800093a:	429d      	cmp	r5, r3
 800093c:	d3ee      	bcc.n	800091c <cmox_cipherMode_setIV+0x14>
 800093e:	6841      	ldr	r1, [r0, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	6042      	str	r2, [r0, #4]
 8000946:	2080      	movs	r0, #128	@ 0x80
 8000948:	0240      	lsls	r0, r0, #9
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	00010003 	.word	0x00010003

08000950 <cmox_cipher_setTagLen_empty>:
 8000950:	2080      	movs	r0, #128	@ 0x80
 8000952:	0240      	lsls	r0, r0, #9
 8000954:	4770      	bx	lr

08000956 <cmox_cipher_setPayloadLen_empty>:
 8000956:	2080      	movs	r0, #128	@ 0x80
 8000958:	0240      	lsls	r0, r0, #9
 800095a:	4770      	bx	lr

0800095c <cmox_cipher_setADLen_empty>:
 800095c:	2080      	movs	r0, #128	@ 0x80
 800095e:	0240      	lsls	r0, r0, #9
 8000960:	4770      	bx	lr

08000962 <cmox_cipher_appendAD_empty>:
 8000962:	2080      	movs	r0, #128	@ 0x80
 8000964:	0240      	lsls	r0, r0, #9
 8000966:	4770      	bx	lr

08000968 <cmox_cipher_generateTag_empty>:
 8000968:	4800      	ldr	r0, [pc, #0]	@ (800096c <cmox_cipher_generateTag_empty+0x4>)
 800096a:	4770      	bx	lr
 800096c:	00010002 	.word	0x00010002

08000970 <cmox_cipher_verifyTag_empty>:
 8000970:	4800      	ldr	r0, [pc, #0]	@ (8000974 <cmox_cipher_verifyTag_empty+0x4>)
 8000972:	4770      	bx	lr
 8000974:	00010002 	.word	0x00010002
 8000978:	0101b004 	.word	0x0101b004
 800097c:	45011700 	.word	0x45011700

08000980 <convert_block_2_words>:
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	2200      	movs	r2, #0
 8000984:	0093      	lsls	r3, r2, #2
 8000986:	18c3      	adds	r3, r0, r3
 8000988:	781c      	ldrb	r4, [r3, #0]
 800098a:	0624      	lsls	r4, r4, #24
 800098c:	785d      	ldrb	r5, [r3, #1]
 800098e:	042d      	lsls	r5, r5, #16
 8000990:	4325      	orrs	r5, r4
 8000992:	789c      	ldrb	r4, [r3, #2]
 8000994:	0224      	lsls	r4, r4, #8
 8000996:	432c      	orrs	r4, r5
 8000998:	78db      	ldrb	r3, [r3, #3]
 800099a:	4323      	orrs	r3, r4
 800099c:	0094      	lsls	r4, r2, #2
 800099e:	510b      	str	r3, [r1, r4]
 80009a0:	1c52      	adds	r2, r2, #1
 80009a2:	2a04      	cmp	r2, #4
 80009a4:	d3ee      	bcc.n	8000984 <convert_block_2_words+0x4>
 80009a6:	bd30      	pop	{r4, r5, pc}

080009a8 <convert_block_2_bytes>:
 80009a8:	b530      	push	{r4, r5, lr}
 80009aa:	2200      	movs	r2, #0
 80009ac:	0093      	lsls	r3, r2, #2
 80009ae:	18cb      	adds	r3, r1, r3
 80009b0:	0094      	lsls	r4, r2, #2
 80009b2:	1904      	adds	r4, r0, r4
 80009b4:	6825      	ldr	r5, [r4, #0]
 80009b6:	70dd      	strb	r5, [r3, #3]
 80009b8:	6825      	ldr	r5, [r4, #0]
 80009ba:	0a2d      	lsrs	r5, r5, #8
 80009bc:	709d      	strb	r5, [r3, #2]
 80009be:	6825      	ldr	r5, [r4, #0]
 80009c0:	0c2d      	lsrs	r5, r5, #16
 80009c2:	705d      	strb	r5, [r3, #1]
 80009c4:	6824      	ldr	r4, [r4, #0]
 80009c6:	0e24      	lsrs	r4, r4, #24
 80009c8:	701c      	strb	r4, [r3, #0]
 80009ca:	1c52      	adds	r2, r2, #1
 80009cc:	2a04      	cmp	r2, #4
 80009ce:	d3ed      	bcc.n	80009ac <convert_block_2_bytes+0x4>
 80009d0:	bd30      	pop	{r4, r5, pc}

080009d2 <xor_blocks>:
 80009d2:	b530      	push	{r4, r5, lr}
 80009d4:	2200      	movs	r2, #0
 80009d6:	0093      	lsls	r3, r2, #2
 80009d8:	18c4      	adds	r4, r0, r3
 80009da:	6825      	ldr	r5, [r4, #0]
 80009dc:	58cb      	ldr	r3, [r1, r3]
 80009de:	406b      	eors	r3, r5
 80009e0:	6023      	str	r3, [r4, #0]
 80009e2:	1c52      	adds	r2, r2, #1
 80009e4:	2a04      	cmp	r2, #4
 80009e6:	d3f6      	bcc.n	80009d6 <xor_blocks+0x4>
 80009e8:	bd30      	pop	{r4, r5, pc}

080009ea <copy_block>:
 80009ea:	b510      	push	{r4, lr}
 80009ec:	2200      	movs	r2, #0
 80009ee:	0093      	lsls	r3, r2, #2
 80009f0:	58c4      	ldr	r4, [r0, r3]
 80009f2:	50cc      	str	r4, [r1, r3]
 80009f4:	1c52      	adds	r2, r2, #1
 80009f6:	2a04      	cmp	r2, #4
 80009f8:	d3f9      	bcc.n	80009ee <copy_block+0x4>
 80009fa:	bd10      	pop	{r4, pc}

080009fc <cmox_convertBlockAndXor>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	0004      	movs	r4, r0
 8000a00:	0008      	movs	r0, r1
 8000a02:	0013      	movs	r3, r2
 8000a04:	0021      	movs	r1, r4
 8000a06:	0002      	movs	r2, r0
 8000a08:	2400      	movs	r4, #0
 8000a0a:	00a0      	lsls	r0, r4, #2
 8000a0c:	180d      	adds	r5, r1, r0
 8000a0e:	00a6      	lsls	r6, r4, #2
 8000a10:	7828      	ldrb	r0, [r5, #0]
 8000a12:	0607      	lsls	r7, r0, #24
 8000a14:	7868      	ldrb	r0, [r5, #1]
 8000a16:	0400      	lsls	r0, r0, #16
 8000a18:	4338      	orrs	r0, r7
 8000a1a:	78af      	ldrb	r7, [r5, #2]
 8000a1c:	023f      	lsls	r7, r7, #8
 8000a1e:	4307      	orrs	r7, r0
 8000a20:	78e8      	ldrb	r0, [r5, #3]
 8000a22:	4338      	orrs	r0, r7
 8000a24:	5995      	ldr	r5, [r2, r6]
 8000a26:	4045      	eors	r5, r0
 8000a28:	519d      	str	r5, [r3, r6]
 8000a2a:	1c64      	adds	r4, r4, #1
 8000a2c:	2c04      	cmp	r4, #4
 8000a2e:	d3ec      	bcc.n	8000a0a <cmox_convertBlockAndXor+0xe>
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a32 <cmox_drbg_bcc_process_input>:
 8000a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	0003      	movs	r3, r0
 8000a38:	000f      	movs	r7, r1
 8000a3a:	0016      	movs	r6, r2
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2500      	movs	r5, #0
 8000a40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000a42:	6800      	ldr	r0, [r0, #0]
 8000a44:	1832      	adds	r2, r6, r0
 8000a46:	2a10      	cmp	r2, #16
 8000a48:	d209      	bcs.n	8000a5e <cmox_drbg_bcc_process_input+0x2c>
 8000a4a:	0032      	movs	r2, r6
 8000a4c:	0039      	movs	r1, r7
 8000a4e:	9b06      	ldr	r3, [sp, #24]
 8000a50:	1818      	adds	r0, r3, r0
 8000a52:	f007 f973 	bl	8007d3c <__aeabi_memcpy>
 8000a56:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000a58:	6800      	ldr	r0, [r0, #0]
 8000a5a:	1985      	adds	r5, r0, r6
 8000a5c:	e03b      	b.n	8000ad6 <cmox_drbg_bcc_process_input+0xa4>
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d013      	beq.n	8000a8e <cmox_drbg_bcc_process_input+0x5c>
 8000a66:	2110      	movs	r1, #16
 8000a68:	1a0d      	subs	r5, r1, r0
 8000a6a:	002a      	movs	r2, r5
 8000a6c:	0039      	movs	r1, r7
 8000a6e:	9b06      	ldr	r3, [sp, #24]
 8000a70:	1818      	adds	r0, r3, r0
 8000a72:	f007 f963 	bl	8007d3c <__aeabi_memcpy>
 8000a76:	aa02      	add	r2, sp, #8
 8000a78:	0021      	movs	r1, r4
 8000a7a:	9806      	ldr	r0, [sp, #24]
 8000a7c:	f7ff ffbe 	bl	80009fc <cmox_convertBlockAndXor>
 8000a80:	0022      	movs	r2, r4
 8000a82:	a902      	add	r1, sp, #8
 8000a84:	9800      	ldr	r0, [sp, #0]
 8000a86:	6803      	ldr	r3, [r0, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4798      	blx	r3
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	940d      	str	r4, [sp, #52]	@ 0x34
 8000a90:	000c      	movs	r4, r1
 8000a92:	9501      	str	r5, [sp, #4]
 8000a94:	2500      	movs	r5, #0
 8000a96:	e00f      	b.n	8000ab8 <cmox_drbg_bcc_process_input+0x86>
 8000a98:	aa02      	add	r2, sp, #8
 8000a9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000a9c:	9801      	ldr	r0, [sp, #4]
 8000a9e:	012b      	lsls	r3, r5, #4
 8000aa0:	18c0      	adds	r0, r0, r3
 8000aa2:	1838      	adds	r0, r7, r0
 8000aa4:	f7ff ffaa 	bl	80009fc <cmox_convertBlockAndXor>
 8000aa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8000aaa:	a902      	add	r1, sp, #8
 8000aac:	9800      	ldr	r0, [sp, #0]
 8000aae:	6803      	ldr	r3, [r0, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4798      	blx	r3
 8000ab4:	3410      	adds	r4, #16
 8000ab6:	1c6d      	adds	r5, r5, #1
 8000ab8:	9801      	ldr	r0, [sp, #4]
 8000aba:	1a30      	subs	r0, r6, r0
 8000abc:	0900      	lsrs	r0, r0, #4
 8000abe:	4285      	cmp	r5, r0
 8000ac0:	d3ea      	bcc.n	8000a98 <cmox_drbg_bcc_process_input+0x66>
 8000ac2:	42b4      	cmp	r4, r6
 8000ac4:	d206      	bcs.n	8000ad4 <cmox_drbg_bcc_process_input+0xa2>
 8000ac6:	1b35      	subs	r5, r6, r4
 8000ac8:	002a      	movs	r2, r5
 8000aca:	1939      	adds	r1, r7, r4
 8000acc:	9806      	ldr	r0, [sp, #24]
 8000ace:	f007 f935 	bl	8007d3c <__aeabi_memcpy>
 8000ad2:	e000      	b.n	8000ad6 <cmox_drbg_bcc_process_input+0xa4>
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000ad8:	6005      	str	r5, [r0, #0]
 8000ada:	b007      	add	sp, #28
 8000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ade <cmox_ctr_drbg_increment_v>:
 8000ade:	68c1      	ldr	r1, [r0, #12]
 8000ae0:	1c49      	adds	r1, r1, #1
 8000ae2:	60c1      	str	r1, [r0, #12]
 8000ae4:	d10a      	bne.n	8000afc <cmox_ctr_drbg_increment_v+0x1e>
 8000ae6:	6881      	ldr	r1, [r0, #8]
 8000ae8:	1c49      	adds	r1, r1, #1
 8000aea:	6081      	str	r1, [r0, #8]
 8000aec:	d106      	bne.n	8000afc <cmox_ctr_drbg_increment_v+0x1e>
 8000aee:	6841      	ldr	r1, [r0, #4]
 8000af0:	1c49      	adds	r1, r1, #1
 8000af2:	6041      	str	r1, [r0, #4]
 8000af4:	d102      	bne.n	8000afc <cmox_ctr_drbg_increment_v+0x1e>
 8000af6:	6801      	ldr	r1, [r0, #0]
 8000af8:	1c49      	adds	r1, r1, #1
 8000afa:	6001      	str	r1, [r0, #0]
 8000afc:	4770      	bx	lr

08000afe <cmox_ctr_drbg_update>:
 8000afe:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000b00:	b08d      	sub	sp, #52	@ 0x34
 8000b02:	2700      	movs	r7, #0
 8000b04:	2400      	movs	r4, #0
 8000b06:	0005      	movs	r5, r0
 8000b08:	e00e      	b.n	8000b28 <cmox_ctr_drbg_update+0x2a>
 8000b0a:	2080      	movs	r0, #128	@ 0x80
 8000b0c:	0080      	lsls	r0, r0, #2
 8000b0e:	182e      	adds	r6, r5, r0
 8000b10:	0030      	movs	r0, r6
 8000b12:	f7ff ffe4 	bl	8000ade <cmox_ctr_drbg_increment_v>
 8000b16:	a801      	add	r0, sp, #4
 8000b18:	0121      	lsls	r1, r4, #4
 8000b1a:	1842      	adds	r2, r0, r1
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	1d28      	adds	r0, r5, #4
 8000b20:	686b      	ldr	r3, [r5, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4798      	blx	r3
 8000b26:	1c64      	adds	r4, r4, #1
 8000b28:	208f      	movs	r0, #143	@ 0x8f
 8000b2a:	0080      	lsls	r0, r0, #2
 8000b2c:	5828      	ldr	r0, [r5, r0]
 8000b2e:	0900      	lsrs	r0, r0, #4
 8000b30:	1c40      	adds	r0, r0, #1
 8000b32:	4284      	cmp	r4, r0
 8000b34:	d3e9      	bcc.n	8000b0a <cmox_ctr_drbg_update+0xc>
 8000b36:	208f      	movs	r0, #143	@ 0x8f
 8000b38:	0080      	lsls	r0, r0, #2
 8000b3a:	1829      	adds	r1, r5, r0
 8000b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000b3e:	e009      	b.n	8000b54 <cmox_ctr_drbg_update+0x56>
 8000b40:	00ba      	lsls	r2, r7, #2
 8000b42:	a801      	add	r0, sp, #4
 8000b44:	5884      	ldr	r4, [r0, r2]
 8000b46:	5898      	ldr	r0, [r3, r2]
 8000b48:	4060      	eors	r0, r4
 8000b4a:	18aa      	adds	r2, r5, r2
 8000b4c:	2484      	movs	r4, #132	@ 0x84
 8000b4e:	00a4      	lsls	r4, r4, #2
 8000b50:	5110      	str	r0, [r2, r4]
 8000b52:	1c7f      	adds	r7, r7, #1
 8000b54:	6808      	ldr	r0, [r1, #0]
 8000b56:	0880      	lsrs	r0, r0, #2
 8000b58:	4287      	cmp	r7, r0
 8000b5a:	d3f1      	bcc.n	8000b40 <cmox_ctr_drbg_update+0x42>
 8000b5c:	9500      	str	r5, [sp, #0]
 8000b5e:	228f      	movs	r2, #143	@ 0x8f
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	18ac      	adds	r4, r5, r2
 8000b64:	0005      	movs	r5, r0
 8000b66:	e00c      	b.n	8000b82 <cmox_ctr_drbg_update+0x84>
 8000b68:	00a8      	lsls	r0, r5, #2
 8000b6a:	9900      	ldr	r1, [sp, #0]
 8000b6c:	2680      	movs	r6, #128	@ 0x80
 8000b6e:	00b6      	lsls	r6, r6, #2
 8000b70:	1989      	adds	r1, r1, r6
 8000b72:	1aaa      	subs	r2, r5, r2
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	ae01      	add	r6, sp, #4
 8000b78:	5836      	ldr	r6, [r6, r0]
 8000b7a:	5818      	ldr	r0, [r3, r0]
 8000b7c:	4070      	eors	r0, r6
 8000b7e:	5088      	str	r0, [r1, r2]
 8000b80:	1c6d      	adds	r5, r5, #1
 8000b82:	6820      	ldr	r0, [r4, #0]
 8000b84:	0882      	lsrs	r2, r0, #2
 8000b86:	1d10      	adds	r0, r2, #4
 8000b88:	4285      	cmp	r5, r0
 8000b8a:	d3ed      	bcc.n	8000b68 <cmox_ctr_drbg_update+0x6a>
 8000b8c:	b00f      	add	sp, #60	@ 0x3c
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b90 <cmox_ctr_drbg_df>:
 8000b90:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000b92:	b0ae      	sub	sp, #184	@ 0xb8
 8000b94:	000c      	movs	r4, r1
 8000b96:	0015      	movs	r5, r2
 8000b98:	001f      	movs	r7, r3
 8000b9a:	2118      	movs	r1, #24
 8000b9c:	a818      	add	r0, sp, #96	@ 0x60
 8000b9e:	f007 f8cf 	bl	8007d40 <__aeabi_memclr>
 8000ba2:	a813      	add	r0, sp, #76	@ 0x4c
 8000ba4:	496f      	ldr	r1, [pc, #444]	@ (8000d64 <cmox_ctr_drbg_df+0x1d4>)
 8000ba6:	2214      	movs	r2, #20
 8000ba8:	f007 f8c8 	bl	8007d3c <__aeabi_memcpy>
 8000bac:	2001      	movs	r0, #1
 8000bae:	9003      	str	r0, [sp, #12]
 8000bb0:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000bb2:	218f      	movs	r1, #143	@ 0x8f
 8000bb4:	0089      	lsls	r1, r1, #2
 8000bb6:	1840      	adds	r0, r0, r1
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	6840      	ldr	r0, [r0, #4]
 8000bbc:	0082      	lsls	r2, r0, #2
 8000bbe:	9800      	ldr	r0, [sp, #0]
 8000bc0:	6941      	ldr	r1, [r0, #20]
 8000bc2:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000bc4:	2386      	movs	r3, #134	@ 0x86
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	18c0      	adds	r0, r0, r3
 8000bca:	f007 f8b7 	bl	8007d3c <__aeabi_memcpy>
 8000bce:	9800      	ldr	r0, [sp, #0]
 8000bd0:	6800      	ldr	r0, [r0, #0]
 8000bd2:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8000bd4:	2280      	movs	r2, #128	@ 0x80
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	1889      	adds	r1, r1, r2
 8000bda:	6048      	str	r0, [r1, #4]
 8000bdc:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8000bde:	1828      	adds	r0, r5, r0
 8000be0:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8000be2:	1840      	adds	r0, r0, r1
 8000be4:	0001      	movs	r1, r0
 8000be6:	3119      	adds	r1, #25
 8000be8:	220f      	movs	r2, #15
 8000bea:	4211      	tst	r1, r2
 8000bec:	d003      	beq.n	8000bf6 <cmox_ctr_drbg_df+0x66>
 8000bee:	2311      	movs	r3, #17
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	1a99      	subs	r1, r3, r2
 8000bf4:	9103      	str	r1, [sp, #12]
 8000bf6:	a918      	add	r1, sp, #96	@ 0x60
 8000bf8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8000bfa:	18ea      	adds	r2, r5, r3
 8000bfc:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8000bfe:	18d2      	adds	r2, r2, r3
 8000c00:	74ca      	strb	r2, [r1, #19]
 8000c02:	0a02      	lsrs	r2, r0, #8
 8000c04:	748a      	strb	r2, [r1, #18]
 8000c06:	0c02      	lsrs	r2, r0, #16
 8000c08:	744a      	strb	r2, [r1, #17]
 8000c0a:	0e00      	lsrs	r0, r0, #24
 8000c0c:	7408      	strb	r0, [r1, #16]
 8000c0e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c10:	228f      	movs	r2, #143	@ 0x8f
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	5880      	ldr	r0, [r0, r2]
 8000c16:	3010      	adds	r0, #16
 8000c18:	75c8      	strb	r0, [r1, #23]
 8000c1a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c1c:	5880      	ldr	r0, [r0, r2]
 8000c1e:	3010      	adds	r0, #16
 8000c20:	0a00      	lsrs	r0, r0, #8
 8000c22:	7588      	strb	r0, [r1, #22]
 8000c24:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c26:	5880      	ldr	r0, [r0, r2]
 8000c28:	3010      	adds	r0, #16
 8000c2a:	0c00      	lsrs	r0, r0, #16
 8000c2c:	7548      	strb	r0, [r1, #21]
 8000c2e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c30:	5880      	ldr	r0, [r0, r2]
 8000c32:	3010      	adds	r0, #16
 8000c34:	0e00      	lsrs	r0, r0, #24
 8000c36:	7508      	strb	r0, [r1, #20]
 8000c38:	2000      	movs	r0, #0
 8000c3a:	70c8      	strb	r0, [r1, #3]
 8000c3c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	0049      	lsls	r1, r1, #1
 8000c42:	1846      	adds	r6, r0, r1
 8000c44:	9406      	str	r4, [sp, #24]
 8000c46:	9505      	str	r5, [sp, #20]
 8000c48:	9704      	str	r7, [sp, #16]
 8000c4a:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 8000c4c:	ac18      	add	r4, sp, #96	@ 0x60
 8000c4e:	e040      	b.n	8000cd2 <cmox_ctr_drbg_df+0x142>
 8000c50:	a91e      	add	r1, sp, #120	@ 0x78
 8000c52:	0100      	lsls	r0, r0, #4
 8000c54:	180f      	adds	r7, r1, r0
 8000c56:	a92a      	add	r1, sp, #168	@ 0xa8
 8000c58:	a818      	add	r0, sp, #96	@ 0x60
 8000c5a:	f7ff fe91 	bl	8000980 <convert_block_2_words>
 8000c5e:	003a      	movs	r2, r7
 8000c60:	a92a      	add	r1, sp, #168	@ 0xa8
 8000c62:	0030      	movs	r0, r6
 8000c64:	6833      	ldr	r3, [r6, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4798      	blx	r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	3010      	adds	r0, #16
 8000c6e:	a907      	add	r1, sp, #28
 8000c70:	c80c      	ldmia	r0!, {r2, r3}
 8000c72:	c10c      	stmia	r1!, {r2, r3}
 8000c74:	2008      	movs	r0, #8
 8000c76:	9002      	str	r0, [sp, #8]
 8000c78:	9701      	str	r7, [sp, #4]
 8000c7a:	a802      	add	r0, sp, #8
 8000c7c:	9000      	str	r0, [sp, #0]
 8000c7e:	ab07      	add	r3, sp, #28
 8000c80:	9a05      	ldr	r2, [sp, #20]
 8000c82:	9906      	ldr	r1, [sp, #24]
 8000c84:	0030      	movs	r0, r6
 8000c86:	f7ff fed4 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000c8a:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d008      	beq.n	8000ca2 <cmox_ctr_drbg_df+0x112>
 8000c90:	9701      	str	r7, [sp, #4]
 8000c92:	a802      	add	r0, sp, #8
 8000c94:	9000      	str	r0, [sp, #0]
 8000c96:	ab07      	add	r3, sp, #28
 8000c98:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8000c9a:	9904      	ldr	r1, [sp, #16]
 8000c9c:	0030      	movs	r0, r6
 8000c9e:	f7ff fec8 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000ca2:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d008      	beq.n	8000cba <cmox_ctr_drbg_df+0x12a>
 8000ca8:	9701      	str	r7, [sp, #4]
 8000caa:	a802      	add	r0, sp, #8
 8000cac:	9000      	str	r0, [sp, #0]
 8000cae:	ab07      	add	r3, sp, #28
 8000cb0:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8000cb2:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8000cb4:	0030      	movs	r0, r6
 8000cb6:	f7ff febc 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000cba:	9701      	str	r7, [sp, #4]
 8000cbc:	a802      	add	r0, sp, #8
 8000cbe:	9000      	str	r0, [sp, #0]
 8000cc0:	ab07      	add	r3, sp, #28
 8000cc2:	9a03      	ldr	r2, [sp, #12]
 8000cc4:	a913      	add	r1, sp, #76	@ 0x4c
 8000cc6:	0030      	movs	r0, r6
 8000cc8:	f7ff feb3 	bl	8000a32 <cmox_drbg_bcc_process_input>
 8000ccc:	78e0      	ldrb	r0, [r4, #3]
 8000cce:	1c40      	adds	r0, r0, #1
 8000cd0:	70e0      	strb	r0, [r4, #3]
 8000cd2:	78e0      	ldrb	r0, [r4, #3]
 8000cd4:	228f      	movs	r2, #143	@ 0x8f
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	58aa      	ldr	r2, [r5, r2]
 8000cda:	0912      	lsrs	r2, r2, #4
 8000cdc:	1c52      	adds	r2, r2, #1
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d3b6      	bcc.n	8000c50 <cmox_ctr_drbg_df+0xc0>
 8000ce2:	2400      	movs	r4, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	208f      	movs	r0, #143	@ 0x8f
 8000ce8:	0080      	lsls	r0, r0, #2
 8000cea:	182f      	adds	r7, r5, r0
 8000cec:	e00d      	b.n	8000d0a <cmox_ctr_drbg_df+0x17a>
 8000cee:	a81e      	add	r0, sp, #120	@ 0x78
 8000cf0:	0099      	lsls	r1, r3, #2
 8000cf2:	5840      	ldr	r0, [r0, r1]
 8000cf4:	a90b      	add	r1, sp, #44	@ 0x2c
 8000cf6:	009a      	lsls	r2, r3, #2
 8000cf8:	1889      	adds	r1, r1, r2
 8000cfa:	70c8      	strb	r0, [r1, #3]
 8000cfc:	0a02      	lsrs	r2, r0, #8
 8000cfe:	708a      	strb	r2, [r1, #2]
 8000d00:	0c02      	lsrs	r2, r0, #16
 8000d02:	704a      	strb	r2, [r1, #1]
 8000d04:	0e00      	lsrs	r0, r0, #24
 8000d06:	7008      	strb	r0, [r1, #0]
 8000d08:	1c5b      	adds	r3, r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	0890      	lsrs	r0, r2, #2
 8000d0e:	4283      	cmp	r3, r0
 8000d10:	d3ed      	bcc.n	8000cee <cmox_ctr_drbg_df+0x15e>
 8000d12:	208f      	movs	r0, #143	@ 0x8f
 8000d14:	0080      	lsls	r0, r0, #2
 8000d16:	1828      	adds	r0, r5, r0
 8000d18:	9000      	str	r0, [sp, #0]
 8000d1a:	a90b      	add	r1, sp, #44	@ 0x2c
 8000d1c:	0030      	movs	r0, r6
 8000d1e:	6833      	ldr	r3, [r6, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4798      	blx	r3
 8000d24:	af1e      	add	r7, sp, #120	@ 0x78
 8000d26:	e014      	b.n	8000d52 <cmox_ctr_drbg_df+0x1c2>
 8000d28:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8000d2a:	0122      	lsls	r2, r4, #4
 8000d2c:	188d      	adds	r5, r1, r2
 8000d2e:	002a      	movs	r2, r5
 8000d30:	0880      	lsrs	r0, r0, #2
 8000d32:	0080      	lsls	r0, r0, #2
 8000d34:	1839      	adds	r1, r7, r0
 8000d36:	0030      	movs	r0, r6
 8000d38:	6833      	ldr	r3, [r6, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4798      	blx	r3
 8000d3e:	2210      	movs	r2, #16
 8000d40:	0029      	movs	r1, r5
 8000d42:	9800      	ldr	r0, [sp, #0]
 8000d44:	6800      	ldr	r0, [r0, #0]
 8000d46:	0880      	lsrs	r0, r0, #2
 8000d48:	0080      	lsls	r0, r0, #2
 8000d4a:	1838      	adds	r0, r7, r0
 8000d4c:	f006 fff6 	bl	8007d3c <__aeabi_memcpy>
 8000d50:	1c64      	adds	r4, r4, #1
 8000d52:	9800      	ldr	r0, [sp, #0]
 8000d54:	6800      	ldr	r0, [r0, #0]
 8000d56:	0901      	lsrs	r1, r0, #4
 8000d58:	1c49      	adds	r1, r1, #1
 8000d5a:	428c      	cmp	r4, r1
 8000d5c:	d3e4      	bcc.n	8000d28 <cmox_ctr_drbg_df+0x198>
 8000d5e:	b02f      	add	sp, #188	@ 0xbc
 8000d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08001224 	.word	0x08001224

08000d68 <cmox_ctr_drbg_cleanup>:
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	2480      	movs	r4, #128	@ 0x80
 8000d6c:	02e4      	lsls	r4, r4, #11
 8000d6e:	f000 fa6b 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d101      	bne.n	8000d7a <cmox_ctr_drbg_cleanup+0x12>
 8000d76:	1ce4      	adds	r4, r4, #3
 8000d78:	e003      	b.n	8000d82 <cmox_ctr_drbg_cleanup+0x1a>
 8000d7a:	2196      	movs	r1, #150	@ 0x96
 8000d7c:	0089      	lsls	r1, r1, #2
 8000d7e:	f006 ffdf 	bl	8007d40 <__aeabi_memclr>
 8000d82:	0020      	movs	r0, r4
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <cmox_ctr_drbg_init>:
 8000d86:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d88:	b091      	sub	sp, #68	@ 0x44
 8000d8a:	0015      	movs	r5, r2
 8000d8c:	001f      	movs	r7, r3
 8000d8e:	2480      	movs	r4, #128	@ 0x80
 8000d90:	02e4      	lsls	r4, r4, #11
 8000d92:	f000 fa59 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8000d96:	0006      	movs	r6, r0
 8000d98:	d101      	bne.n	8000d9e <cmox_ctr_drbg_init+0x18>
 8000d9a:	1ce4      	adds	r4, r4, #3
 8000d9c:	e030      	b.n	8000e00 <cmox_ctr_drbg_init+0x7a>
 8000d9e:	9504      	str	r5, [sp, #16]
 8000da0:	208c      	movs	r0, #140	@ 0x8c
 8000da2:	0080      	lsls	r0, r0, #2
 8000da4:	1835      	adds	r5, r6, r0
 8000da6:	2000      	movs	r0, #0
 8000da8:	60a8      	str	r0, [r5, #8]
 8000daa:	6928      	ldr	r0, [r5, #16]
 8000dac:	0082      	lsls	r2, r0, #2
 8000dae:	69e9      	ldr	r1, [r5, #28]
 8000db0:	0030      	movs	r0, r6
 8000db2:	3010      	adds	r0, #16
 8000db4:	f006 ffc2 	bl	8007d3c <__aeabi_memcpy>
 8000db8:	68e8      	ldr	r0, [r5, #12]
 8000dba:	60b0      	str	r0, [r6, #8]
 8000dbc:	9804      	ldr	r0, [sp, #16]
 8000dbe:	6969      	ldr	r1, [r5, #20]
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	d201      	bcs.n	8000dc8 <cmox_ctr_drbg_init+0x42>
 8000dc4:	340f      	adds	r4, #15
 8000dc6:	e01b      	b.n	8000e00 <cmox_ctr_drbg_init+0x7a>
 8000dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8000dca:	0a60      	lsrs	r0, r4, #9
 8000dcc:	1830      	adds	r0, r6, r0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	c006      	stmia	r0!, {r1, r2}
 8000dd4:	c006      	stmia	r0!, {r1, r2}
 8000dd6:	a805      	add	r0, sp, #20
 8000dd8:	9003      	str	r0, [sp, #12]
 8000dda:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8000ddc:	9002      	str	r0, [sp, #8]
 8000dde:	9701      	str	r7, [sp, #4]
 8000de0:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8000de2:	9000      	str	r0, [sp, #0]
 8000de4:	9a04      	ldr	r2, [sp, #16]
 8000de6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8000de8:	0030      	movs	r0, r6
 8000dea:	f7ff fed1 	bl	8000b90 <cmox_ctr_drbg_df>
 8000dee:	a905      	add	r1, sp, #20
 8000df0:	0030      	movs	r0, r6
 8000df2:	f7ff fe84 	bl	8000afe <cmox_ctr_drbg_update>
 8000df6:	2001      	movs	r0, #1
 8000df8:	2100      	movs	r1, #0
 8000dfa:	c503      	stmia	r5!, {r0, r1}
 8000dfc:	3d08      	subs	r5, #8
 8000dfe:	60a8      	str	r0, [r5, #8]
 8000e00:	0020      	movs	r0, r4
 8000e02:	b013      	add	sp, #76	@ 0x4c
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e06 <cmox_ctr_drbg_reseed>:
 8000e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e08:	b099      	sub	sp, #100	@ 0x64
 8000e0a:	000f      	movs	r7, r1
 8000e0c:	0014      	movs	r4, r2
 8000e0e:	001e      	movs	r6, r3
 8000e10:	2580      	movs	r5, #128	@ 0x80
 8000e12:	02ed      	lsls	r5, r5, #11
 8000e14:	f000 fa18 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8000e18:	9004      	str	r0, [sp, #16]
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d101      	bne.n	8000e22 <cmox_ctr_drbg_reseed+0x1c>
 8000e1e:	1ced      	adds	r5, r5, #3
 8000e20:	e04c      	b.n	8000ebc <cmox_ctr_drbg_reseed+0xb6>
 8000e22:	0022      	movs	r2, r4
 8000e24:	218c      	movs	r1, #140	@ 0x8c
 8000e26:	0089      	lsls	r1, r1, #2
 8000e28:	1840      	adds	r0, r0, r1
 8000e2a:	6940      	ldr	r0, [r0, #20]
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	d201      	bcs.n	8000e34 <cmox_ctr_drbg_reseed+0x2e>
 8000e30:	350f      	adds	r5, #15
 8000e32:	e043      	b.n	8000ebc <cmox_ctr_drbg_reseed+0xb6>
 8000e34:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8000e36:	0039      	movs	r1, r7
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d007      	beq.n	8000e4c <cmox_ctr_drbg_reseed+0x46>
 8000e3c:	0033      	movs	r3, r6
 8000e3e:	ac0d      	add	r4, sp, #52	@ 0x34
 8000e40:	9403      	str	r4, [sp, #12]
 8000e42:	2400      	movs	r4, #0
 8000e44:	9402      	str	r4, [sp, #8]
 8000e46:	9401      	str	r4, [sp, #4]
 8000e48:	9000      	str	r0, [sp, #0]
 8000e4a:	e006      	b.n	8000e5a <cmox_ctr_drbg_reseed+0x54>
 8000e4c:	a80d      	add	r0, sp, #52	@ 0x34
 8000e4e:	9003      	str	r0, [sp, #12]
 8000e50:	2000      	movs	r0, #0
 8000e52:	9002      	str	r0, [sp, #8]
 8000e54:	9001      	str	r0, [sp, #4]
 8000e56:	9000      	str	r0, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9804      	ldr	r0, [sp, #16]
 8000e5c:	f7ff fe98 	bl	8000b90 <cmox_ctr_drbg_df>
 8000e60:	2300      	movs	r3, #0
 8000e62:	9804      	ldr	r0, [sp, #16]
 8000e64:	218c      	movs	r1, #140	@ 0x8c
 8000e66:	0089      	lsls	r1, r1, #2
 8000e68:	1846      	adds	r6, r0, r1
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e013      	b.n	8000e96 <cmox_ctr_drbg_reseed+0x90>
 8000e6e:	0098      	lsls	r0, r3, #2
 8000e70:	1820      	adds	r0, r4, r0
 8000e72:	2184      	movs	r1, #132	@ 0x84
 8000e74:	0089      	lsls	r1, r1, #2
 8000e76:	1840      	adds	r0, r0, r1
 8000e78:	a905      	add	r1, sp, #20
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	1889      	adds	r1, r1, r2
 8000e7e:	6802      	ldr	r2, [r0, #0]
 8000e80:	70ca      	strb	r2, [r1, #3]
 8000e82:	6802      	ldr	r2, [r0, #0]
 8000e84:	0a12      	lsrs	r2, r2, #8
 8000e86:	708a      	strb	r2, [r1, #2]
 8000e88:	6802      	ldr	r2, [r0, #0]
 8000e8a:	0c12      	lsrs	r2, r2, #16
 8000e8c:	704a      	strb	r2, [r1, #1]
 8000e8e:	6800      	ldr	r0, [r0, #0]
 8000e90:	0e00      	lsrs	r0, r0, #24
 8000e92:	7008      	strb	r0, [r1, #0]
 8000e94:	1c5b      	adds	r3, r3, #1
 8000e96:	68f2      	ldr	r2, [r6, #12]
 8000e98:	0890      	lsrs	r0, r2, #2
 8000e9a:	4283      	cmp	r3, r0
 8000e9c:	d3e7      	bcc.n	8000e6e <cmox_ctr_drbg_reseed+0x68>
 8000e9e:	a905      	add	r1, sp, #20
 8000ea0:	1d20      	adds	r0, r4, #4
 8000ea2:	6863      	ldr	r3, [r4, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4798      	blx	r3
 8000ea8:	a90d      	add	r1, sp, #52	@ 0x34
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f7ff fe27 	bl	8000afe <cmox_ctr_drbg_update>
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	228c      	movs	r2, #140	@ 0x8c
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	18a2      	adds	r2, r4, r2
 8000eba:	c203      	stmia	r2!, {r0, r1}
 8000ebc:	0028      	movs	r0, r5
 8000ebe:	b019      	add	sp, #100	@ 0x64
 8000ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000ec4 <cmox_ctr_drbg_generate_single>:
 8000ec4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 8000ec6:	b09f      	sub	sp, #124	@ 0x7c
 8000ec8:	0005      	movs	r5, r0
 8000eca:	000f      	movs	r7, r1
 8000ecc:	0014      	movs	r4, r2
 8000ece:	2120      	movs	r1, #32
 8000ed0:	a80a      	add	r0, sp, #40	@ 0x28
 8000ed2:	f006 ff35 	bl	8007d40 <__aeabi_memclr>
 8000ed6:	4668      	mov	r0, sp
 8000ed8:	4999      	ldr	r1, [pc, #612]	@ (8001140 <cmox_ctr_drbg_generate_single+0x27c>)
 8000eda:	c90c      	ldmia	r1!, {r2, r3}
 8000edc:	c00c      	stmia	r0!, {r2, r3}
 8000ede:	2600      	movs	r6, #0
 8000ee0:	4898      	ldr	r0, [pc, #608]	@ (8001144 <cmox_ctr_drbg_generate_single+0x280>)
 8000ee2:	7800      	ldrb	r0, [r0, #0]
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d101      	bne.n	8000eec <cmox_ctr_drbg_generate_single+0x28>
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e001      	b.n	8000ef0 <cmox_ctr_drbg_generate_single+0x2c>
 8000eec:	2004      	movs	r0, #4
 8000eee:	2104      	movs	r1, #4
 8000ef0:	9412      	str	r4, [sp, #72]	@ 0x48
 8000ef2:	4a95      	ldr	r2, [pc, #596]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000ef4:	5810      	ldr	r0, [r2, r0]
 8000ef6:	466a      	mov	r2, sp
 8000ef8:	5851      	ldr	r1, [r2, r1]
 8000efa:	1841      	adds	r1, r0, r1
 8000efc:	4893      	ldr	r0, [pc, #588]	@ (800114c <cmox_ctr_drbg_generate_single+0x288>)
 8000efe:	6008      	str	r0, [r1, #0]
 8000f00:	6808      	ldr	r0, [r1, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	608a      	str	r2, [r1, #8]
 8000f06:	4990      	ldr	r1, [pc, #576]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000f08:	6849      	ldr	r1, [r1, #4]
 8000f0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8000f0c:	498e      	ldr	r1, [pc, #568]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000f0e:	6809      	ldr	r1, [r1, #0]
 8000f10:	9108      	str	r1, [sp, #32]
 8000f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000f14:	4041      	eors	r1, r0
 8000f16:	9800      	ldr	r0, [sp, #0]
 8000f18:	4048      	eors	r0, r1
 8000f1a:	498d      	ldr	r1, [pc, #564]	@ (8001150 <cmox_ctr_drbg_generate_single+0x28c>)
 8000f1c:	4041      	eors	r1, r0
 8000f1e:	9808      	ldr	r0, [sp, #32]
 8000f20:	9a01      	ldr	r2, [sp, #4]
 8000f22:	4042      	eors	r2, r0
 8000f24:	488b      	ldr	r0, [pc, #556]	@ (8001154 <cmox_ctr_drbg_generate_single+0x290>)
 8000f26:	4050      	eors	r0, r2
 8000f28:	1808      	adds	r0, r1, r0
 8000f2a:	4c8b      	ldr	r4, [pc, #556]	@ (8001158 <cmox_ctr_drbg_generate_single+0x294>)
 8000f2c:	4044      	eors	r4, r0
 8000f2e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d032      	beq.n	8000f9a <cmox_ctr_drbg_generate_single+0xd6>
 8000f34:	0039      	movs	r1, r7
 8000f36:	a813      	add	r0, sp, #76	@ 0x4c
 8000f38:	9003      	str	r0, [sp, #12]
 8000f3a:	9602      	str	r6, [sp, #8]
 8000f3c:	9601      	str	r6, [sp, #4]
 8000f3e:	9600      	str	r6, [sp, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8000f44:	0028      	movs	r0, r5
 8000f46:	f7ff fe23 	bl	8000b90 <cmox_ctr_drbg_df>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	aa0a      	add	r2, sp, #40	@ 0x28
 8000f4e:	e012      	b.n	8000f76 <cmox_ctr_drbg_generate_single+0xb2>
 8000f50:	0098      	lsls	r0, r3, #2
 8000f52:	1828      	adds	r0, r5, r0
 8000f54:	2184      	movs	r1, #132	@ 0x84
 8000f56:	0089      	lsls	r1, r1, #2
 8000f58:	1840      	adds	r0, r0, r1
 8000f5a:	0099      	lsls	r1, r3, #2
 8000f5c:	1851      	adds	r1, r2, r1
 8000f5e:	6807      	ldr	r7, [r0, #0]
 8000f60:	70cf      	strb	r7, [r1, #3]
 8000f62:	6807      	ldr	r7, [r0, #0]
 8000f64:	0a3f      	lsrs	r7, r7, #8
 8000f66:	708f      	strb	r7, [r1, #2]
 8000f68:	6807      	ldr	r7, [r0, #0]
 8000f6a:	0c3f      	lsrs	r7, r7, #16
 8000f6c:	704f      	strb	r7, [r1, #1]
 8000f6e:	6800      	ldr	r0, [r0, #0]
 8000f70:	0e00      	lsrs	r0, r0, #24
 8000f72:	7008      	strb	r0, [r1, #0]
 8000f74:	1c5b      	adds	r3, r3, #1
 8000f76:	208c      	movs	r0, #140	@ 0x8c
 8000f78:	0080      	lsls	r0, r0, #2
 8000f7a:	1828      	adds	r0, r5, r0
 8000f7c:	68c0      	ldr	r0, [r0, #12]
 8000f7e:	0881      	lsrs	r1, r0, #2
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d3e5      	bcc.n	8000f50 <cmox_ctr_drbg_generate_single+0x8c>
 8000f84:	0002      	movs	r2, r0
 8000f86:	a90a      	add	r1, sp, #40	@ 0x28
 8000f88:	1d28      	adds	r0, r5, #4
 8000f8a:	686b      	ldr	r3, [r5, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4798      	blx	r3
 8000f90:	a913      	add	r1, sp, #76	@ 0x4c
 8000f92:	0028      	movs	r0, r5
 8000f94:	f7ff fdb3 	bl	8000afe <cmox_ctr_drbg_update>
 8000f98:	e007      	b.n	8000faa <cmox_ctr_drbg_generate_single+0xe6>
 8000f9a:	208c      	movs	r0, #140	@ 0x8c
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	1828      	adds	r0, r5, r0
 8000fa0:	68c1      	ldr	r1, [r0, #12]
 8000fa2:	3110      	adds	r1, #16
 8000fa4:	a813      	add	r0, sp, #76	@ 0x4c
 8000fa6:	f006 fecb 	bl	8007d40 <__aeabi_memclr>
 8000faa:	0023      	movs	r3, r4
 8000fac:	d03d      	beq.n	800102a <cmox_ctr_drbg_generate_single+0x166>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e03b      	b.n	800102a <cmox_ctr_drbg_generate_single+0x166>
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	e008      	b.n	8000fca <cmox_ctr_drbg_generate_single+0x106>
 8000fb8:	4668      	mov	r0, sp
 8000fba:	4961      	ldr	r1, [pc, #388]	@ (8001140 <cmox_ctr_drbg_generate_single+0x27c>)
 8000fbc:	c914      	ldmia	r1!, {r2, r4}
 8000fbe:	c014      	stmia	r0!, {r2, r4}
 8000fc0:	4860      	ldr	r0, [pc, #384]	@ (8001144 <cmox_ctr_drbg_generate_single+0x280>)
 8000fc2:	7800      	ldrb	r0, [r0, #0]
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d1f4      	bne.n	8000fb2 <cmox_ctr_drbg_generate_single+0xee>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4a5f      	ldr	r2, [pc, #380]	@ (8001148 <cmox_ctr_drbg_generate_single+0x284>)
 8000fcc:	5810      	ldr	r0, [r2, r0]
 8000fce:	466a      	mov	r2, sp
 8000fd0:	5851      	ldr	r1, [r2, r1]
 8000fd2:	1841      	adds	r1, r0, r1
 8000fd4:	4861      	ldr	r0, [pc, #388]	@ (800115c <cmox_ctr_drbg_generate_single+0x298>)
 8000fd6:	6008      	str	r0, [r1, #0]
 8000fd8:	6808      	ldr	r0, [r1, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	608a      	str	r2, [r1, #8]
 8000fde:	9900      	ldr	r1, [sp, #0]
 8000fe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000fe2:	404a      	eors	r2, r1
 8000fe4:	4050      	eors	r0, r2
 8000fe6:	495a      	ldr	r1, [pc, #360]	@ (8001150 <cmox_ctr_drbg_generate_single+0x28c>)
 8000fe8:	4041      	eors	r1, r0
 8000fea:	9801      	ldr	r0, [sp, #4]
 8000fec:	9a08      	ldr	r2, [sp, #32]
 8000fee:	4042      	eors	r2, r0
 8000ff0:	4858      	ldr	r0, [pc, #352]	@ (8001154 <cmox_ctr_drbg_generate_single+0x290>)
 8000ff2:	4050      	eors	r0, r2
 8000ff4:	1808      	adds	r0, r1, r0
 8000ff6:	495a      	ldr	r1, [pc, #360]	@ (8001160 <cmox_ctr_drbg_generate_single+0x29c>)
 8000ff8:	4041      	eors	r1, r0
 8000ffa:	0008      	movs	r0, r1
 8000ffc:	d000      	beq.n	8001000 <cmox_ctr_drbg_generate_single+0x13c>
 8000ffe:	2001      	movs	r0, #1
 8001000:	a90a      	add	r1, sp, #40	@ 0x28
 8001002:	1a18      	subs	r0, r3, r0
 8001004:	0080      	lsls	r0, r0, #2
 8001006:	1808      	adds	r0, r1, r0
 8001008:	0099      	lsls	r1, r3, #2
 800100a:	1869      	adds	r1, r5, r1
 800100c:	2284      	movs	r2, #132	@ 0x84
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	1889      	adds	r1, r1, r2
 8001012:	680a      	ldr	r2, [r1, #0]
 8001014:	70c2      	strb	r2, [r0, #3]
 8001016:	680a      	ldr	r2, [r1, #0]
 8001018:	0a12      	lsrs	r2, r2, #8
 800101a:	7082      	strb	r2, [r0, #2]
 800101c:	680a      	ldr	r2, [r1, #0]
 800101e:	0c12      	lsrs	r2, r2, #16
 8001020:	7042      	strb	r2, [r0, #1]
 8001022:	6809      	ldr	r1, [r1, #0]
 8001024:	0e09      	lsrs	r1, r1, #24
 8001026:	7001      	strb	r1, [r0, #0]
 8001028:	1c5b      	adds	r3, r3, #1
 800102a:	208c      	movs	r0, #140	@ 0x8c
 800102c:	0080      	lsls	r0, r0, #2
 800102e:	1828      	adds	r0, r5, r0
 8001030:	68c2      	ldr	r2, [r0, #12]
 8001032:	0890      	lsrs	r0, r2, #2
 8001034:	4283      	cmp	r3, r0
 8001036:	d3bf      	bcc.n	8000fb8 <cmox_ctr_drbg_generate_single+0xf4>
 8001038:	a90a      	add	r1, sp, #40	@ 0x28
 800103a:	1d28      	adds	r0, r5, #4
 800103c:	686b      	ldr	r3, [r5, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4798      	blx	r3
 8001042:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8001044:	0700      	lsls	r0, r0, #28
 8001046:	0f00      	lsrs	r0, r0, #28
 8001048:	9000      	str	r0, [sp, #0]
 800104a:	2410      	movs	r4, #16
 800104c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800104e:	e023      	b.n	8001098 <cmox_ctr_drbg_generate_single+0x1d4>
 8001050:	2080      	movs	r0, #128	@ 0x80
 8001052:	0080      	lsls	r0, r0, #2
 8001054:	1828      	adds	r0, r5, r0
 8001056:	f7ff fd42 	bl	8000ade <cmox_ctr_drbg_increment_v>
 800105a:	aa04      	add	r2, sp, #16
 800105c:	2080      	movs	r0, #128	@ 0x80
 800105e:	0080      	lsls	r0, r0, #2
 8001060:	1829      	adds	r1, r5, r0
 8001062:	1d28      	adds	r0, r5, #4
 8001064:	686b      	ldr	r3, [r5, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4798      	blx	r3
 800106a:	2200      	movs	r2, #0
 800106c:	0090      	lsls	r0, r2, #2
 800106e:	1820      	adds	r0, r4, r0
 8001070:	1838      	adds	r0, r7, r0
 8001072:	3810      	subs	r0, #16
 8001074:	a904      	add	r1, sp, #16
 8001076:	0093      	lsls	r3, r2, #2
 8001078:	18c9      	adds	r1, r1, r3
 800107a:	680b      	ldr	r3, [r1, #0]
 800107c:	70c3      	strb	r3, [r0, #3]
 800107e:	680b      	ldr	r3, [r1, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	7083      	strb	r3, [r0, #2]
 8001084:	680b      	ldr	r3, [r1, #0]
 8001086:	0c1b      	lsrs	r3, r3, #16
 8001088:	7043      	strb	r3, [r0, #1]
 800108a:	6809      	ldr	r1, [r1, #0]
 800108c:	0e09      	lsrs	r1, r1, #24
 800108e:	7001      	strb	r1, [r0, #0]
 8001090:	1c52      	adds	r2, r2, #1
 8001092:	2a04      	cmp	r2, #4
 8001094:	d3ea      	bcc.n	800106c <cmox_ctr_drbg_generate_single+0x1a8>
 8001096:	3410      	adds	r4, #16
 8001098:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800109a:	42a0      	cmp	r0, r4
 800109c:	d2d8      	bcs.n	8001050 <cmox_ctr_drbg_generate_single+0x18c>
 800109e:	9800      	ldr	r0, [sp, #0]
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d03d      	beq.n	8001120 <cmox_ctr_drbg_generate_single+0x25c>
 80010a4:	2080      	movs	r0, #128	@ 0x80
 80010a6:	0080      	lsls	r0, r0, #2
 80010a8:	1828      	adds	r0, r5, r0
 80010aa:	f7ff fd18 	bl	8000ade <cmox_ctr_drbg_increment_v>
 80010ae:	aa04      	add	r2, sp, #16
 80010b0:	2080      	movs	r0, #128	@ 0x80
 80010b2:	0080      	lsls	r0, r0, #2
 80010b4:	1829      	adds	r1, r5, r0
 80010b6:	1d28      	adds	r0, r5, #4
 80010b8:	686b      	ldr	r3, [r5, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4798      	blx	r3
 80010be:	0038      	movs	r0, r7
 80010c0:	9f00      	ldr	r7, [sp, #0]
 80010c2:	e00d      	b.n	80010e0 <cmox_ctr_drbg_generate_single+0x21c>
 80010c4:	18c1      	adds	r1, r0, r3
 80010c6:	3910      	subs	r1, #16
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	70cb      	strb	r3, [r1, #3]
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	708b      	strb	r3, [r1, #2]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	0c1b      	lsrs	r3, r3, #16
 80010d6:	704b      	strb	r3, [r1, #1]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	0e12      	lsrs	r2, r2, #24
 80010dc:	700a      	strb	r2, [r1, #0]
 80010de:	1c76      	adds	r6, r6, #1
 80010e0:	a904      	add	r1, sp, #16
 80010e2:	00b2      	lsls	r2, r6, #2
 80010e4:	188a      	adds	r2, r1, r2
 80010e6:	00b1      	lsls	r1, r6, #2
 80010e8:	1863      	adds	r3, r4, r1
 80010ea:	08b9      	lsrs	r1, r7, #2
 80010ec:	428e      	cmp	r6, r1
 80010ee:	d3e9      	bcc.n	80010c4 <cmox_ctr_drbg_generate_single+0x200>
 80010f0:	2103      	movs	r1, #3
 80010f2:	2403      	movs	r4, #3
 80010f4:	403c      	ands	r4, r7
 80010f6:	d013      	beq.n	8001120 <cmox_ctr_drbg_generate_single+0x25c>
 80010f8:	6816      	ldr	r6, [r2, #0]
 80010fa:	46b4      	mov	ip, r6
 80010fc:	2604      	movs	r6, #4
 80010fe:	4039      	ands	r1, r7
 8001100:	1a71      	subs	r1, r6, r1
 8001102:	00c9      	lsls	r1, r1, #3
 8001104:	4666      	mov	r6, ip
 8001106:	40ce      	lsrs	r6, r1
 8001108:	6016      	str	r6, [r2, #0]
 800110a:	3811      	subs	r0, #17
 800110c:	1919      	adds	r1, r3, r4
 800110e:	5446      	strb	r6, [r0, r1]
 8001110:	e004      	b.n	800111c <cmox_ctr_drbg_generate_single+0x258>
 8001112:	6811      	ldr	r1, [r2, #0]
 8001114:	0a09      	lsrs	r1, r1, #8
 8001116:	6011      	str	r1, [r2, #0]
 8001118:	191e      	adds	r6, r3, r4
 800111a:	5581      	strb	r1, [r0, r6]
 800111c:	1e64      	subs	r4, r4, #1
 800111e:	d1f8      	bne.n	8001112 <cmox_ctr_drbg_generate_single+0x24e>
 8001120:	a913      	add	r1, sp, #76	@ 0x4c
 8001122:	0028      	movs	r0, r5
 8001124:	f7ff fceb 	bl	8000afe <cmox_ctr_drbg_update>
 8001128:	208c      	movs	r0, #140	@ 0x8c
 800112a:	0080      	lsls	r0, r0, #2
 800112c:	182a      	adds	r2, r5, r0
 800112e:	ca03      	ldmia	r2!, {r0, r1}
 8001130:	3a08      	subs	r2, #8
 8001132:	2300      	movs	r3, #0
 8001134:	1c40      	adds	r0, r0, #1
 8001136:	4159      	adcs	r1, r3
 8001138:	c203      	stmia	r2!, {r0, r1}
 800113a:	b021      	add	sp, #132	@ 0x84
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	bf00      	nop
 8001140:	0800121c 	.word	0x0800121c
 8001144:	200000dc 	.word	0x200000dc
 8001148:	08008928 	.word	0x08008928
 800114c:	fd31599e 	.word	0xfd31599e
 8001150:	12008504 	.word	0x12008504
 8001154:	7a0168fc 	.word	0x7a0168fc
 8001158:	c3ec4f8b 	.word	0xc3ec4f8b
 800115c:	c609d343 	.word	0xc609d343
 8001160:	e7b6faea 	.word	0xe7b6faea

08001164 <cmox_ctr_drbg_generate>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	000c      	movs	r4, r1
 800116a:	0017      	movs	r7, r2
 800116c:	001e      	movs	r6, r3
 800116e:	2180      	movs	r1, #128	@ 0x80
 8001170:	02c9      	lsls	r1, r1, #11
 8001172:	9103      	str	r1, [sp, #12]
 8001174:	f000 f868 	bl	8001248 <cmox_ctr_drbg_getByDRBG>
 8001178:	2800      	cmp	r0, #0
 800117a:	d101      	bne.n	8001180 <cmox_ctr_drbg_generate+0x1c>
 800117c:	4d24      	ldr	r5, [pc, #144]	@ (8001210 <cmox_ctr_drbg_generate+0xac>)
 800117e:	e044      	b.n	800120a <cmox_ctr_drbg_generate+0xa6>
 8001180:	218c      	movs	r1, #140	@ 0x8c
 8001182:	0089      	lsls	r1, r1, #2
 8001184:	1841      	adds	r1, r0, r1
 8001186:	6889      	ldr	r1, [r1, #8]
 8001188:	2900      	cmp	r1, #0
 800118a:	d101      	bne.n	8001190 <cmox_ctr_drbg_generate+0x2c>
 800118c:	4d21      	ldr	r5, [pc, #132]	@ (8001214 <cmox_ctr_drbg_generate+0xb0>)
 800118e:	e03c      	b.n	800120a <cmox_ctr_drbg_generate+0xa6>
 8001190:	228c      	movs	r2, #140	@ 0x8c
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	1882      	adds	r2, r0, r2
 8001196:	9204      	str	r2, [sp, #16]
 8001198:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800119a:	9402      	str	r4, [sp, #8]
 800119c:	9001      	str	r0, [sp, #4]
 800119e:	2400      	movs	r4, #0
 80011a0:	e00a      	b.n	80011b8 <cmox_ctr_drbg_generate+0x54>
 80011a2:	9800      	ldr	r0, [sp, #0]
 80011a4:	4360      	muls	r0, r4
 80011a6:	1a29      	subs	r1, r5, r0
 80011a8:	9100      	str	r1, [sp, #0]
 80011aa:	1833      	adds	r3, r6, r0
 80011ac:	003a      	movs	r2, r7
 80011ae:	9902      	ldr	r1, [sp, #8]
 80011b0:	9801      	ldr	r0, [sp, #4]
 80011b2:	f7ff fe87 	bl	8000ec4 <cmox_ctr_drbg_generate_single>
 80011b6:	1c64      	adds	r4, r4, #1
 80011b8:	9804      	ldr	r0, [sp, #16]
 80011ba:	6980      	ldr	r0, [r0, #24]
 80011bc:	9000      	str	r0, [sp, #0]
 80011be:	9804      	ldr	r0, [sp, #16]
 80011c0:	c803      	ldmia	r0, {r0, r1}
 80011c2:	aa06      	add	r2, sp, #24
 80011c4:	c203      	stmia	r2!, {r0, r1}
 80011c6:	0028      	movs	r0, r5
 80011c8:	9900      	ldr	r1, [sp, #0]
 80011ca:	f000 faf1 	bl	80017b0 <__udivsi3>
 80011ce:	4284      	cmp	r4, r0
 80011d0:	d206      	bcs.n	80011e0 <cmox_ctr_drbg_generate+0x7c>
 80011d2:	a806      	add	r0, sp, #24
 80011d4:	c803      	ldmia	r0, {r0, r1}
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4299      	cmp	r1, r3
 80011dc:	d3e1      	bcc.n	80011a2 <cmox_ctr_drbg_generate+0x3e>
 80011de:	e008      	b.n	80011f2 <cmox_ctr_drbg_generate+0x8e>
 80011e0:	9704      	str	r7, [sp, #16]
 80011e2:	002f      	movs	r7, r5
 80011e4:	9d03      	ldr	r5, [sp, #12]
 80011e6:	a806      	add	r0, sp, #24
 80011e8:	c803      	ldmia	r0, {r0, r1}
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	025b      	lsls	r3, r3, #9
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d301      	bcc.n	80011f6 <cmox_ctr_drbg_generate+0x92>
 80011f2:	4d09      	ldr	r5, [pc, #36]	@ (8001218 <cmox_ctr_drbg_generate+0xb4>)
 80011f4:	e009      	b.n	800120a <cmox_ctr_drbg_generate+0xa6>
 80011f6:	9800      	ldr	r0, [sp, #0]
 80011f8:	4344      	muls	r4, r0
 80011fa:	1b38      	subs	r0, r7, r4
 80011fc:	9000      	str	r0, [sp, #0]
 80011fe:	1933      	adds	r3, r6, r4
 8001200:	9a04      	ldr	r2, [sp, #16]
 8001202:	9902      	ldr	r1, [sp, #8]
 8001204:	9801      	ldr	r0, [sp, #4]
 8001206:	f7ff fe5d 	bl	8000ec4 <cmox_ctr_drbg_generate_single>
 800120a:	0028      	movs	r0, r5
 800120c:	b009      	add	sp, #36	@ 0x24
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001210:	00040003 	.word	0x00040003
 8001214:	0004000d 	.word	0x0004000d
 8001218:	0004000e 	.word	0x0004000e
 800121c:	0101b004 	.word	0x0101b004
 8001220:	45011700 	.word	0x45011700

08001224 <.text_15>:
 8001224:	00000080 	.word	0x00000080
	...

08001238 <CMOX_CTR_DRBG_TABLE>:
 8001238:	08000d69 08000d87 08000e07 08001165     i...........e...

08001248 <cmox_ctr_drbg_getByDRBG>:
 8001248:	6801      	ldr	r1, [r0, #0]
 800124a:	4a02      	ldr	r2, [pc, #8]	@ (8001254 <cmox_ctr_drbg_getByDRBG+0xc>)
 800124c:	4291      	cmp	r1, r2
 800124e:	d000      	beq.n	8001252 <cmox_ctr_drbg_getByDRBG+0xa>
 8001250:	2000      	movs	r0, #0
 8001252:	4770      	bx	lr
 8001254:	08001238 	.word	0x08001238

08001258 <cmox_ctr_drbg_construct>:
 8001258:	2800      	cmp	r0, #0
 800125a:	d01b      	beq.n	8001294 <cmox_ctr_drbg_construct+0x3c>
 800125c:	2900      	cmp	r1, #0
 800125e:	d101      	bne.n	8001264 <cmox_ctr_drbg_construct+0xc>
 8001260:	2000      	movs	r0, #0
 8001262:	4770      	bx	lr
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <cmox_ctr_drbg_construct+0x40>)
 8001266:	6002      	str	r2, [r0, #0]
 8001268:	680a      	ldr	r2, [r1, #0]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	6043      	str	r3, [r0, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	50c2      	str	r2, [r0, r3]
 8001276:	228f      	movs	r2, #143	@ 0x8f
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	1882      	adds	r2, r0, r2
 800127c:	684b      	ldr	r3, [r1, #4]
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	688b      	ldr	r3, [r1, #8]
 8001282:	6053      	str	r3, [r2, #4]
 8001284:	698b      	ldr	r3, [r1, #24]
 8001286:	6113      	str	r3, [r2, #16]
 8001288:	69cb      	ldr	r3, [r1, #28]
 800128a:	6153      	str	r3, [r2, #20]
 800128c:	690b      	ldr	r3, [r1, #16]
 800128e:	6093      	str	r3, [r2, #8]
 8001290:	68c9      	ldr	r1, [r1, #12]
 8001292:	60d1      	str	r1, [r2, #12]
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	08001238 	.word	0x08001238

0800129c <cmox_drbg_cleanup>:
 800129c:	0001      	movs	r1, r0
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <cmox_drbg_cleanup+0x20>)
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d100      	bne.n	80012a6 <cmox_drbg_cleanup+0xa>
 80012a4:	4770      	bx	lr
 80012a6:	b580      	push	{r7, lr}
 80012a8:	680a      	ldr	r2, [r1, #0]
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d004      	beq.n	80012b8 <cmox_drbg_cleanup+0x1c>
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d001      	beq.n	80012b8 <cmox_drbg_cleanup+0x1c>
 80012b4:	0008      	movs	r0, r1
 80012b6:	4790      	blx	r2
 80012b8:	bd02      	pop	{r1, pc}
 80012ba:	bf00      	nop
 80012bc:	00040003 	.word	0x00040003

080012c0 <cmox_drbg_init>:
 80012c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d014      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012c6:	6804      	ldr	r4, [r0, #0]
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	d011      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012cc:	6864      	ldr	r4, [r4, #4]
 80012ce:	2c00      	cmp	r4, #0
 80012d0:	d00e      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d00c      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d00a      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80012dc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d001      	beq.n	80012e6 <cmox_drbg_init+0x26>
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d004      	beq.n	80012f0 <cmox_drbg_init+0x30>
 80012e6:	9f08      	ldr	r7, [sp, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <cmox_drbg_init+0x34>
 80012ec:	2f00      	cmp	r7, #0
 80012ee:	d001      	beq.n	80012f4 <cmox_drbg_init+0x34>
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <cmox_drbg_init+0x40>)
 80012f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80012f4:	9502      	str	r5, [sp, #8]
 80012f6:	9601      	str	r6, [sp, #4]
 80012f8:	9700      	str	r7, [sp, #0]
 80012fa:	47a0      	blx	r4
 80012fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80012fe:	bf00      	nop
 8001300:	00040003 	.word	0x00040003

08001304 <cmox_drbg_reseed>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	2800      	cmp	r0, #0
 8001308:	d00c      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 800130a:	6804      	ldr	r4, [r0, #0]
 800130c:	2c00      	cmp	r4, #0
 800130e:	d009      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 8001310:	68a4      	ldr	r4, [r4, #8]
 8001312:	2c00      	cmp	r4, #0
 8001314:	d006      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 8001316:	2900      	cmp	r1, #0
 8001318:	d004      	beq.n	8001324 <cmox_drbg_reseed+0x20>
 800131a:	9d04      	ldr	r5, [sp, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <cmox_drbg_reseed+0x24>
 8001320:	2d00      	cmp	r5, #0
 8001322:	d001      	beq.n	8001328 <cmox_drbg_reseed+0x24>
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <cmox_drbg_reseed+0x2c>)
 8001326:	bd32      	pop	{r1, r4, r5, pc}
 8001328:	9500      	str	r5, [sp, #0]
 800132a:	47a0      	blx	r4
 800132c:	bd32      	pop	{r1, r4, r5, pc}
 800132e:	bf00      	nop
 8001330:	00040003 	.word	0x00040003

08001334 <cmox_drbg_generate>:
 8001334:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	480a      	ldr	r0, [pc, #40]	@ (8001364 <cmox_drbg_generate+0x30>)
 800133a:	2c00      	cmp	r4, #0
 800133c:	d011      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 800133e:	6825      	ldr	r5, [r4, #0]
 8001340:	2d00      	cmp	r5, #0
 8001342:	d00e      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 8001344:	68ed      	ldr	r5, [r5, #12]
 8001346:	2d00      	cmp	r5, #0
 8001348:	d00b      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 800134a:	2900      	cmp	r1, #0
 800134c:	d101      	bne.n	8001352 <cmox_drbg_generate+0x1e>
 800134e:	2a00      	cmp	r2, #0
 8001350:	d107      	bne.n	8001362 <cmox_drbg_generate+0x2e>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 8001356:	9e06      	ldr	r6, [sp, #24]
 8001358:	2e00      	cmp	r6, #0
 800135a:	d002      	beq.n	8001362 <cmox_drbg_generate+0x2e>
 800135c:	9600      	str	r6, [sp, #0]
 800135e:	0020      	movs	r0, r4
 8001360:	47a8      	blx	r5
 8001362:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001364:	00040003 	.word	0x00040003

08001368 <cmox_initialize>:
 8001368:	b580      	push	{r7, lr}
 800136a:	2800      	cmp	r0, #0
 800136c:	d009      	beq.n	8001382 <cmox_initialize+0x1a>
 800136e:	6801      	ldr	r1, [r0, #0]
 8001370:	2900      	cmp	r1, #0
 8001372:	d005      	beq.n	8001380 <cmox_initialize+0x18>
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <cmox_initialize+0x20>)
 8001376:	4291      	cmp	r1, r2
 8001378:	d102      	bne.n	8001380 <cmox_initialize+0x18>
 800137a:	2101      	movs	r1, #1
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <cmox_initialize+0x24>)
 800137e:	7011      	strb	r1, [r2, #0]
 8001380:	6840      	ldr	r0, [r0, #4]
 8001382:	f000 fa29 	bl	80017d8 <cmox_ll_init>
 8001386:	bd02      	pop	{r1, pc}
 8001388:	48370000 	.word	0x48370000
 800138c:	200000dc 	.word	0x200000dc

08001390 <cmox_aesFast_encrypt>:
 8001390:	b4f4      	push	{r2, r4, r5, r6, r7}
 8001392:	b08d      	sub	sp, #52	@ 0x34
 8001394:	0002      	movs	r2, r0
 8001396:	0008      	movs	r0, r1
 8001398:	6851      	ldr	r1, [r2, #4]
 800139a:	08ce      	lsrs	r6, r1, #3
 800139c:	1cf6      	adds	r6, r6, #3
 800139e:	0015      	movs	r5, r2
 80013a0:	350c      	adds	r5, #12
 80013a2:	6802      	ldr	r2, [r0, #0]
 80013a4:	6829      	ldr	r1, [r5, #0]
 80013a6:	4051      	eors	r1, r2
 80013a8:	6843      	ldr	r3, [r0, #4]
 80013aa:	686a      	ldr	r2, [r5, #4]
 80013ac:	405a      	eors	r2, r3
 80013ae:	6884      	ldr	r4, [r0, #8]
 80013b0:	68ab      	ldr	r3, [r5, #8]
 80013b2:	4063      	eors	r3, r4
 80013b4:	68c0      	ldr	r0, [r0, #12]
 80013b6:	68ec      	ldr	r4, [r5, #12]
 80013b8:	4044      	eors	r4, r0
 80013ba:	9601      	str	r6, [sp, #4]
 80013bc:	0028      	movs	r0, r5
 80013be:	e059      	b.n	8001474 <cmox_aesFast_encrypt+0xe4>
 80013c0:	4ca8      	ldr	r4, [pc, #672]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80013c2:	00be      	lsls	r6, r7, #2
 80013c4:	59a6      	ldr	r6, [r4, r6]
 80013c6:	2708      	movs	r7, #8
 80013c8:	41fe      	rors	r6, r7
 80013ca:	2710      	movs	r7, #16
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	58e3      	ldr	r3, [r4, r3]
 80013d0:	41fb      	rors	r3, r7
 80013d2:	2718      	movs	r7, #24
 80013d4:	00ad      	lsls	r5, r5, #2
 80013d6:	5965      	ldr	r5, [r4, r5]
 80013d8:	41fd      	rors	r5, r7
 80013da:	0089      	lsls	r1, r1, #2
 80013dc:	5861      	ldr	r1, [r4, r1]
 80013de:	404e      	eors	r6, r1
 80013e0:	4073      	eors	r3, r6
 80013e2:	405d      	eors	r5, r3
 80013e4:	6801      	ldr	r1, [r0, #0]
 80013e6:	4069      	eors	r1, r5
 80013e8:	2308      	movs	r3, #8
 80013ea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80013ec:	00ad      	lsls	r5, r5, #2
 80013ee:	5965      	ldr	r5, [r4, r5]
 80013f0:	41dd      	rors	r5, r3
 80013f2:	2310      	movs	r3, #16
 80013f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80013f6:	00b6      	lsls	r6, r6, #2
 80013f8:	59a6      	ldr	r6, [r4, r6]
 80013fa:	41de      	rors	r6, r3
 80013fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	58e3      	ldr	r3, [r4, r3]
 8001402:	41fb      	rors	r3, r7
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	58a2      	ldr	r2, [r4, r2]
 8001408:	4055      	eors	r5, r2
 800140a:	406e      	eors	r6, r5
 800140c:	4073      	eors	r3, r6
 800140e:	6842      	ldr	r2, [r0, #4]
 8001410:	405a      	eors	r2, r3
 8001412:	2508      	movs	r5, #8
 8001414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	58e3      	ldr	r3, [r4, r3]
 800141a:	41eb      	rors	r3, r5
 800141c:	2510      	movs	r5, #16
 800141e:	9e08      	ldr	r6, [sp, #32]
 8001420:	00b6      	lsls	r6, r6, #2
 8001422:	59a6      	ldr	r6, [r4, r6]
 8001424:	41ee      	rors	r6, r5
 8001426:	9d07      	ldr	r5, [sp, #28]
 8001428:	00ad      	lsls	r5, r5, #2
 800142a:	5965      	ldr	r5, [r4, r5]
 800142c:	41fd      	rors	r5, r7
 800142e:	9f06      	ldr	r7, [sp, #24]
 8001430:	00bf      	lsls	r7, r7, #2
 8001432:	59e7      	ldr	r7, [r4, r7]
 8001434:	407b      	eors	r3, r7
 8001436:	405e      	eors	r6, r3
 8001438:	4075      	eors	r5, r6
 800143a:	6883      	ldr	r3, [r0, #8]
 800143c:	406b      	eors	r3, r5
 800143e:	2508      	movs	r5, #8
 8001440:	9e05      	ldr	r6, [sp, #20]
 8001442:	00b6      	lsls	r6, r6, #2
 8001444:	59a6      	ldr	r6, [r4, r6]
 8001446:	41ee      	rors	r6, r5
 8001448:	9605      	str	r6, [sp, #20]
 800144a:	2610      	movs	r6, #16
 800144c:	9d04      	ldr	r5, [sp, #16]
 800144e:	00ad      	lsls	r5, r5, #2
 8001450:	5965      	ldr	r5, [r4, r5]
 8001452:	41f5      	rors	r5, r6
 8001454:	2618      	movs	r6, #24
 8001456:	9f03      	ldr	r7, [sp, #12]
 8001458:	00bf      	lsls	r7, r7, #2
 800145a:	59e7      	ldr	r7, [r4, r7]
 800145c:	41f7      	rors	r7, r6
 800145e:	9700      	str	r7, [sp, #0]
 8001460:	9e02      	ldr	r6, [sp, #8]
 8001462:	00b6      	lsls	r6, r6, #2
 8001464:	59a4      	ldr	r4, [r4, r6]
 8001466:	9e05      	ldr	r6, [sp, #20]
 8001468:	4066      	eors	r6, r4
 800146a:	4075      	eors	r5, r6
 800146c:	463e      	mov	r6, r7
 800146e:	406e      	eors	r6, r5
 8001470:	68c4      	ldr	r4, [r0, #12]
 8001472:	4074      	eors	r4, r6
 8001474:	2608      	movs	r6, #8
 8001476:	4d7b      	ldr	r5, [pc, #492]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001478:	0217      	lsls	r7, r2, #8
 800147a:	0e3f      	lsrs	r7, r7, #24
 800147c:	00bf      	lsls	r7, r7, #2
 800147e:	59ed      	ldr	r5, [r5, r7]
 8001480:	41f5      	rors	r5, r6
 8001482:	9502      	str	r5, [sp, #8]
 8001484:	2610      	movs	r6, #16
 8001486:	4d77      	ldr	r5, [pc, #476]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001488:	041f      	lsls	r7, r3, #16
 800148a:	0e3f      	lsrs	r7, r7, #24
 800148c:	00bf      	lsls	r7, r7, #2
 800148e:	59ed      	ldr	r5, [r5, r7]
 8001490:	41f5      	rors	r5, r6
 8001492:	9500      	str	r5, [sp, #0]
 8001494:	2618      	movs	r6, #24
 8001496:	4d73      	ldr	r5, [pc, #460]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001498:	0627      	lsls	r7, r4, #24
 800149a:	0dbf      	lsrs	r7, r7, #22
 800149c:	59ed      	ldr	r5, [r5, r7]
 800149e:	41f5      	rors	r5, r6
 80014a0:	4e70      	ldr	r6, [pc, #448]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014a2:	0e0f      	lsrs	r7, r1, #24
 80014a4:	00bf      	lsls	r7, r7, #2
 80014a6:	59f7      	ldr	r7, [r6, r7]
 80014a8:	9e02      	ldr	r6, [sp, #8]
 80014aa:	407e      	eors	r6, r7
 80014ac:	9f00      	ldr	r7, [sp, #0]
 80014ae:	4077      	eors	r7, r6
 80014b0:	407d      	eors	r5, r7
 80014b2:	6906      	ldr	r6, [r0, #16]
 80014b4:	406e      	eors	r6, r5
 80014b6:	9600      	str	r6, [sp, #0]
 80014b8:	2608      	movs	r6, #8
 80014ba:	4d6a      	ldr	r5, [pc, #424]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014bc:	021f      	lsls	r7, r3, #8
 80014be:	0e3f      	lsrs	r7, r7, #24
 80014c0:	00bf      	lsls	r7, r7, #2
 80014c2:	59ed      	ldr	r5, [r5, r7]
 80014c4:	41f5      	rors	r5, r6
 80014c6:	4f67      	ldr	r7, [pc, #412]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014c8:	0426      	lsls	r6, r4, #16
 80014ca:	0e36      	lsrs	r6, r6, #24
 80014cc:	00b6      	lsls	r6, r6, #2
 80014ce:	59be      	ldr	r6, [r7, r6]
 80014d0:	2710      	movs	r7, #16
 80014d2:	41fe      	rors	r6, r7
 80014d4:	9603      	str	r6, [sp, #12]
 80014d6:	4f63      	ldr	r7, [pc, #396]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014d8:	060e      	lsls	r6, r1, #24
 80014da:	0db6      	lsrs	r6, r6, #22
 80014dc:	59be      	ldr	r6, [r7, r6]
 80014de:	2718      	movs	r7, #24
 80014e0:	41fe      	rors	r6, r7
 80014e2:	9602      	str	r6, [sp, #8]
 80014e4:	4e5f      	ldr	r6, [pc, #380]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014e6:	0e17      	lsrs	r7, r2, #24
 80014e8:	00bf      	lsls	r7, r7, #2
 80014ea:	59f6      	ldr	r6, [r6, r7]
 80014ec:	4075      	eors	r5, r6
 80014ee:	9e03      	ldr	r6, [sp, #12]
 80014f0:	406e      	eors	r6, r5
 80014f2:	9f02      	ldr	r7, [sp, #8]
 80014f4:	4077      	eors	r7, r6
 80014f6:	6945      	ldr	r5, [r0, #20]
 80014f8:	407d      	eors	r5, r7
 80014fa:	4f5a      	ldr	r7, [pc, #360]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 80014fc:	0226      	lsls	r6, r4, #8
 80014fe:	0e36      	lsrs	r6, r6, #24
 8001500:	00b6      	lsls	r6, r6, #2
 8001502:	59be      	ldr	r6, [r7, r6]
 8001504:	2708      	movs	r7, #8
 8001506:	41fe      	rors	r6, r7
 8001508:	9604      	str	r6, [sp, #16]
 800150a:	4f56      	ldr	r7, [pc, #344]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800150c:	040e      	lsls	r6, r1, #16
 800150e:	0e36      	lsrs	r6, r6, #24
 8001510:	00b6      	lsls	r6, r6, #2
 8001512:	59be      	ldr	r6, [r7, r6]
 8001514:	2710      	movs	r7, #16
 8001516:	41fe      	rors	r6, r7
 8001518:	9603      	str	r6, [sp, #12]
 800151a:	4f52      	ldr	r7, [pc, #328]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800151c:	0616      	lsls	r6, r2, #24
 800151e:	0db6      	lsrs	r6, r6, #22
 8001520:	59be      	ldr	r6, [r7, r6]
 8001522:	2718      	movs	r7, #24
 8001524:	41fe      	rors	r6, r7
 8001526:	9602      	str	r6, [sp, #8]
 8001528:	4e4e      	ldr	r6, [pc, #312]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800152a:	0e1f      	lsrs	r7, r3, #24
 800152c:	00bf      	lsls	r7, r7, #2
 800152e:	59f6      	ldr	r6, [r6, r7]
 8001530:	9f04      	ldr	r7, [sp, #16]
 8001532:	4077      	eors	r7, r6
 8001534:	9e03      	ldr	r6, [sp, #12]
 8001536:	407e      	eors	r6, r7
 8001538:	9f02      	ldr	r7, [sp, #8]
 800153a:	4077      	eors	r7, r6
 800153c:	6986      	ldr	r6, [r0, #24]
 800153e:	407e      	eors	r6, r7
 8001540:	4f48      	ldr	r7, [pc, #288]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001542:	0209      	lsls	r1, r1, #8
 8001544:	0e09      	lsrs	r1, r1, #24
 8001546:	0089      	lsls	r1, r1, #2
 8001548:	5879      	ldr	r1, [r7, r1]
 800154a:	2708      	movs	r7, #8
 800154c:	41f9      	rors	r1, r7
 800154e:	4f45      	ldr	r7, [pc, #276]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 8001550:	0412      	lsls	r2, r2, #16
 8001552:	0e12      	lsrs	r2, r2, #24
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	58ba      	ldr	r2, [r7, r2]
 8001558:	2710      	movs	r7, #16
 800155a:	41fa      	rors	r2, r7
 800155c:	4f41      	ldr	r7, [pc, #260]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800155e:	061b      	lsls	r3, r3, #24
 8001560:	0d9b      	lsrs	r3, r3, #22
 8001562:	58fb      	ldr	r3, [r7, r3]
 8001564:	2718      	movs	r7, #24
 8001566:	41fb      	rors	r3, r7
 8001568:	4f3e      	ldr	r7, [pc, #248]	@ (8001664 <cmox_aesFast_encrypt+0x2d4>)
 800156a:	0e24      	lsrs	r4, r4, #24
 800156c:	00a4      	lsls	r4, r4, #2
 800156e:	593c      	ldr	r4, [r7, r4]
 8001570:	4061      	eors	r1, r4
 8001572:	404a      	eors	r2, r1
 8001574:	4053      	eors	r3, r2
 8001576:	69c4      	ldr	r4, [r0, #28]
 8001578:	405c      	eors	r4, r3
 800157a:	3020      	adds	r0, #32
 800157c:	9901      	ldr	r1, [sp, #4]
 800157e:	1e49      	subs	r1, r1, #1
 8001580:	9101      	str	r1, [sp, #4]
 8001582:	0e21      	lsrs	r1, r4, #24
 8001584:	9102      	str	r1, [sp, #8]
 8001586:	0429      	lsls	r1, r5, #16
 8001588:	0e09      	lsrs	r1, r1, #24
 800158a:	9104      	str	r1, [sp, #16]
 800158c:	9900      	ldr	r1, [sp, #0]
 800158e:	0209      	lsls	r1, r1, #8
 8001590:	0e09      	lsrs	r1, r1, #24
 8001592:	9105      	str	r1, [sp, #20]
 8001594:	0e31      	lsrs	r1, r6, #24
 8001596:	9106      	str	r1, [sp, #24]
 8001598:	9900      	ldr	r1, [sp, #0]
 800159a:	0409      	lsls	r1, r1, #16
 800159c:	0e09      	lsrs	r1, r1, #24
 800159e:	9108      	str	r1, [sp, #32]
 80015a0:	0221      	lsls	r1, r4, #8
 80015a2:	0e09      	lsrs	r1, r1, #24
 80015a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80015a6:	0e2a      	lsrs	r2, r5, #24
 80015a8:	0421      	lsls	r1, r4, #16
 80015aa:	0e09      	lsrs	r1, r1, #24
 80015ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80015ae:	0231      	lsls	r1, r6, #8
 80015b0:	0e09      	lsrs	r1, r1, #24
 80015b2:	910c      	str	r1, [sp, #48]	@ 0x30
 80015b4:	9900      	ldr	r1, [sp, #0]
 80015b6:	0e09      	lsrs	r1, r1, #24
 80015b8:	0433      	lsls	r3, r6, #16
 80015ba:	0e1b      	lsrs	r3, r3, #24
 80015bc:	022f      	lsls	r7, r5, #8
 80015be:	0e3f      	lsrs	r7, r7, #24
 80015c0:	b2f6      	uxtb	r6, r6
 80015c2:	9603      	str	r6, [sp, #12]
 80015c4:	b2ed      	uxtb	r5, r5
 80015c6:	9507      	str	r5, [sp, #28]
 80015c8:	9d00      	ldr	r5, [sp, #0]
 80015ca:	b2ed      	uxtb	r5, r5
 80015cc:	950a      	str	r5, [sp, #40]	@ 0x28
 80015ce:	b2e5      	uxtb	r5, r4
 80015d0:	9c01      	ldr	r4, [sp, #4]
 80015d2:	2c00      	cmp	r4, #0
 80015d4:	d000      	beq.n	80015d8 <cmox_aesFast_encrypt+0x248>
 80015d6:	e6f3      	b.n	80013c0 <cmox_aesFast_encrypt+0x30>
 80015d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80015da:	4e23      	ldr	r6, [pc, #140]	@ (8001668 <cmox_aesFast_encrypt+0x2d8>)
 80015dc:	5c71      	ldrb	r1, [r6, r1]
 80015de:	0609      	lsls	r1, r1, #24
 80015e0:	468c      	mov	ip, r1
 80015e2:	5df1      	ldrb	r1, [r6, r7]
 80015e4:	0409      	lsls	r1, r1, #16
 80015e6:	4667      	mov	r7, ip
 80015e8:	4339      	orrs	r1, r7
 80015ea:	5cf3      	ldrb	r3, [r6, r3]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	430b      	orrs	r3, r1
 80015f0:	5d71      	ldrb	r1, [r6, r5]
 80015f2:	4319      	orrs	r1, r3
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	404b      	eors	r3, r1
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	5cb1      	ldrb	r1, [r6, r2]
 80015fc:	0609      	lsls	r1, r1, #24
 80015fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001600:	5cb2      	ldrb	r2, [r6, r2]
 8001602:	0412      	lsls	r2, r2, #16
 8001604:	430a      	orrs	r2, r1
 8001606:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001608:	5c71      	ldrb	r1, [r6, r1]
 800160a:	0209      	lsls	r1, r1, #8
 800160c:	4311      	orrs	r1, r2
 800160e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001610:	5cb2      	ldrb	r2, [r6, r2]
 8001612:	430a      	orrs	r2, r1
 8001614:	6841      	ldr	r1, [r0, #4]
 8001616:	4051      	eors	r1, r2
 8001618:	6061      	str	r1, [r4, #4]
 800161a:	9906      	ldr	r1, [sp, #24]
 800161c:	5c71      	ldrb	r1, [r6, r1]
 800161e:	0609      	lsls	r1, r1, #24
 8001620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001622:	5cb2      	ldrb	r2, [r6, r2]
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	430a      	orrs	r2, r1
 8001628:	9908      	ldr	r1, [sp, #32]
 800162a:	5c71      	ldrb	r1, [r6, r1]
 800162c:	0209      	lsls	r1, r1, #8
 800162e:	4311      	orrs	r1, r2
 8001630:	9a07      	ldr	r2, [sp, #28]
 8001632:	5cb2      	ldrb	r2, [r6, r2]
 8001634:	430a      	orrs	r2, r1
 8001636:	6881      	ldr	r1, [r0, #8]
 8001638:	4051      	eors	r1, r2
 800163a:	60a1      	str	r1, [r4, #8]
 800163c:	9902      	ldr	r1, [sp, #8]
 800163e:	5c71      	ldrb	r1, [r6, r1]
 8001640:	0609      	lsls	r1, r1, #24
 8001642:	9a05      	ldr	r2, [sp, #20]
 8001644:	5cb2      	ldrb	r2, [r6, r2]
 8001646:	0412      	lsls	r2, r2, #16
 8001648:	430a      	orrs	r2, r1
 800164a:	9904      	ldr	r1, [sp, #16]
 800164c:	5c71      	ldrb	r1, [r6, r1]
 800164e:	0209      	lsls	r1, r1, #8
 8001650:	4311      	orrs	r1, r2
 8001652:	9a03      	ldr	r2, [sp, #12]
 8001654:	5cb2      	ldrb	r2, [r6, r2]
 8001656:	430a      	orrs	r2, r1
 8001658:	68c0      	ldr	r0, [r0, #12]
 800165a:	4050      	eors	r0, r2
 800165c:	60e0      	str	r0, [r4, #12]
 800165e:	b00e      	add	sp, #56	@ 0x38
 8001660:	bcf0      	pop	{r4, r5, r6, r7}
 8001662:	4770      	bx	lr
 8001664:	08008bb8 	.word	0x08008bb8
 8001668:	08008fb8 	.word	0x08008fb8

0800166c <cmox_aesSmall_keySchedule>:
 800166c:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 800166e:	0013      	movs	r3, r2
 8001670:	2600      	movs	r6, #0
 8001672:	2200      	movs	r2, #0
 8001674:	089c      	lsrs	r4, r3, #2
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <cmox_aesSmall_keySchedule+0x110>)
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	0005      	movs	r5, r0
 800167c:	350c      	adds	r5, #12
 800167e:	000b      	movs	r3, r1
 8001680:	0020      	movs	r0, r4
 8001682:	0029      	movs	r1, r5
 8001684:	e00e      	b.n	80016a4 <cmox_aesSmall_keySchedule+0x38>
 8001686:	00b4      	lsls	r4, r6, #2
 8001688:	191c      	adds	r4, r3, r4
 800168a:	7825      	ldrb	r5, [r4, #0]
 800168c:	062f      	lsls	r7, r5, #24
 800168e:	7865      	ldrb	r5, [r4, #1]
 8001690:	042d      	lsls	r5, r5, #16
 8001692:	433d      	orrs	r5, r7
 8001694:	78a7      	ldrb	r7, [r4, #2]
 8001696:	023f      	lsls	r7, r7, #8
 8001698:	432f      	orrs	r7, r5
 800169a:	78e4      	ldrb	r4, [r4, #3]
 800169c:	433c      	orrs	r4, r7
 800169e:	00b5      	lsls	r5, r6, #2
 80016a0:	514c      	str	r4, [r1, r5]
 80016a2:	1c76      	adds	r6, r6, #1
 80016a4:	4286      	cmp	r6, r0
 80016a6:	d3ee      	bcc.n	8001686 <cmox_aesSmall_keySchedule+0x1a>
 80016a8:	0083      	lsls	r3, r0, #2
 80016aa:	18cb      	adds	r3, r1, r3
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	1f1b      	subs	r3, r3, #4
 80016b0:	681d      	ldr	r5, [r3, #0]
 80016b2:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <cmox_aesSmall_keySchedule+0x114>)
 80016b4:	680e      	ldr	r6, [r1, #0]
 80016b6:	022c      	lsls	r4, r5, #8
 80016b8:	0e24      	lsrs	r4, r4, #24
 80016ba:	5d1c      	ldrb	r4, [r3, r4]
 80016bc:	0624      	lsls	r4, r4, #24
 80016be:	042f      	lsls	r7, r5, #16
 80016c0:	0e3f      	lsrs	r7, r7, #24
 80016c2:	5ddf      	ldrb	r7, [r3, r7]
 80016c4:	043f      	lsls	r7, r7, #16
 80016c6:	4327      	orrs	r7, r4
 80016c8:	b2ec      	uxtb	r4, r5
 80016ca:	5d1c      	ldrb	r4, [r3, r4]
 80016cc:	0224      	lsls	r4, r4, #8
 80016ce:	433c      	orrs	r4, r7
 80016d0:	0e2d      	lsrs	r5, r5, #24
 80016d2:	5d5d      	ldrb	r5, [r3, r5]
 80016d4:	4325      	orrs	r5, r4
 80016d6:	4075      	eors	r5, r6
 80016d8:	4c2a      	ldr	r4, [pc, #168]	@ (8001784 <cmox_aesSmall_keySchedule+0x118>)
 80016da:	0096      	lsls	r6, r2, #2
 80016dc:	59a4      	ldr	r4, [r4, r6]
 80016de:	406c      	eors	r4, r5
 80016e0:	9d00      	ldr	r5, [sp, #0]
 80016e2:	602c      	str	r4, [r5, #0]
 80016e4:	1c52      	adds	r2, r2, #1
 80016e6:	2401      	movs	r4, #1
 80016e8:	1905      	adds	r5, r0, r4
 80016ea:	00ad      	lsls	r5, r5, #2
 80016ec:	1f0e      	subs	r6, r1, #4
 80016ee:	5976      	ldr	r6, [r6, r5]
 80016f0:	00a7      	lsls	r7, r4, #2
 80016f2:	59cf      	ldr	r7, [r1, r7]
 80016f4:	4077      	eors	r7, r6
 80016f6:	514f      	str	r7, [r1, r5]
 80016f8:	1c64      	adds	r4, r4, #1
 80016fa:	2c04      	cmp	r4, #4
 80016fc:	d3f4      	bcc.n	80016e8 <cmox_aesSmall_keySchedule+0x7c>
 80016fe:	2804      	cmp	r0, #4
 8001700:	d004      	beq.n	800170c <cmox_aesSmall_keySchedule+0xa0>
 8001702:	2806      	cmp	r0, #6
 8001704:	d00c      	beq.n	8001720 <cmox_aesSmall_keySchedule+0xb4>
 8001706:	2808      	cmp	r0, #8
 8001708:	d014      	beq.n	8001734 <cmox_aesSmall_keySchedule+0xc8>
 800170a:	e034      	b.n	8001776 <cmox_aesSmall_keySchedule+0x10a>
 800170c:	2a0a      	cmp	r2, #10
 800170e:	d206      	bcs.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 8001710:	9901      	ldr	r1, [sp, #4]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	4299      	cmp	r1, r3
 8001718:	d001      	beq.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 800171a:	9900      	ldr	r1, [sp, #0]
 800171c:	e7c4      	b.n	80016a8 <cmox_aesSmall_keySchedule+0x3c>
 800171e:	bdf3      	pop	{r0, r1, r4, r5, r6, r7, pc}
 8001720:	2a07      	cmp	r2, #7
 8001722:	d8fc      	bhi.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 8001724:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8001726:	690b      	ldr	r3, [r1, #16]
 8001728:	406b      	eors	r3, r5
 800172a:	628b      	str	r3, [r1, #40]	@ 0x28
 800172c:	694e      	ldr	r6, [r1, #20]
 800172e:	405e      	eors	r6, r3
 8001730:	62ce      	str	r6, [r1, #44]	@ 0x2c
 8001732:	e7ed      	b.n	8001710 <cmox_aesSmall_keySchedule+0xa4>
 8001734:	2a07      	cmp	r2, #7
 8001736:	d2f2      	bcs.n	800171e <cmox_aesSmall_keySchedule+0xb2>
 8001738:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800173a:	690e      	ldr	r6, [r1, #16]
 800173c:	0e2c      	lsrs	r4, r5, #24
 800173e:	5d1c      	ldrb	r4, [r3, r4]
 8001740:	0627      	lsls	r7, r4, #24
 8001742:	022c      	lsls	r4, r5, #8
 8001744:	0e24      	lsrs	r4, r4, #24
 8001746:	5d1c      	ldrb	r4, [r3, r4]
 8001748:	0424      	lsls	r4, r4, #16
 800174a:	433c      	orrs	r4, r7
 800174c:	042f      	lsls	r7, r5, #16
 800174e:	0e3f      	lsrs	r7, r7, #24
 8001750:	5ddf      	ldrb	r7, [r3, r7]
 8001752:	023f      	lsls	r7, r7, #8
 8001754:	4327      	orrs	r7, r4
 8001756:	b2ed      	uxtb	r5, r5
 8001758:	5d5b      	ldrb	r3, [r3, r5]
 800175a:	433b      	orrs	r3, r7
 800175c:	4073      	eors	r3, r6
 800175e:	630b      	str	r3, [r1, #48]	@ 0x30
 8001760:	2305      	movs	r3, #5
 8001762:	009c      	lsls	r4, r3, #2
 8001764:	190c      	adds	r4, r1, r4
 8001766:	69e5      	ldr	r5, [r4, #28]
 8001768:	6826      	ldr	r6, [r4, #0]
 800176a:	406e      	eors	r6, r5
 800176c:	6226      	str	r6, [r4, #32]
 800176e:	1c5b      	adds	r3, r3, #1
 8001770:	2b07      	cmp	r3, #7
 8001772:	d8cd      	bhi.n	8001710 <cmox_aesSmall_keySchedule+0xa4>
 8001774:	e7f5      	b.n	8001762 <cmox_aesSmall_keySchedule+0xf6>
 8001776:	4904      	ldr	r1, [pc, #16]	@ (8001788 <cmox_aesSmall_keySchedule+0x11c>)
 8001778:	9101      	str	r1, [sp, #4]
 800177a:	e7ce      	b.n	800171a <cmox_aesSmall_keySchedule+0xae>
 800177c:	00010004 	.word	0x00010004
 8001780:	08008fb8 	.word	0x08008fb8
 8001784:	0800893c 	.word	0x0800893c
 8001788:	00010001 	.word	0x00010001

0800178c <strcmp>:
 800178c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001794:	2a01      	cmp	r2, #1
 8001796:	bf28      	it	cs
 8001798:	429a      	cmpcs	r2, r3
 800179a:	d0f7      	beq.n	800178c <strcmp>
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	4770      	bx	lr

080017a0 <strlen>:
 80017a0:	4603      	mov	r3, r0
 80017a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d1fb      	bne.n	80017a2 <strlen+0x2>
 80017aa:	1a18      	subs	r0, r3, r0
 80017ac:	3801      	subs	r0, #1
 80017ae:	4770      	bx	lr

080017b0 <__udivsi3>:
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d002      	beq.n	80017ba <__udivsi3+0xa>
 80017b4:	fbb0 f0f1 	udiv	r0, r0, r1
 80017b8:	4770      	bx	lr
 80017ba:	b108      	cbz	r0, 80017c0 <__udivsi3+0x10>
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 b808 	b.w	80017d4 <__aeabi_idiv0>

080017c4 <__aeabi_uidivmod>:
 80017c4:	2900      	cmp	r1, #0
 80017c6:	d0f8      	beq.n	80017ba <__udivsi3+0xa>
 80017c8:	4602      	mov	r2, r0
 80017ca:	fbb0 f0f1 	udiv	r0, r0, r1
 80017ce:	fb00 2111 	mls	r1, r0, r1, r2
 80017d2:	4770      	bx	lr

080017d4 <__aeabi_idiv0>:
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  //__HAL_RCC_CRC_RELEASE_RESET();
  __HAL_RCC_CRC_CLK_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <cmox_ll_init+0x2c>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <cmox_ll_init+0x2c>)
 80017e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ea:	6153      	str	r3, [r2, #20]
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <cmox_ll_init+0x2c>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180e:	f000 fcd5 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001812:	f000 f86f 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001816:	f000 f8d9 	bl	80019cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800181a:	f000 f8ad 	bl	8001978 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t*)"Starttttttttttt", (uint16_t)15, 100);
 800181e:	2364      	movs	r3, #100	@ 0x64
 8001820:	220f      	movs	r2, #15
 8001822:	4923      	ldr	r1, [pc, #140]	@ (80018b0 <main+0xa8>)
 8001824:	4823      	ldr	r0, [pc, #140]	@ (80018b4 <main+0xac>)
 8001826:	f001 ff19 	bl	800365c <HAL_UART_Transmit>

  cmox_init_arg_t init_target = {CMOX_INIT_TARGET_AUTO, NULL};
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]

  /* Initialize cryptographic library */
  if (cmox_initialize(&init_target) != CMOX_INIT_SUCCESS)
 8001832:	463b      	mov	r3, r7
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fd97 	bl	8001368 <cmox_initialize>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <main+0x3c>
  {
    Error_Handler();
 8001840:	f000 fb2e 	bl	8001ea0 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001844:	f002 fdaa 	bl	800439c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of requestSeedBinarySem */
  requestSeedBinarySemHandle = osSemaphoreNew(1, 0, &requestSeedBinarySem_attributes);
 8001848:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <main+0xb0>)
 800184a:	2100      	movs	r1, #0
 800184c:	2001      	movs	r0, #1
 800184e:	f002 fe7f 	bl	8004550 <osSemaphoreNew>
 8001852:	4603      	mov	r3, r0
 8001854:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <main+0xb4>)
 8001856:	6013      	str	r3, [r2, #0]

  /* creation of sendKeyBinarySem */
  sendKeyBinarySemHandle = osSemaphoreNew(1, 0, &sendKeyBinarySem_attributes);
 8001858:	4a19      	ldr	r2, [pc, #100]	@ (80018c0 <main+0xb8>)
 800185a:	2100      	movs	r1, #0
 800185c:	2001      	movs	r0, #1
 800185e:	f002 fe77 	bl	8004550 <osSemaphoreNew>
 8001862:	4603      	mov	r3, r0
 8001864:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <main+0xbc>)
 8001866:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of outputQueue */
  outputQueueHandle = osMessageQueueNew (2, sizeof(MsgQueue_Obj_t), &outputQueue_attributes);
 8001868:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <main+0xc0>)
 800186a:	2122      	movs	r1, #34	@ 0x22
 800186c:	2002      	movs	r0, #2
 800186e:	f002 ff8f 	bl	8004790 <osMessageQueueNew>
 8001872:	4603      	mov	r3, r0
 8001874:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <main+0xc4>)
 8001876:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of serialTask */
  serialTaskHandle = osThreadNew(SerialTask, NULL, &serialTask_attributes);
 8001878:	4a15      	ldr	r2, [pc, #84]	@ (80018d0 <main+0xc8>)
 800187a:	2100      	movs	r1, #0
 800187c:	4815      	ldr	r0, [pc, #84]	@ (80018d4 <main+0xcc>)
 800187e:	f002 fdd5 	bl	800442c <osThreadNew>
 8001882:	4603      	mov	r3, r0
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <main+0xd0>)
 8001886:	6013      	str	r3, [r2, #0]

  /* creation of requestSeedTask */
  requestSeedTaskHandle = osThreadNew(RequestSeedTask, NULL, &requestSeedTask_attributes);
 8001888:	4a14      	ldr	r2, [pc, #80]	@ (80018dc <main+0xd4>)
 800188a:	2100      	movs	r1, #0
 800188c:	4814      	ldr	r0, [pc, #80]	@ (80018e0 <main+0xd8>)
 800188e:	f002 fdcd 	bl	800442c <osThreadNew>
 8001892:	4603      	mov	r3, r0
 8001894:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <main+0xdc>)
 8001896:	6013      	str	r3, [r2, #0]

  /* creation of compareKeyTask */
  compareKeyTaskHandle = osThreadNew(CompareKeyTask, NULL, &compareKeyTask_attributes);
 8001898:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <main+0xe0>)
 800189a:	2100      	movs	r1, #0
 800189c:	4813      	ldr	r0, [pc, #76]	@ (80018ec <main+0xe4>)
 800189e:	f002 fdc5 	bl	800442c <osThreadNew>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <main+0xe8>)
 80018a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018a8:	f002 fd9a 	bl	80043e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <main+0xa4>
 80018b0:	08008684 	.word	0x08008684
 80018b4:	200000e0 	.word	0x200000e0
 80018b8:	080089e8 	.word	0x080089e8
 80018bc:	20000138 	.word	0x20000138
 80018c0:	080089f8 	.word	0x080089f8
 80018c4:	2000013c 	.word	0x2000013c
 80018c8:	080089d0 	.word	0x080089d0
 80018cc:	20000134 	.word	0x20000134
 80018d0:	08008964 	.word	0x08008964
 80018d4:	08001b1d 	.word	0x08001b1d
 80018d8:	20000128 	.word	0x20000128
 80018dc:	08008988 	.word	0x08008988
 80018e0:	08001c4d 	.word	0x08001c4d
 80018e4:	2000012c 	.word	0x2000012c
 80018e8:	080089ac 	.word	0x080089ac
 80018ec:	08001d8d 	.word	0x08001d8d
 80018f0:	20000130 	.word	0x20000130

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b090      	sub	sp, #64	@ 0x40
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	2228      	movs	r2, #40	@ 0x28
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f006 f962 	bl	8007bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191a:	2301      	movs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191e:	2310      	movs	r3, #16
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001922:	2302      	movs	r3, #2
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800192a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4618      	mov	r0, r3
 8001936:	f000 ffc3 	bl	80028c0 <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001940:	f000 faae 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
 8001946:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001948:	2302      	movs	r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2102      	movs	r1, #2
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fa30 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800196a:	f000 fa99 	bl	8001ea0 <Error_Handler>
  }
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	@ 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <MX_USART2_UART_Init+0x50>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_USART2_UART_Init+0x4c>)
 80019b0:	f001 fe04 	bl	80035bc <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ba:	f000 fa71 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200000e0 	.word	0x200000e0
 80019c8:	40004400 	.word	0x40004400

080019cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a26      	ldr	r2, [pc, #152]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 80019fe:	f043 0320 	orr.w	r3, r3, #32
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <MX_GPIO_Init+0xcc>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2120      	movs	r1, #32
 8001a44:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <MX_GPIO_Init+0xd0>)
 8001a46:	f000 ff01 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <MX_GPIO_Init+0xd4>)
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4811      	ldr	r0, [pc, #68]	@ (8001aa4 <MX_GPIO_Init+0xd8>)
 8001a60:	f000 fd70 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a64:	2320      	movs	r3, #32
 8001a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4808      	ldr	r0, [pc, #32]	@ (8001a9c <MX_GPIO_Init+0xd0>)
 8001a7c:	f000 fd62 	bl	8002544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2105      	movs	r1, #5
 8001a84:	2028      	movs	r0, #40	@ 0x28
 8001a86:	f000 fc80 	bl	800238a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a8a:	2028      	movs	r0, #40	@ 0x28
 8001a8c:	f000 fc99 	bl	80023c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	10110000 	.word	0x10110000
 8001aa4:	40011000 	.word	0x40011000

08001aa8 <HandleInputKey>:

/* USER CODE BEGIN 4 */
void HandleInputKey(char* inputKey, uint8_t len) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
	uint8_t convertedValue;
	char hex[3];
	hex[2] = '\0'; // add null character...
 8001ab8:	2300      	movs	r3, #0
 8001aba:	72bb      	strb	r3, [r7, #10]

	memset(InputCiphertext, 0, sizeof(uint8_t)*LENGTH_OF_SEED_KEY);
 8001abc:	2210      	movs	r2, #16
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <HandleInputKey+0x70>)
 8001ac2:	f006 f883 	bl	8007bcc <memset>

	for (i=0; i<len; i+=2) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e01b      	b.n	8001b04 <HandleInputKey+0x5c>
		(void)strncpy(hex, &inputKey[i], 2);
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	18d1      	adds	r1, r2, r3
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f006 f891 	bl	8007c00 <strncpy>
		convertedValue = (uint8_t)strtoul(hex, NULL, 16);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 f834 	bl	8007b54 <strtoul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	73bb      	strb	r3, [r7, #14]
		InputCiphertext[i/2] = convertedValue;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4619      	mov	r1, r3
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HandleInputKey+0x70>)
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	5453      	strb	r3, [r2, r1]
	for (i=0; i<len; i+=2) {
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3302      	adds	r3, #2
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3df      	bcc.n	8001acc <HandleInputKey+0x24>
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <SerialTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SerialTask */
void SerialTask(void *argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	@ 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char c;
	size_t idx = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	memset(inputMsg, 0, sizeof(char)*40); //reset buffer
 8001b28:	2228      	movs	r2, #40	@ 0x28
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	483e      	ldr	r0, [pc, #248]	@ (8001c28 <SerialTask+0x10c>)
 8001b2e:	f006 f84d 	bl	8007bcc <memset>
	MsgQueue_Obj_t msg;

  /* Infinite loop */
  for(;;)
  {
	  if (HAL_UART_Receive(&huart2, (uint8_t*)&c, (uint16_t)1, 10) == HAL_OK) { //handle for input
 8001b32:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8001b36:	230a      	movs	r3, #10
 8001b38:	2201      	movs	r2, #1
 8001b3a:	483c      	ldr	r0, [pc, #240]	@ (8001c2c <SerialTask+0x110>)
 8001b3c:	f001 fe19 	bl	8003772 <HAL_UART_Receive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d14f      	bne.n	8001be6 <SerialTask+0xca>
		  if ((c == '\n') || (c == '\r')) {
 8001b46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d003      	beq.n	8001b56 <SerialTask+0x3a>
 8001b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b52:	2b0d      	cmp	r3, #13
 8001b54:	d140      	bne.n	8001bd8 <SerialTask+0xbc>
			  if (strcmp(inputMsg, requestSeed) == 0) {
 8001b56:	4936      	ldr	r1, [pc, #216]	@ (8001c30 <SerialTask+0x114>)
 8001b58:	4833      	ldr	r0, [pc, #204]	@ (8001c28 <SerialTask+0x10c>)
 8001b5a:	f7ff fe17 	bl	800178c <strcmp>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <SerialTask+0x54>
				  osSemaphoreRelease(requestSeedBinarySemHandle);
 8001b64:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <SerialTask+0x118>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fdcd 	bl	8004708 <osSemaphoreRelease>
 8001b6e:	e02b      	b.n	8001bc8 <SerialTask+0xac>
			  }
			  else if (strncmp(inputMsg, sendKey, 3) == 0) {
 8001b70:	2203      	movs	r2, #3
 8001b72:	4931      	ldr	r1, [pc, #196]	@ (8001c38 <SerialTask+0x11c>)
 8001b74:	482c      	ldr	r0, [pc, #176]	@ (8001c28 <SerialTask+0x10c>)
 8001b76:	f006 f831 	bl	8007bdc <strncmp>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10e      	bne.n	8001b9e <SerialTask+0x82>
				  HandleInputKey(&inputMsg[3], (uint8_t)strlen(&inputMsg[3]));
 8001b80:	482e      	ldr	r0, [pc, #184]	@ (8001c3c <SerialTask+0x120>)
 8001b82:	f7ff fe0d 	bl	80017a0 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	482b      	ldr	r0, [pc, #172]	@ (8001c3c <SerialTask+0x120>)
 8001b8e:	f7ff ff8b 	bl	8001aa8 <HandleInputKey>
				  osSemaphoreRelease(sendKeyBinarySemHandle);
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <SerialTask+0x124>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fdb6 	bl	8004708 <osSemaphoreRelease>
 8001b9c:	e014      	b.n	8001bc8 <SerialTask+0xac>
			  }
			  else {
				  inputMsg[idx++] = '\n';
 8001b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ba4:	4a20      	ldr	r2, [pc, #128]	@ (8001c28 <SerialTask+0x10c>)
 8001ba6:	210a      	movs	r1, #10
 8001ba8:	54d1      	strb	r1, [r2, r3]
				  inputMsg[idx] = '\r';
 8001baa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c28 <SerialTask+0x10c>)
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	4413      	add	r3, r2
 8001bb0:	220d      	movs	r2, #13
 8001bb2:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, (uint8_t*)inputMsg, (uint16_t)strlen(inputMsg), 100);
 8001bb4:	481c      	ldr	r0, [pc, #112]	@ (8001c28 <SerialTask+0x10c>)
 8001bb6:	f7ff fdf3 	bl	80017a0 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	2364      	movs	r3, #100	@ 0x64
 8001bc0:	4919      	ldr	r1, [pc, #100]	@ (8001c28 <SerialTask+0x10c>)
 8001bc2:	481a      	ldr	r0, [pc, #104]	@ (8001c2c <SerialTask+0x110>)
 8001bc4:	f001 fd4a 	bl	800365c <HAL_UART_Transmit>
			  }
			  idx = 0; //reset idx
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  memset(inputMsg, 0, sizeof(char)*40); //reset buffer
 8001bcc:	2228      	movs	r2, #40	@ 0x28
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4815      	ldr	r0, [pc, #84]	@ (8001c28 <SerialTask+0x10c>)
 8001bd2:	f005 fffb 	bl	8007bcc <memset>
 8001bd6:	e006      	b.n	8001be6 <SerialTask+0xca>
		  }
		  else {
			  inputMsg[idx++] = c;
 8001bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bde:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8001be2:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <SerialTask+0x10c>)
 8001be4:	54d1      	strb	r1, [r2, r3]
		  }
	  }
	  //handle for output
	  if (osMessageQueueGet(outputQueueHandle, &msg, 0U, 0U) == osOK) {
 8001be6:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <SerialTask+0x128>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	f107 0108 	add.w	r1, r7, #8
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f002 fea1 	bl	8004938 <osMessageQueueGet>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d19a      	bne.n	8001b32 <SerialTask+0x16>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg.buf, (uint16_t)strlen(msg.buf), 100);
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	3301      	adds	r3, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fdcc 	bl	80017a0 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	1c59      	adds	r1, r3, #1
 8001c12:	2364      	movs	r3, #100	@ 0x64
 8001c14:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <SerialTask+0x110>)
 8001c16:	f001 fd21 	bl	800365c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 100);
 8001c1a:	2364      	movs	r3, #100	@ 0x64
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <SerialTask+0x12c>)
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <SerialTask+0x110>)
 8001c22:	f001 fd1b 	bl	800365c <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart2, (uint8_t*)&c, (uint16_t)1, 10) == HAL_OK) { //handle for input
 8001c26:	e784      	b.n	8001b32 <SerialTask+0x16>
 8001c28:	20000140 	.word	0x20000140
 8001c2c:	200000e0 	.word	0x200000e0
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000138 	.word	0x20000138
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000143 	.word	0x20000143
 8001c40:	2000013c 	.word	0x2000013c
 8001c44:	20000134 	.word	0x20000134
 8001c48:	08008694 	.word	0x08008694

08001c4c <RequestSeedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RequestSeedTask */
void RequestSeedTask(void *argument)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b092      	sub	sp, #72	@ 0x48
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RequestSeedTask */

	cmox_drbg_retval_t retval;
	/* General DRBG context */
	cmox_drbg_handle_t *drgb_ctx;
	size_t i = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	@ 0x34
	MsgQueue_Obj_t msg;
	msg.service = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	723b      	strb	r3, [r7, #8]

	/* Infinite loop */
	for(;;)
	{
		if (osSemaphoreAcquire(requestSeedBinarySemHandle, osWaitForever) == osOK) {
 8001c5c:	4b40      	ldr	r3, [pc, #256]	@ (8001d60 <RequestSeedTask+0x114>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fcfd 	bl	8004664 <osSemaphoreAcquire>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f5      	bne.n	8001c5c <RequestSeedTask+0x10>
		  /* Construct a drbg context that is configured to perform ctrDRBG with AES256 operations */
		  drgb_ctx = cmox_ctr_drbg_construct(&Drbg_Ctx, CMOX_CTR_DRBG_AES256);
 8001c70:	4b3c      	ldr	r3, [pc, #240]	@ (8001d64 <RequestSeedTask+0x118>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	483c      	ldr	r0, [pc, #240]	@ (8001d68 <RequestSeedTask+0x11c>)
 8001c78:	f7ff faee 	bl	8001258 <cmox_ctr_drbg_construct>
 8001c7c:	6338      	str	r0, [r7, #48]	@ 0x30
		  if (drgb_ctx == NULL)
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <RequestSeedTask+0x3c>
		  {
			  Error_Handler();
 8001c84:	f000 f90c 	bl	8001ea0 <Error_Handler>
		  }

		  /* Initialize the DRBG context with entropy, nonce and personalization string parameters */
		  Entropy[0] = (uint8_t)HAL_GetTick();
 8001c88:	f000 fac0 	bl	800220c <HAL_GetTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <RequestSeedTask+0x120>)
 8001c92:	701a      	strb	r2, [r3, #0]
		  retval = cmox_drbg_init(drgb_ctx,                                     /* DRBG context */
 8001c94:	2310      	movs	r3, #16
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	4b35      	ldr	r3, [pc, #212]	@ (8001d70 <RequestSeedTask+0x124>)
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <RequestSeedTask+0x128>)
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	4931      	ldr	r1, [pc, #196]	@ (8001d6c <RequestSeedTask+0x120>)
 8001ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ca8:	f7ff fb0a 	bl	80012c0 <cmox_drbg_init>
 8001cac:	62f8      	str	r0, [r7, #44]	@ 0x2c
								Entropy, sizeof(Entropy),                     /* Entropy data */
								Personalization, sizeof(Personalization),     /* Personalization string */
								Nonce, sizeof(Nonce));                        /* Nonce data */

		  if (retval != CMOX_DRBG_SUCCESS)
 8001cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cb4:	d001      	beq.n	8001cba <RequestSeedTask+0x6e>
		  {
			  Error_Handler();
 8001cb6:	f000 f8f3 	bl	8001ea0 <Error_Handler>
		  }

		  /* Reseed the DRBG with reseed parameters */
		  EntropyInputReseed[0] = (uint8_t)HAL_GetTick();
 8001cba:	f000 faa7 	bl	800220c <HAL_GetTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <RequestSeedTask+0x12c>)
 8001cc4:	701a      	strb	r2, [r3, #0]
		  retval = cmox_drbg_reseed(drgb_ctx,                                           /* DRBG context */
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2220      	movs	r2, #32
 8001cce:	492a      	ldr	r1, [pc, #168]	@ (8001d78 <RequestSeedTask+0x12c>)
 8001cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cd2:	f7ff fb17 	bl	8001304 <cmox_drbg_reseed>
 8001cd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
									EntropyInputReseed, sizeof(EntropyInputReseed),     /* Entropy reseed data */
									NULL, 0);

		  /* Generate 1st random data */
		  memset(ComputedRandom, 0, sizeof(uint8_t)*LENGTH_OF_SEED_KEY);
 8001cd8:	2210      	movs	r2, #16
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <RequestSeedTask+0x130>)
 8001cde:	f005 ff75 	bl	8007bcc <memset>
		  retval = cmox_drbg_generate(drgb_ctx,                             /* DRBG context */
 8001ce2:	230f      	movs	r3, #15
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <RequestSeedTask+0x130>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cee:	f7ff fb21 	bl	8001334 <cmox_drbg_generate>
 8001cf2:	62f8      	str	r0, [r7, #44]	@ 0x2c
									NULL, 0,                                /* No additional data */
									ComputedRandom, LENGTH_OF_SEED_KEY-1);  /* Data buffer to receive generated random */

		  /* Verify API returned value */
		  if (retval != CMOX_DRBG_SUCCESS)
 8001cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cfa:	d001      	beq.n	8001d00 <RequestSeedTask+0xb4>
		  {
			  Error_Handler();
 8001cfc:	f000 f8d0 	bl	8001ea0 <Error_Handler>
		  }

		  /* Cleanup the context */
		  retval = cmox_drbg_cleanup(drgb_ctx);
 8001d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d02:	f7ff facb 	bl	800129c <cmox_drbg_cleanup>
 8001d06:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  if (retval != CMOX_DRBG_SUCCESS)
 8001d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d0e:	d001      	beq.n	8001d14 <RequestSeedTask+0xc8>
		  {
			  Error_Handler();
 8001d10:	f000 f8c6 	bl	8001ea0 <Error_Handler>
		  }

		  for (i=0; i<LENGTH_OF_SEED_KEY-1; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d18:	e010      	b.n	8001d3c <RequestSeedTask+0xf0>
			  (void)sprintf(&(msg.buf[2*i]), "%02X", ComputedRandom[i]);
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	f107 0208 	add.w	r2, r7, #8
 8001d22:	4413      	add	r3, r2
 8001d24:	1c58      	adds	r0, r3, #1
 8001d26:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <RequestSeedTask+0x130>)
 8001d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4913      	ldr	r1, [pc, #76]	@ (8001d80 <RequestSeedTask+0x134>)
 8001d32:	f005 ff19 	bl	8007b68 <siprintf>
		  for (i=0; i<LENGTH_OF_SEED_KEY-1; i++) {
 8001d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d38:	3301      	adds	r3, #1
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3e:	2b0e      	cmp	r3, #14
 8001d40:	d9eb      	bls.n	8001d1a <RequestSeedTask+0xce>
		  }
		  osMessageQueuePut(outputQueueHandle, &msg, 0U, 0U);
 8001d42:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <RequestSeedTask+0x138>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f107 0108 	add.w	r1, r7, #8
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f002 fd93 	bl	8004878 <osMessageQueuePut>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2120      	movs	r1, #32
 8001d56:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <RequestSeedTask+0x13c>)
 8001d58:	f000 fd78 	bl	800284c <HAL_GPIO_WritePin>
		if (osSemaphoreAcquire(requestSeedBinarySemHandle, osWaitForever) == osOK) {
 8001d5c:	e77e      	b.n	8001c5c <RequestSeedTask+0x10>
 8001d5e:	bf00      	nop
 8001d60:	20000138 	.word	0x20000138
 8001d64:	08008744 	.word	0x08008744
 8001d68:	20000178 	.word	0x20000178
 8001d6c:	2000001c 	.word	0x2000001c
 8001d70:	08008a28 	.word	0x08008a28
 8001d74:	08008a38 	.word	0x08008a38
 8001d78:	2000003c 	.word	0x2000003c
 8001d7c:	200003d0 	.word	0x200003d0
 8001d80:	08008698 	.word	0x08008698
 8001d84:	20000134 	.word	0x20000134
 8001d88:	40010800 	.word	0x40010800

08001d8c <CompareKeyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CompareKeyTask */
void CompareKeyTask(void *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b094      	sub	sp, #80	@ 0x50
 8001d90:	af06      	add	r7, sp, #24
 8001d92:	6078      	str	r0, [r7, #4]

  cmox_cipher_retval_t retval;
  size_t computedSize;

  MsgQueue_Obj_t msg;
  msg.service = 2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	733b      	strb	r3, [r7, #12]
	   * selected in cmox_default_config.h. To use a specific implementation, user can
	   * directly choose:
	   * - CMOX_AESFAST_CBC_ENC_ALGO to select the AES fast implementation
	   * - CMOX_AESSMALL_CBC_ENC_ALGO to select the AES small implementation
	   */
	  if (osSemaphoreAcquire(sendKeyBinarySemHandle, osWaitForever) == osOK) {
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <CompareKeyTask+0xc4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fc5f 	bl	8004664 <osSemaphoreAcquire>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f5      	bne.n	8001d98 <CompareKeyTask+0xc>
		  memset(ComputedCiphertext, 0, sizeof(uint8_t)*LENGTH_OF_SEED_KEY);
 8001dac:	2210      	movs	r2, #16
 8001dae:	2100      	movs	r1, #0
 8001db0:	4828      	ldr	r0, [pc, #160]	@ (8001e54 <CompareKeyTask+0xc8>)
 8001db2:	f005 ff0b 	bl	8007bcc <memset>
		  ComputedRandom[15] = 0x01; //perform PKCS7 padding
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <CompareKeyTask+0xcc>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	73da      	strb	r2, [r3, #15]
		  retval = cmox_cipher_encrypt(CMOX_AES_CBC_ENC_ALGO,                  			/* Use AES ECB algorithm */
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <CompareKeyTask+0xd0>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dc4:	9304      	str	r3, [sp, #16]
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <CompareKeyTask+0xc8>)
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	2310      	movs	r3, #16
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <CompareKeyTask+0xd4>)
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <CompareKeyTask+0xd8>)
 8001dd8:	2210      	movs	r2, #16
 8001dda:	491f      	ldr	r1, [pc, #124]	@ (8001e58 <CompareKeyTask+0xcc>)
 8001ddc:	f7fe fb4e 	bl	800047c <cmox_cipher_encrypt>
 8001de0:	6378      	str	r0, [r7, #52]	@ 0x34
									   SecretKey, LENGTH_OF_SEED_KEY,                   /* AES key to use */
									   IV, LENGTH_OF_SEED_KEY,                         	/* Initialization vector */
									   ComputedCiphertext, &computedSize);   			/* Data buffer to receive generated ciphertext */

		  /* Verify API returned value */
		  if (retval != CMOX_CIPHER_SUCCESS)
 8001de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de8:	d001      	beq.n	8001dee <CompareKeyTask+0x62>
		  {
			  Error_Handler();
 8001dea:	f000 f859 	bl	8001ea0 <Error_Handler>
		  }

		  /* Verify generated data size is the expected one */
		  if (computedSize != LENGTH_OF_SEED_KEY)
 8001dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d001      	beq.n	8001df8 <CompareKeyTask+0x6c>
		  {
			  Error_Handler();
 8001df4:	f000 f854 	bl	8001ea0 <Error_Handler>
		  }

		  /* Verify generated data are the expected ones */
		  if (memcmp(InputCiphertext, ComputedCiphertext, computedSize) != 0) {
 8001df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4915      	ldr	r1, [pc, #84]	@ (8001e54 <CompareKeyTask+0xc8>)
 8001dfe:	481a      	ldr	r0, [pc, #104]	@ (8001e68 <CompareKeyTask+0xdc>)
 8001e00:	f005 fed4 	bl	8007bac <memcmp>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00c      	beq.n	8001e24 <CompareKeyTask+0x98>
			  (void)sprintf(msg.buf, "Please don't hack me bro");
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4916      	ldr	r1, [pc, #88]	@ (8001e6c <CompareKeyTask+0xe0>)
 8001e12:	4618      	mov	r0, r3
 8001e14:	f005 fea8 	bl	8007b68 <siprintf>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <CompareKeyTask+0xe4>)
 8001e1e:	f000 fd15 	bl	800284c <HAL_GPIO_WritePin>
 8001e22:	e00b      	b.n	8001e3c <CompareKeyTask+0xb0>
		  }
		  else {
			  (void)sprintf(msg.buf, "We are good to go bro");
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4912      	ldr	r1, [pc, #72]	@ (8001e74 <CompareKeyTask+0xe8>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 fe9b 	bl	8007b68 <siprintf>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2120      	movs	r1, #32
 8001e36:	480e      	ldr	r0, [pc, #56]	@ (8001e70 <CompareKeyTask+0xe4>)
 8001e38:	f000 fd08 	bl	800284c <HAL_GPIO_WritePin>
		  }

		  osMessageQueuePut(outputQueueHandle, &msg, 0U, 0U);
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <CompareKeyTask+0xec>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f107 010c 	add.w	r1, r7, #12
 8001e44:	2300      	movs	r3, #0
 8001e46:	2200      	movs	r2, #0
 8001e48:	f002 fd16 	bl	8004878 <osMessageQueuePut>
	  if (osSemaphoreAcquire(sendKeyBinarySemHandle, osWaitForever) == osOK) {
 8001e4c:	e7a4      	b.n	8001d98 <CompareKeyTask+0xc>
 8001e4e:	bf00      	nop
 8001e50:	2000013c 	.word	0x2000013c
 8001e54:	20000168 	.word	0x20000168
 8001e58:	200003d0 	.word	0x200003d0
 8001e5c:	080086f4 	.word	0x080086f4
 8001e60:	08008a18 	.word	0x08008a18
 8001e64:	08008a08 	.word	0x08008a08
 8001e68:	2000000c 	.word	0x2000000c
 8001e6c:	080086a0 	.word	0x080086a0
 8001e70:	40010800 	.word	0x40010800
 8001e74:	080086bc 	.word	0x080086bc
 8001e78:	20000134 	.word	0x20000134

08001e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001e8e:	f000 f9ab 	bl	80021e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40012c00 	.word	0x40012c00

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <Error_Handler+0x8>

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_MspInit+0x68>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_MspInit+0x68>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a11      	ldr	r2, [pc, #68]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	f06f 0001 	mvn.w	r0, #1
 8001eea:	f000 fa4e 	bl	800238a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_MspInit+0x6c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_MspInit+0x6c>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000

08001f1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_UART_MspInit+0x80>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12b      	bne.n	8001f94 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f46:	61d3      	str	r3, [r2, #28]
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a11      	ldr	r2, [pc, #68]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <HAL_UART_MspInit+0x84>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <HAL_UART_MspInit+0x88>)
 8001f80:	f000 fae0 	bl	8002544 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2105      	movs	r1, #5
 8001f88:	2026      	movs	r0, #38	@ 0x26
 8001f8a:	f000 f9fe 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f8e:	2026      	movs	r0, #38	@ 0x26
 8001f90:	f000 fa17 	bl	80023c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010800 	.word	0x40010800

08001fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	@ 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_InitTick+0xd0>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <HAL_InitTick+0xd0>)
 8001fc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <HAL_InitTick+0xd0>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 f85f 	bl	80030a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fe6:	f001 f849 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8001fea:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	4a23      	ldr	r2, [pc, #140]	@ (800207c <HAL_InitTick+0xd4>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <HAL_InitTick+0xd8>)
 8001ffc:	4a21      	ldr	r2, [pc, #132]	@ (8002084 <HAL_InitTick+0xdc>)
 8001ffe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002000:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <HAL_InitTick+0xd8>)
 8002002:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002006:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <HAL_InitTick+0xd8>)
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_InitTick+0xd8>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <HAL_InitTick+0xd8>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_InitTick+0xd8>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002020:	4817      	ldr	r0, [pc, #92]	@ (8002080 <HAL_InitTick+0xd8>)
 8002022:	f001 f88d 	bl	8003140 <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800202c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002030:	2b00      	cmp	r3, #0
 8002032:	d11b      	bne.n	800206c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002034:	4812      	ldr	r0, [pc, #72]	@ (8002080 <HAL_InitTick+0xd8>)
 8002036:	f001 f8db 	bl	80031f0 <HAL_TIM_Base_Start_IT>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002044:	2b00      	cmp	r3, #0
 8002046:	d111      	bne.n	800206c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002048:	2019      	movs	r0, #25
 800204a:	f000 f9ba 	bl	80023c2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d808      	bhi.n	8002066 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	2019      	movs	r0, #25
 800205a:	f000 f996 	bl	800238a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_InitTick+0xe0>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e002      	b.n	800206c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800206c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002070:	4618      	mov	r0, r3
 8002072:	3730      	adds	r7, #48	@ 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	431bde83 	.word	0x431bde83
 8002080:	200003e0 	.word	0x200003e0
 8002084:	40012c00 	.word	0x40012c00
 8002088:	20000060 	.word	0x20000060

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <NMI_Handler+0x4>

08002094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <TIM1_UP_IRQHandler+0x10>)
 80020c6:	f001 f8e5 	bl	8003294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003e0 	.word	0x200003e0

080020d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <USART2_IRQHandler+0x10>)
 80020da:	f001 fbe1 	bl	80038a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200000e0 	.word	0x200000e0

080020e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020f0:	f000 fbc4 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f005 fddc 	bl	8007ce4 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20005000 	.word	0x20005000
 8002158:	00000400 	.word	0x00000400
 800215c:	20000428 	.word	0x20000428
 8002160:	20003360 	.word	0x20003360

08002164 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002170:	f7ff fff8 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480b      	ldr	r0, [pc, #44]	@ (80021a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002176:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002178:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800218c:	4c09      	ldr	r4, [pc, #36]	@ (80021b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f005 fda9 	bl	8007cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7ff fb33 	bl	8001808 <main>
  bx lr
 80021a2:	4770      	bx	lr
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80021ac:	080090c8 	.word	0x080090c8
  ldr r2, =_sbss
 80021b0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80021b4:	20003360 	.word	0x20003360

080021b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_2_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_Init+0x28>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <HAL_Init+0x28>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 f8d1 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f7ff fee8 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fe68 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_IncTick+0x1c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_IncTick+0x20>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a03      	ldr	r2, [pc, #12]	@ (8002208 <HAL_IncTick+0x20>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000064 	.word	0x20000064
 8002208:	2000042c 	.word	0x2000042c

0800220c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b02      	ldr	r3, [pc, #8]	@ (800221c <HAL_GetTick+0x10>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	2000042c 	.word	0x2000042c

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4906      	ldr	r1, [pc, #24]	@ (80022b8 <__NVIC_EnableIRQ+0x34>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff4f 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff64 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ffb2 	bl	8002310 <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff81 	bl	80022bc <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff57 	bl	8002284 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e020      	b.n	800244a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 020e 	bic.w	r2, r2, #14
 8002416:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f202 	lsl.w	r2, r1, r2
 8002436:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d005      	beq.n	8002478 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2204      	movs	r2, #4
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e051      	b.n	800251c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 020e 	bic.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a22      	ldr	r2, [pc, #136]	@ (8002528 <HAL_DMA_Abort_IT+0xd4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d029      	beq.n	80024f6 <HAL_DMA_Abort_IT+0xa2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <HAL_DMA_Abort_IT+0xd8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x9e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002530 <HAL_DMA_Abort_IT+0xdc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01a      	beq.n	80024ec <HAL_DMA_Abort_IT+0x98>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002534 <HAL_DMA_Abort_IT+0xe0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d012      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x92>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002538 <HAL_DMA_Abort_IT+0xe4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x8c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1b      	ldr	r2, [pc, #108]	@ (800253c <HAL_DMA_Abort_IT+0xe8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_DMA_Abort_IT+0x86>
 80024d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024d8:	e00e      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024de:	e00b      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e4:	e008      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ea:	e005      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024f0:	e002      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024f2:	2310      	movs	r3, #16
 80024f4:	e000      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024f6:	2301      	movs	r3, #1
 80024f8:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_DMA_Abort_IT+0xec>)
 80024fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
    } 
  }
  return status;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020008 	.word	0x40020008
 800252c:	4002001c 	.word	0x4002001c
 8002530:	40020030 	.word	0x40020030
 8002534:	40020044 	.word	0x40020044
 8002538:	40020058 	.word	0x40020058
 800253c:	4002006c 	.word	0x4002006c
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	@ 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e169      	b.n	800282c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002558:	2201      	movs	r2, #1
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8158 	bne.w	8002826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a9a      	ldr	r2, [pc, #616]	@ (80027e4 <HAL_GPIO_Init+0x2a0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d05e      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 8002580:	4a98      	ldr	r2, [pc, #608]	@ (80027e4 <HAL_GPIO_Init+0x2a0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d875      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 8002586:	4a98      	ldr	r2, [pc, #608]	@ (80027e8 <HAL_GPIO_Init+0x2a4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d058      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 800258c:	4a96      	ldr	r2, [pc, #600]	@ (80027e8 <HAL_GPIO_Init+0x2a4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d86f      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 8002592:	4a96      	ldr	r2, [pc, #600]	@ (80027ec <HAL_GPIO_Init+0x2a8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d052      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 8002598:	4a94      	ldr	r2, [pc, #592]	@ (80027ec <HAL_GPIO_Init+0x2a8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d869      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 800259e:	4a94      	ldr	r2, [pc, #592]	@ (80027f0 <HAL_GPIO_Init+0x2ac>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04c      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 80025a4:	4a92      	ldr	r2, [pc, #584]	@ (80027f0 <HAL_GPIO_Init+0x2ac>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d863      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025aa:	4a92      	ldr	r2, [pc, #584]	@ (80027f4 <HAL_GPIO_Init+0x2b0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d046      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 80025b0:	4a90      	ldr	r2, [pc, #576]	@ (80027f4 <HAL_GPIO_Init+0x2b0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d85d      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d82a      	bhi.n	8002610 <HAL_GPIO_Init+0xcc>
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d859      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025be:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <HAL_GPIO_Init+0x80>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	0800263f 	.word	0x0800263f
 80025c8:	08002619 	.word	0x08002619
 80025cc:	0800262b 	.word	0x0800262b
 80025d0:	0800266d 	.word	0x0800266d
 80025d4:	08002673 	.word	0x08002673
 80025d8:	08002673 	.word	0x08002673
 80025dc:	08002673 	.word	0x08002673
 80025e0:	08002673 	.word	0x08002673
 80025e4:	08002673 	.word	0x08002673
 80025e8:	08002673 	.word	0x08002673
 80025ec:	08002673 	.word	0x08002673
 80025f0:	08002673 	.word	0x08002673
 80025f4:	08002673 	.word	0x08002673
 80025f8:	08002673 	.word	0x08002673
 80025fc:	08002673 	.word	0x08002673
 8002600:	08002673 	.word	0x08002673
 8002604:	08002673 	.word	0x08002673
 8002608:	08002621 	.word	0x08002621
 800260c:	08002635 	.word	0x08002635
 8002610:	4a79      	ldr	r2, [pc, #484]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002616:	e02c      	b.n	8002672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	623b      	str	r3, [r7, #32]
          break;
 800261e:	e029      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	e024      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	3308      	adds	r3, #8
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e01f      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	330c      	adds	r3, #12
 800263a:	623b      	str	r3, [r7, #32]
          break;
 800263c:	e01a      	b.n	8002674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002646:	2304      	movs	r3, #4
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e013      	b.n	8002674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002654:	2308      	movs	r3, #8
 8002656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	611a      	str	r2, [r3, #16]
          break;
 800265e:	e009      	b.n	8002674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002660:	2308      	movs	r3, #8
 8002662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	615a      	str	r2, [r3, #20]
          break;
 800266a:	e003      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x130>
          break;
 8002672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2bff      	cmp	r3, #255	@ 0xff
 8002678:	d801      	bhi.n	800267e <HAL_GPIO_Init+0x13a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e001      	b.n	8002682 <HAL_GPIO_Init+0x13e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2bff      	cmp	r3, #255	@ 0xff
 8002688:	d802      	bhi.n	8002690 <HAL_GPIO_Init+0x14c>
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	e002      	b.n	8002696 <HAL_GPIO_Init+0x152>
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	3b08      	subs	r3, #8
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	210f      	movs	r1, #15
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401a      	ands	r2, r3
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80b1 	beq.w	8002826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c4:	4b4d      	ldr	r3, [pc, #308]	@ (80027fc <HAL_GPIO_Init+0x2b8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a4c      	ldr	r2, [pc, #304]	@ (80027fc <HAL_GPIO_Init+0x2b8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <HAL_GPIO_Init+0x2b8>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026dc:	4a48      	ldr	r2, [pc, #288]	@ (8002800 <HAL_GPIO_Init+0x2bc>)
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a40      	ldr	r2, [pc, #256]	@ (8002804 <HAL_GPIO_Init+0x2c0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_GPIO_Init+0x1ec>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3f      	ldr	r2, [pc, #252]	@ (8002808 <HAL_GPIO_Init+0x2c4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00d      	beq.n	800272c <HAL_GPIO_Init+0x1e8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3e      	ldr	r2, [pc, #248]	@ (800280c <HAL_GPIO_Init+0x2c8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x1e4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a3d      	ldr	r2, [pc, #244]	@ (8002810 <HAL_GPIO_Init+0x2cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_GPIO_Init+0x1e0>
 8002720:	2303      	movs	r3, #3
 8002722:	e006      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 8002724:	2304      	movs	r3, #4
 8002726:	e004      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 8002728:	2302      	movs	r3, #2
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 8002730:	2300      	movs	r3, #0
 8002732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4093      	lsls	r3, r2
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002742:	492f      	ldr	r1, [pc, #188]	@ (8002800 <HAL_GPIO_Init+0x2bc>)
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	492c      	ldr	r1, [pc, #176]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	4928      	ldr	r1, [pc, #160]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 8002774:	4013      	ands	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002784:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4922      	ldr	r1, [pc, #136]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002792:	4b20      	ldr	r3, [pc, #128]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	43db      	mvns	r3, r3
 800279a:	491e      	ldr	r1, [pc, #120]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 800279c:	4013      	ands	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027ac:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4918      	ldr	r1, [pc, #96]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ba:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4914      	ldr	r1, [pc, #80]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d021      	beq.n	8002818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	490e      	ldr	r1, [pc, #56]	@ (8002814 <HAL_GPIO_Init+0x2d0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e021      	b.n	8002826 <HAL_GPIO_Init+0x2e2>
 80027e2:	bf00      	nop
 80027e4:	10320000 	.word	0x10320000
 80027e8:	10310000 	.word	0x10310000
 80027ec:	10220000 	.word	0x10220000
 80027f0:	10210000 	.word	0x10210000
 80027f4:	10120000 	.word	0x10120000
 80027f8:	10110000 	.word	0x10110000
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000
 8002804:	40010800 	.word	0x40010800
 8002808:	40010c00 	.word	0x40010c00
 800280c:	40011000 	.word	0x40011000
 8002810:	40011400 	.word	0x40011400
 8002814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_GPIO_Init+0x304>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	43db      	mvns	r3, r3
 8002820:	4909      	ldr	r1, [pc, #36]	@ (8002848 <HAL_GPIO_Init+0x304>)
 8002822:	4013      	ands	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f ae8e 	bne.w	8002558 <HAL_GPIO_Init+0x14>
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	372c      	adds	r7, #44	@ 0x2c
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002892:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f806 	bl	80028ac <HAL_GPIO_EXTI_Callback>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40010400 	.word	0x40010400

080028ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e272      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8087 	beq.w	80029ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e0:	4b92      	ldr	r3, [pc, #584]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d00c      	beq.n	8002906 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ec:	4b8f      	ldr	r3, [pc, #572]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d112      	bne.n	800291e <HAL_RCC_OscConfig+0x5e>
 80028f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002904:	d10b      	bne.n	800291e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002906:	4b89      	ldr	r3, [pc, #548]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d06c      	beq.n	80029ec <HAL_RCC_OscConfig+0x12c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d168      	bne.n	80029ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e24c      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x76>
 8002928:	4b80      	ldr	r3, [pc, #512]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800292e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	e02e      	b.n	8002994 <HAL_RCC_OscConfig+0xd4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x98>
 800293e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7a      	ldr	r2, [pc, #488]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a77      	ldr	r2, [pc, #476]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0xd4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0xbc>
 8002962:	4b72      	ldr	r3, [pc, #456]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a71      	ldr	r2, [pc, #452]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6e      	ldr	r2, [pc, #440]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0xd4>
 800297c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6a      	ldr	r2, [pc, #424]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b68      	ldr	r3, [pc, #416]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a67      	ldr	r2, [pc, #412]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fc36 	bl	800220c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff fc32 	bl	800220c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e200      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0xe4>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7ff fc22 	bl	800220c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7ff fc1e 	bl	800220c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1ec      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x10c>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fa:	4b4c      	ldr	r3, [pc, #304]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a06:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x18c>
 8002a12:	4b46      	ldr	r3, [pc, #280]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e1c0      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b3d      	ldr	r3, [pc, #244]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4939      	ldr	r1, [pc, #228]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e03a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fbd7 	bl	800220c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7ff fbd3 	bl	800220c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1a1      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4927      	ldr	r1, [pc, #156]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fbb6 	bl	800220c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fbb2 	bl	800220c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e180      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d03a      	beq.n	8002b44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d019      	beq.n	8002b0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7ff fb96 	bl	800220c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fb92 	bl	800220c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e160      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f000 fafe 	bl	8003104 <RCC_Delay>
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7ff fb7c 	bl	800220c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b16:	e00f      	b.n	8002b38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b18:	f7ff fb78 	bl	800220c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d908      	bls.n	8002b38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e146      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	42420000 	.word	0x42420000
 8002b34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b38:	4b92      	ldr	r3, [pc, #584]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e9      	bne.n	8002b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a6 	beq.w	8002c9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b56:	4b8b      	ldr	r3, [pc, #556]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4a87      	ldr	r2, [pc, #540]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	61d3      	str	r3, [r2, #28]
 8002b6e:	4b85      	ldr	r3, [pc, #532]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d118      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7ff fb39 	bl	800220c <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7ff fb35 	bl	800220c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	@ 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e103      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b75      	ldr	r3, [pc, #468]	@ (8002d88 <HAL_RCC_OscConfig+0x4c8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x312>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6213      	str	r3, [r2, #32]
 8002bd0:	e02d      	b.n	8002c2e <HAL_RCC_OscConfig+0x36e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x334>
 8002bda:	4b6a      	ldr	r3, [pc, #424]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a69      	ldr	r2, [pc, #420]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b67      	ldr	r3, [pc, #412]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a66      	ldr	r2, [pc, #408]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x36e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x356>
 8002bfc:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4a60      	ldr	r2, [pc, #384]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6213      	str	r3, [r2, #32]
 8002c08:	4b5e      	ldr	r3, [pc, #376]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6213      	str	r3, [r2, #32]
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x36e>
 8002c16:	4b5b      	ldr	r3, [pc, #364]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	4b58      	ldr	r3, [pc, #352]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a57      	ldr	r2, [pc, #348]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff fae9 	bl	800220c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7ff fae5 	bl	800220c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0b1      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCC_OscConfig+0x37e>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7ff fad3 	bl	800220c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7ff facf 	bl	800220c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e09b      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	4b40      	ldr	r3, [pc, #256]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a3b      	ldr	r2, [pc, #236]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8087 	beq.w	8002db6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca8:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d061      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d146      	bne.n	8002d4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b33      	ldr	r3, [pc, #204]	@ (8002d8c <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7ff faa3 	bl	800220c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7ff fa9f 	bl	800220c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e06d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4921      	ldr	r1, [pc, #132]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a19      	ldr	r1, [r3, #32]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	430b      	orrs	r3, r1
 8002d16:	491b      	ldr	r1, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d8c <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7ff fa73 	bl	800220c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7ff fa6f 	bl	800220c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e03d      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x46a>
 8002d48:	e035      	b.n	8002db6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff fa5c 	bl	800220c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7ff fa58 	bl	800220c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e026      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x498>
 8002d76:	e01e      	b.n	8002db6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e019      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_OscConfig+0x500>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d0      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b67      	ldr	r3, [pc, #412]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	4965      	ldr	r1, [pc, #404]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a58      	ldr	r2, [pc, #352]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d040      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e073      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06b      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4936      	ldr	r1, [pc, #216]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7ff f9aa 	bl	800220c <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7ff f9a6 	bl	800220c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e053      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d210      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	4922      	ldr	r1, [pc, #136]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	@ (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <HAL_RCC_ClockConfig+0x1cc>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <HAL_RCC_ClockConfig+0x1d0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f818 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40022000 	.word	0x40022000
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08008a58 	.word	0x08008a58
 8002f90:	2000005c 	.word	0x2000005c
 8002f94:	20000060 	.word	0x20000060

08002f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_GetSysClockFreq+0x36>
 8002fc6:	e027      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fca:	613b      	str	r3, [r7, #16]
      break;
 8002fcc:	e027      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	0c9b      	lsrs	r3, r3, #18
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0c5b      	lsrs	r3, r3, #17
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	4a11      	ldr	r2, [pc, #68]	@ (8003038 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	fb03 f202 	mul.w	r2, r3, r2
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e004      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0c      	ldr	r2, [pc, #48]	@ (800303c <HAL_RCC_GetSysClockFreq+0xa4>)
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	613b      	str	r3, [r7, #16]
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x98>)
 800301a:	613b      	str	r3, [r7, #16]
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	693b      	ldr	r3, [r7, #16]
}
 8003020:	4618      	mov	r0, r3
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	007a1200 	.word	0x007a1200
 8003034:	08008a70 	.word	0x08008a70
 8003038:	08008a80 	.word	0x08008a80
 800303c:	003d0900 	.word	0x003d0900

08003040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003044:	4b02      	ldr	r3, [pc, #8]	@ (8003050 <HAL_RCC_GetHCLKFreq+0x10>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	2000005c 	.word	0x2000005c

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff2 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	08008a68 	.word	0x08008a68

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffde 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0adb      	lsrs	r3, r3, #11
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	@ (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	08008a68 	.word	0x08008a68

080030a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	220f      	movs	r2, #15
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_GetClockConfig+0x58>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_RCC_GetClockConfig+0x58>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_GetClockConfig+0x58>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_RCC_GetClockConfig+0x58>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800310c:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <RCC_Delay+0x34>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <RCC_Delay+0x38>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0a5b      	lsrs	r3, r3, #9
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003120:	bf00      	nop
  }
  while (Delay --);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	60fa      	str	r2, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f9      	bne.n	8003120 <RCC_Delay+0x1c>
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	2000005c 	.word	0x2000005c
 800313c:	10624dd3 	.word	0x10624dd3

08003140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e041      	b.n	80031d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f839 	bl	80031de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 f99c 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d001      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e03a      	b.n	800327e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_TIM_Base_Start_IT+0x98>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x58>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003232:	d009      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x58>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a14      	ldr	r2, [pc, #80]	@ (800328c <HAL_TIM_Base_Start_IT+0x9c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x58>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a13      	ldr	r2, [pc, #76]	@ (8003290 <HAL_TIM_Base_Start_IT+0xa0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d111      	bne.n	800326c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b06      	cmp	r3, #6
 8003258:	d010      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	e007      	b.n	800327c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800

08003294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0202 	mvn.w	r2, #2
 80032c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8d1 	bl	8003486 <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8c4 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8d3 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0204 	mvn.w	r2, #4
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8ab 	bl	8003486 <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f89e 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8ad 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d020      	beq.n	8003390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01b      	beq.n	8003390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0208 	mvn.w	r2, #8
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2204      	movs	r2, #4
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f885 	bl	8003486 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f878 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f887 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d020      	beq.n	80033dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01b      	beq.n	80033dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2208      	movs	r2, #8
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f85f 	bl	8003486 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f852 	bl	8003474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f861 	bl	8003498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0201 	mvn.w	r2, #1
 80033f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fd3e 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8c3 	bl	80035aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f831 	bl	80034aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0220 	mvn.w	r2, #32
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f896 	bl	8003598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	@ (800358c <TIM_Base_SetConfig+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00b      	beq.n	80034ec <TIM_Base_SetConfig+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034da:	d007      	beq.n	80034ec <TIM_Base_SetConfig+0x30>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <TIM_Base_SetConfig+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0x30>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <TIM_Base_SetConfig+0xd8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <TIM_Base_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00b      	beq.n	800351e <TIM_Base_SetConfig+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d007      	beq.n	800351e <TIM_Base_SetConfig+0x62>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1f      	ldr	r2, [pc, #124]	@ (8003590 <TIM_Base_SetConfig+0xd4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_Base_SetConfig+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1e      	ldr	r2, [pc, #120]	@ (8003594 <TIM_Base_SetConfig+0xd8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <TIM_Base_SetConfig+0xd0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	611a      	str	r2, [r3, #16]
  }
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800

08003598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e042      	b.n	8003654 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe fc9a 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	@ 0x24
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fdf9 	bl	80041f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b20      	cmp	r3, #32
 800367a:	d175      	bne.n	8003768 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Transmit+0x2c>
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e06e      	b.n	800376a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2221      	movs	r2, #33	@ 0x21
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369a:	f7fe fdb7 	bl	800220c <HAL_GetTick>
 800369e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b4:	d108      	bne.n	80036c8 <HAL_UART_Transmit+0x6c>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e003      	b.n	80036d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036d0:	e02e      	b.n	8003730 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	@ 0x80
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fb97 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e03a      	b.n	800376a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003708:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3302      	adds	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e007      	b.n	8003722 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3301      	adds	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1cb      	bne.n	80036d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	2140      	movs	r1, #64	@ 0x40
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb63 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e006      	b.n	800376a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b08a      	sub	sp, #40	@ 0x28
 8003776:	af02      	add	r7, sp, #8
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b20      	cmp	r3, #32
 8003790:	f040 8081 	bne.w	8003896 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_UART_Receive+0x2e>
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e079      	b.n	8003898 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2222      	movs	r2, #34	@ 0x22
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b8:	f7fe fd28 	bl	800220c <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d2:	d108      	bne.n	80037e6 <HAL_UART_Receive+0x74>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e003      	b.n	80037ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037ee:	e047      	b.n	8003880 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2120      	movs	r1, #32
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fb08 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e042      	b.n	8003898 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10c      	bne.n	8003832 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b29b      	uxth	r3, r3
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	b29a      	uxth	r2, r3
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3302      	adds	r3, #2
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e01f      	b.n	8003872 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383a:	d007      	beq.n	800384c <HAL_UART_Receive+0xda>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <HAL_UART_Receive+0xe8>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e008      	b.n	800386c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003866:	b2da      	uxtb	r2, r3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3301      	adds	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1b2      	bne.n	80037f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0ba      	sub	sp, #232	@ 0xe8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_UART_IRQHandler+0x66>
 80038f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fbbc 	bl	800407c <UART_Receive_IT>
      return;
 8003904:	e25b      	b.n	8003dbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80de 	beq.w	8003acc <HAL_UART_IRQHandler+0x22c>
 8003910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800391c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003920:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80d1 	beq.w	8003acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_UART_IRQHandler+0xae>
 8003936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_UART_IRQHandler+0xd2>
 800395a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_UART_IRQHandler+0xf6>
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d011      	beq.n	80039c6 <HAL_UART_IRQHandler+0x126>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f043 0208 	orr.w	r2, r3, #8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 81f2 	beq.w	8003db4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_UART_IRQHandler+0x14e>
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb47 	bl	800407c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_UART_IRQHandler+0x17a>
 8003a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04f      	beq.n	8003aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fa51 	bl	8003ec2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d041      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1d9      	bne.n	8003a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	4a7e      	ldr	r2, [pc, #504]	@ (8003c80 <HAL_UART_IRQHandler+0x3e0>)
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fce0 	bl	8002454 <HAL_DMA_Abort_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	e00e      	b.n	8003ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f99c 	bl	8003de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	e00a      	b.n	8003ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f998 	bl	8003de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	e006      	b.n	8003ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f994 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ac6:	e175      	b.n	8003db4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	bf00      	nop
    return;
 8003aca:	e173      	b.n	8003db4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 814f 	bne.w	8003d74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8148 	beq.w	8003d74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8141 	beq.w	8003d74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80b6 	beq.w	8003c84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8145 	beq.w	8003db8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b36:	429a      	cmp	r2, r3
 8003b38:	f080 813e 	bcs.w	8003db8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	f000 8088 	beq.w	8003c60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b7c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1d9      	bne.n	8003b50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bc0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e1      	bne.n	8003b9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bfc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e3      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e3      	bne.n	8003c1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fbbf 	bl	80023de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8bf 	bl	8003dfa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c7c:	e09c      	b.n	8003db8 <HAL_UART_IRQHandler+0x518>
 8003c7e:	bf00      	nop
 8003c80:	08003f87 	.word	0x08003f87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 808e 	beq.w	8003dbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8089 	beq.w	8003dbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cce:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e3      	bne.n	8003caa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3314      	adds	r3, #20
 8003d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e3      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0310 	bic.w	r3, r3, #16
 8003d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d4c:	61fa      	str	r2, [r7, #28]
 8003d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	69b9      	ldr	r1, [r7, #24]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	617b      	str	r3, [r7, #20]
   return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e3      	bne.n	8003d28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f844 	bl	8003dfa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d72:	e023      	b.n	8003dbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_UART_IRQHandler+0x4f4>
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f90e 	bl	8003fae <UART_Transmit_IT>
    return;
 8003d92:	e014      	b.n	8003dbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <HAL_UART_IRQHandler+0x51e>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f94d 	bl	800404c <UART_EndTransmit_IT>
    return;
 8003db2:	e004      	b.n	8003dbe <HAL_UART_IRQHandler+0x51e>
    return;
 8003db4:	bf00      	nop
 8003db6:	e002      	b.n	8003dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8003dbc:	bf00      	nop
  }
}
 8003dbe:	37e8      	adds	r7, #232	@ 0xe8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e20:	e03b      	b.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d037      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe f9ef 	bl	800220c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e03a      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d023      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b80      	cmp	r3, #128	@ 0x80
 8003e56:	d020      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d01d      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d116      	bne.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f81d 	bl	8003ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e00f      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d0b4      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b095      	sub	sp, #84	@ 0x54
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eea:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ef0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d119      	bne.n	8003f6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0310 	bic.w	r3, r3, #16
 8003f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f5a:	61ba      	str	r2, [r7, #24]
 8003f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6979      	ldr	r1, [r7, #20]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	613b      	str	r3, [r7, #16]
   return(result);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e5      	bne.n	8003f3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f7c:	bf00      	nop
 8003f7e:	3754      	adds	r7, #84	@ 0x54
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff ff21 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b21      	cmp	r3, #33	@ 0x21
 8003fc0:	d13e      	bne.n	8004040 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fca:	d114      	bne.n	8003ff6 <UART_Transmit_IT+0x48>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d110      	bne.n	8003ff6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	621a      	str	r2, [r3, #32]
 8003ff4:	e008      	b.n	8004008 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6211      	str	r1, [r2, #32]
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29b      	uxth	r3, r3
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4619      	mov	r1, r3
 8004016:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10f      	bne.n	800403c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800402a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800403a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004062:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fea9 	bl	8003dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	@ 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b22      	cmp	r3, #34	@ 0x22
 800408e:	f040 80ae 	bne.w	80041ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800409a:	d117      	bne.n	80040cc <UART_Receive_IT+0x50>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d113      	bne.n	80040cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ca:	e026      	b.n	800411a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040de:	d007      	beq.n	80040f0 <UART_Receive_IT+0x74>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <UART_Receive_IT+0x82>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e008      	b.n	8004110 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410a:	b2da      	uxtb	r2, r3
 800410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4619      	mov	r1, r3
 8004128:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800412a:	2b00      	cmp	r3, #0
 800412c:	d15d      	bne.n	80041ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0220 	bic.w	r2, r2, #32
 800413c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800414c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	d135      	bne.n	80041e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	613b      	str	r3, [r7, #16]
   return(result);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f023 0310 	bic.w	r3, r3, #16
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419a:	623a      	str	r2, [r7, #32]
 800419c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	69f9      	ldr	r1, [r7, #28]
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e5      	bne.n	800417a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d10a      	bne.n	80041d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fe0e 	bl	8003dfa <HAL_UARTEx_RxEventCallback>
 80041de:	e002      	b.n	80041e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fdf8 	bl	8003dd6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e002      	b.n	80041f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3730      	adds	r7, #48	@ 0x30
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004232:	f023 030c 	bic.w	r3, r3, #12
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	430b      	orrs	r3, r1
 800423e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2c      	ldr	r2, [pc, #176]	@ (800430c <UART_SetConfig+0x114>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fe ff0c 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	e002      	b.n	800426e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7fe fef4 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 800426c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009a      	lsls	r2, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	4a22      	ldr	r2, [pc, #136]	@ (8004310 <UART_SetConfig+0x118>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	0119      	lsls	r1, r3, #4
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009a      	lsls	r2, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004310 <UART_SetConfig+0x118>)
 80042a6:	fba3 0302 	umull	r0, r3, r3, r2
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2064      	movs	r0, #100	@ 0x64
 80042ae:	fb00 f303 	mul.w	r3, r0, r3
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	3332      	adds	r3, #50	@ 0x32
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <UART_SetConfig+0x118>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c4:	4419      	add	r1, r3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <UART_SetConfig+0x118>)
 80042de:	fba3 0302 	umull	r0, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2064      	movs	r0, #100	@ 0x64
 80042e6:	fb00 f303 	mul.w	r3, r0, r3
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	3332      	adds	r3, #50	@ 0x32
 80042f0:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <UART_SetConfig+0x118>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	440a      	add	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40013800 	.word	0x40013800
 8004310:	51eb851f 	.word	0x51eb851f

08004314 <__NVIC_SetPriority>:
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db0a      	blt.n	800433e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	490c      	ldr	r1, [pc, #48]	@ (8004360 <__NVIC_SetPriority+0x4c>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	440b      	add	r3, r1
 8004338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800433c:	e00a      	b.n	8004354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4908      	ldr	r1, [pc, #32]	@ (8004364 <__NVIC_SetPriority+0x50>)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3b04      	subs	r3, #4
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	440b      	add	r3, r1
 8004352:	761a      	strb	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000e100 	.word	0xe000e100
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <SysTick_Handler+0x1c>)
 800436e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004370:	f002 fa6a 	bl	8006848 <xTaskGetSchedulerState>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d001      	beq.n	800437e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800437a:	f003 f90d 	bl	8007598 <xPortSysTickHandler>
  }
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	e000e010 	.word	0xe000e010

08004388 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800438c:	2100      	movs	r1, #0
 800438e:	f06f 0004 	mvn.w	r0, #4
 8004392:	f7ff ffbf 	bl	8004314 <__NVIC_SetPriority>
#endif
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a2:	f3ef 8305 	mrs	r3, IPSR
 80043a6:	603b      	str	r3, [r7, #0]
  return(result);
 80043a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043ae:	f06f 0305 	mvn.w	r3, #5
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e00c      	b.n	80043d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <osKernelInitialize+0x40>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <osKernelInitialize+0x40>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	e002      	b.n	80043d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295
 80043ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043d0:	687b      	ldr	r3, [r7, #4]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	20000430 	.word	0x20000430

080043e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e6:	f3ef 8305 	mrs	r3, IPSR
 80043ea:	603b      	str	r3, [r7, #0]
  return(result);
 80043ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80043f2:	f06f 0305 	mvn.w	r3, #5
 80043f6:	607b      	str	r3, [r7, #4]
 80043f8:	e010      	b.n	800441c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <osKernelStart+0x48>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d109      	bne.n	8004416 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004402:	f7ff ffc1 	bl	8004388 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004406:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <osKernelStart+0x48>)
 8004408:	2202      	movs	r2, #2
 800440a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800440c:	f001 fdbc 	bl	8005f88 <vTaskStartScheduler>
      stat = osOK;
 8004410:	2300      	movs	r3, #0
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	e002      	b.n	800441c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800441c:	687b      	ldr	r3, [r7, #4]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000430 	.word	0x20000430

0800442c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	@ 0x38
 8004430:	af04      	add	r7, sp, #16
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800443c:	f3ef 8305 	mrs	r3, IPSR
 8004440:	617b      	str	r3, [r7, #20]
  return(result);
 8004442:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004444:	2b00      	cmp	r3, #0
 8004446:	d17e      	bne.n	8004546 <osThreadNew+0x11a>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d07b      	beq.n	8004546 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004452:	2318      	movs	r3, #24
 8004454:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d045      	beq.n	80044f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <osThreadNew+0x48>
        name = attr->name;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <osThreadNew+0x6e>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b38      	cmp	r3, #56	@ 0x38
 800448c:	d805      	bhi.n	800449a <osThreadNew+0x6e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <osThreadNew+0x72>
        return (NULL);
 800449a:	2300      	movs	r3, #0
 800449c:	e054      	b.n	8004548 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <osThreadNew+0xa8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2ba7      	cmp	r3, #167	@ 0xa7
 80044bc:	d90a      	bls.n	80044d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d006      	beq.n	80044d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <osThreadNew+0xa8>
        mem = 1;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	e010      	b.n	80044f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10c      	bne.n	80044f6 <osThreadNew+0xca>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <osThreadNew+0xca>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <osThreadNew+0xca>
          mem = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	e001      	b.n	80044f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d110      	bne.n	800451e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004504:	9202      	str	r2, [sp, #8]
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f001 fb7a 	bl	8005c0c <xTaskCreateStatic>
 8004518:	4603      	mov	r3, r0
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	e013      	b.n	8004546 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d110      	bne.n	8004546 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	b29a      	uxth	r2, r3
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f001 fbc8 	bl	8005ccc <xTaskCreate>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d001      	beq.n	8004546 <osThreadNew+0x11a>
            hTask = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004546:	693b      	ldr	r3, [r7, #16]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	@ 0x28
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004560:	f3ef 8305 	mrs	r3, IPSR
 8004564:	613b      	str	r3, [r7, #16]
  return(result);
 8004566:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004568:	2b00      	cmp	r3, #0
 800456a:	d175      	bne.n	8004658 <osSemaphoreNew+0x108>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d072      	beq.n	8004658 <osSemaphoreNew+0x108>
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	429a      	cmp	r2, r3
 8004578:	d86e      	bhi.n	8004658 <osSemaphoreNew+0x108>
    mem = -1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d015      	beq.n	80045b2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <osSemaphoreNew+0x4c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b4f      	cmp	r3, #79	@ 0x4f
 8004594:	d902      	bls.n	800459c <osSemaphoreNew+0x4c>
        mem = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e00c      	b.n	80045b6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <osSemaphoreNew+0x66>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <osSemaphoreNew+0x66>
          mem = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e001      	b.n	80045b6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d04c      	beq.n	8004658 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d128      	bne.n	8004616 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d10a      	bne.n	80045e0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2203      	movs	r2, #3
 80045d0:	9200      	str	r2, [sp, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	2001      	movs	r0, #1
 80045d8:	f000 fb58 	bl	8004c8c <xQueueGenericCreateStatic>
 80045dc:	61f8      	str	r0, [r7, #28]
 80045de:	e005      	b.n	80045ec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80045e0:	2203      	movs	r2, #3
 80045e2:	2100      	movs	r1, #0
 80045e4:	2001      	movs	r0, #1
 80045e6:	f000 fbce 	bl	8004d86 <xQueueGenericCreate>
 80045ea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d022      	beq.n	8004638 <osSemaphoreNew+0xe8>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01f      	beq.n	8004638 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	69f8      	ldr	r0, [r7, #28]
 8004600:	f000 fc8e 	bl	8004f20 <xQueueGenericSend>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d016      	beq.n	8004638 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800460a:	69f8      	ldr	r0, [r7, #28]
 800460c:	f001 f92c 	bl	8005868 <vQueueDelete>
            hSemaphore = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e010      	b.n	8004638 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d108      	bne.n	800462e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	461a      	mov	r2, r3
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fc0c 	bl	8004e42 <xQueueCreateCountingSemaphoreStatic>
 800462a:	61f8      	str	r0, [r7, #28]
 800462c:	e004      	b.n	8004638 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fc3f 	bl	8004eb4 <xQueueCreateCountingSemaphore>
 8004636:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <osSemaphoreNew+0xfc>
          name = attr->name;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e001      	b.n	8004650 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	69f8      	ldr	r0, [r7, #28]
 8004654:	f001 fa54 	bl	8005b00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004658:	69fb      	ldr	r3, [r7, #28]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800467c:	f06f 0303 	mvn.w	r3, #3
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e039      	b.n	80046f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004684:	f3ef 8305 	mrs	r3, IPSR
 8004688:	60fb      	str	r3, [r7, #12]
  return(result);
 800468a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800468c:	2b00      	cmp	r3, #0
 800468e:	d022      	beq.n	80046d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004696:	f06f 0303 	mvn.w	r3, #3
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e02c      	b.n	80046f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	461a      	mov	r2, r3
 80046a8:	2100      	movs	r1, #0
 80046aa:	6938      	ldr	r0, [r7, #16]
 80046ac:	f001 f85a 	bl	8005764 <xQueueReceiveFromISR>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d003      	beq.n	80046be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80046b6:	f06f 0302 	mvn.w	r3, #2
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e01c      	b.n	80046f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d019      	beq.n	80046f8 <osSemaphoreAcquire+0x94>
 80046c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <osSemaphoreAcquire+0xa0>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	e010      	b.n	80046f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6938      	ldr	r0, [r7, #16]
 80046da:	f000 ff33 	bl	8005544 <xQueueSemaphoreTake>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d009      	beq.n	80046f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80046ea:	f06f 0301 	mvn.w	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e002      	b.n	80046f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80046f2:	f06f 0302 	mvn.w	r3, #2
 80046f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80046f8:	697b      	ldr	r3, [r7, #20]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800471e:	f06f 0303 	mvn.w	r3, #3
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e02c      	b.n	8004780 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004726:	f3ef 8305 	mrs	r3, IPSR
 800472a:	60fb      	str	r3, [r7, #12]
  return(result);
 800472c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01a      	beq.n	8004768 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	4619      	mov	r1, r3
 800473c:	6938      	ldr	r0, [r7, #16]
 800473e:	f000 fd8f 	bl	8005260 <xQueueGiveFromISR>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d003      	beq.n	8004750 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004748:	f06f 0302 	mvn.w	r3, #2
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e017      	b.n	8004780 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d014      	beq.n	8004780 <osSemaphoreRelease+0x78>
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <osSemaphoreRelease+0x84>)
 8004758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	e00b      	b.n	8004780 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004768:	2300      	movs	r3, #0
 800476a:	2200      	movs	r2, #0
 800476c:	2100      	movs	r1, #0
 800476e:	6938      	ldr	r0, [r7, #16]
 8004770:	f000 fbd6 	bl	8004f20 <xQueueGenericSend>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d002      	beq.n	8004780 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800477a:	f06f 0302 	mvn.w	r3, #2
 800477e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004780:	697b      	ldr	r3, [r7, #20]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	@ 0x28
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a0:	f3ef 8305 	mrs	r3, IPSR
 80047a4:	613b      	str	r3, [r7, #16]
  return(result);
 80047a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d15f      	bne.n	800486c <osMessageQueueNew+0xdc>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d05c      	beq.n	800486c <osMessageQueueNew+0xdc>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d059      	beq.n	800486c <osMessageQueueNew+0xdc>
    mem = -1;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d029      	beq.n	8004818 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d012      	beq.n	80047f2 <osMessageQueueNew+0x62>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b4f      	cmp	r3, #79	@ 0x4f
 80047d2:	d90e      	bls.n	80047f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <osMessageQueueNew+0x62>
        mem = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	e014      	b.n	800481c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d110      	bne.n	800481c <osMessageQueueNew+0x8c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <osMessageQueueNew+0x8c>
          mem = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e001      	b.n	800481c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10b      	bne.n	800483a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2100      	movs	r1, #0
 800482c:	9100      	str	r1, [sp, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fa2b 	bl	8004c8c <xQueueGenericCreateStatic>
 8004836:	61f8      	str	r0, [r7, #28]
 8004838:	e008      	b.n	800484c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004840:	2200      	movs	r2, #0
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fa9e 	bl	8004d86 <xQueueGenericCreate>
 800484a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e001      	b.n	8004864 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004864:	6979      	ldr	r1, [r7, #20]
 8004866:	69f8      	ldr	r0, [r7, #28]
 8004868:	f001 f94a 	bl	8005b00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800486c:	69fb      	ldr	r3, [r7, #28]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004890:	f3ef 8305 	mrs	r3, IPSR
 8004894:	617b      	str	r3, [r7, #20]
  return(result);
 8004896:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004898:	2b00      	cmp	r3, #0
 800489a:	d028      	beq.n	80048ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <osMessageQueuePut+0x36>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <osMessageQueuePut+0x36>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80048ae:	f06f 0303 	mvn.w	r3, #3
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e038      	b.n	8004928 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80048ba:	f107 0210 	add.w	r2, r7, #16
 80048be:	2300      	movs	r3, #0
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	69b8      	ldr	r0, [r7, #24]
 80048c4:	f000 fc2e 	bl	8005124 <xQueueGenericSendFromISR>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d003      	beq.n	80048d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80048ce:	f06f 0302 	mvn.w	r3, #2
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e028      	b.n	8004928 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d025      	beq.n	8004928 <osMessageQueuePut+0xb0>
 80048dc:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <osMessageQueuePut+0xbc>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	e01c      	b.n	8004928 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <osMessageQueuePut+0x82>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80048fa:	f06f 0303 	mvn.w	r3, #3
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e012      	b.n	8004928 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004902:	2300      	movs	r3, #0
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	69b8      	ldr	r0, [r7, #24]
 800490a:	f000 fb09 	bl	8004f20 <xQueueGenericSend>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d009      	beq.n	8004928 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800491a:	f06f 0301 	mvn.w	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e002      	b.n	8004928 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004922:	f06f 0302 	mvn.w	r3, #2
 8004926:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004928:	69fb      	ldr	r3, [r7, #28]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800494e:	f3ef 8305 	mrs	r3, IPSR
 8004952:	617b      	str	r3, [r7, #20]
  return(result);
 8004954:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004956:	2b00      	cmp	r3, #0
 8004958:	d028      	beq.n	80049ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <osMessageQueueGet+0x34>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <osMessageQueueGet+0x34>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800496c:	f06f 0303 	mvn.w	r3, #3
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	e037      	b.n	80049e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004978:	f107 0310 	add.w	r3, r7, #16
 800497c:	461a      	mov	r2, r3
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	69b8      	ldr	r0, [r7, #24]
 8004982:	f000 feef 	bl	8005764 <xQueueReceiveFromISR>
 8004986:	4603      	mov	r3, r0
 8004988:	2b01      	cmp	r3, #1
 800498a:	d003      	beq.n	8004994 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800498c:	f06f 0302 	mvn.w	r3, #2
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e027      	b.n	80049e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d024      	beq.n	80049e4 <osMessageQueueGet+0xac>
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <osMessageQueueGet+0xb8>)
 800499c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	e01b      	b.n	80049e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <osMessageQueueGet+0x80>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80049b8:	f06f 0303 	mvn.w	r3, #3
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	e011      	b.n	80049e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	69b8      	ldr	r0, [r7, #24]
 80049c6:	f000 fcdb 	bl	8005380 <xQueueReceive>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d009      	beq.n	80049e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80049d6:	f06f 0301 	mvn.w	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e002      	b.n	80049e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80049de:	f06f 0302 	mvn.w	r3, #2
 80049e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049e4:	69fb      	ldr	r3, [r7, #28]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a06      	ldr	r2, [pc, #24]	@ (8004a1c <vApplicationGetIdleTaskMemory+0x28>)
 8004a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a05      	ldr	r2, [pc, #20]	@ (8004a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2280      	movs	r2, #128	@ 0x80
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	20000434 	.word	0x20000434
 8004a20:	200004dc 	.word	0x200004dc

08004a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a07      	ldr	r2, [pc, #28]	@ (8004a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a06      	ldr	r2, [pc, #24]	@ (8004a54 <vApplicationGetTimerTaskMemory+0x30>)
 8004a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	200006dc 	.word	0x200006dc
 8004a54:	20000784 	.word	0x20000784

08004a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f103 0208 	add.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f103 0208 	add.w	r2, r3, #8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f103 0208 	add.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d103      	bne.n	8004b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e00c      	b.n	8004b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3308      	adds	r3, #8
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e002      	b.n	8004b22 <vListInsert+0x2e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d2f6      	bcs.n	8004b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6892      	ldr	r2, [r2, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6852      	ldr	r2, [r2, #4]
 8004b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d103      	bne.n	8004b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1e5a      	subs	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
	...

08004bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004be4:	f002 fc5a 	bl	800749c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	3b01      	subs	r3, #1
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	441a      	add	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	22ff      	movs	r2, #255	@ 0xff
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	22ff      	movs	r2, #255	@ 0xff
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d114      	bne.n	8004c64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01a      	beq.n	8004c78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3310      	adds	r3, #16
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 fc38 	bl	80064bc <xTaskRemoveFromEventList>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d012      	beq.n	8004c78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c52:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <xQueueGenericReset+0xd0>)
 8004c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	e009      	b.n	8004c78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3310      	adds	r3, #16
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fef5 	bl	8004a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3324      	adds	r3, #36	@ 0x24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fef0 	bl	8004a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c78:	f002 fc40 	bl	80074fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c7c:	2301      	movs	r3, #1
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08e      	sub	sp, #56	@ 0x38
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <xQueueGenericCreateStatic+0x56>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <xQueueGenericCreateStatic+0x5a>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <xQueueGenericCreateStatic+0x5c>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	623b      	str	r3, [r7, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <xQueueGenericCreateStatic+0x84>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <xQueueGenericCreateStatic+0x88>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <xQueueGenericCreateStatic+0x8a>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61fb      	str	r3, [r7, #28]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d32:	2350      	movs	r3, #80	@ 0x50
 8004d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b50      	cmp	r3, #80	@ 0x50
 8004d3a:	d00b      	beq.n	8004d54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61bb      	str	r3, [r7, #24]
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f840 	bl	8004dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3730      	adds	r7, #48	@ 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b08a      	sub	sp, #40	@ 0x28
 8004d8a:	af02      	add	r7, sp, #8
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	4613      	mov	r3, r2
 8004d92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	613b      	str	r3, [r7, #16]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3350      	adds	r3, #80	@ 0x50
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f002 fc6d 	bl	80076a0 <pvPortMalloc>
 8004dc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d011      	beq.n	8004df2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	3350      	adds	r3, #80	@ 0x50
 8004dd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004de0:	79fa      	ldrb	r2, [r7, #7]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4613      	mov	r3, r2
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f805 	bl	8004dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004df2:	69bb      	ldr	r3, [r7, #24]
	}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	69b8      	ldr	r0, [r7, #24]
 8004e2e:	f7ff fec3 	bl	8004bb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08a      	sub	sp, #40	@ 0x28
 8004e46:	af02      	add	r7, sp, #8
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61bb      	str	r3, [r7, #24]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d90b      	bls.n	8004e8c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	617b      	str	r3, [r7, #20]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	2100      	movs	r1, #0
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff fef8 	bl	8004c8c <xQueueGenericCreateStatic>
 8004e9c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
	}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	613b      	str	r3, [r7, #16]
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	e7fd      	b.n	8004ed8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d90b      	bls.n	8004efc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004efc:	2202      	movs	r2, #2
 8004efe:	2100      	movs	r1, #0
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff40 	bl	8004d86 <xQueueGenericCreate>
 8004f06:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f14:	697b      	ldr	r3, [r7, #20]
	}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	@ 0x38
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xQueueGenericSend+0x34>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <xQueueGenericSend+0x42>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueGenericSend+0x46>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueGenericSend+0x48>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <xQueueGenericSend+0x64>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d103      	bne.n	8004f92 <xQueueGenericSend+0x72>
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <xQueueGenericSend+0x76>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueGenericSend+0x78>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <xQueueGenericSend+0x94>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	623b      	str	r3, [r7, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb4:	f001 fc48 	bl	8006848 <xTaskGetSchedulerState>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <xQueueGenericSend+0xa4>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <xQueueGenericSend+0xa8>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <xQueueGenericSend+0xaa>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	61fb      	str	r3, [r7, #28]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fe6:	f002 fa59 	bl	800749c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <xQueueGenericSend+0xdc>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d129      	bne.n	8005050 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005002:	f000 fc6c 	bl	80058de <prvCopyDataToQueue>
 8005006:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	d010      	beq.n	8005032 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	3324      	adds	r3, #36	@ 0x24
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fa51 	bl	80064bc <xTaskRemoveFromEventList>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005020:	4b3f      	ldr	r3, [pc, #252]	@ (8005120 <xQueueGenericSend+0x200>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	e00a      	b.n	8005048 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005038:	4b39      	ldr	r3, [pc, #228]	@ (8005120 <xQueueGenericSend+0x200>)
 800503a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005048:	f002 fa58 	bl	80074fc <vPortExitCritical>
				return pdPASS;
 800504c:	2301      	movs	r3, #1
 800504e:	e063      	b.n	8005118 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005056:	f002 fa51 	bl	80074fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800505a:	2300      	movs	r3, #0
 800505c:	e05c      	b.n	8005118 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fa8b 	bl	8006584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800506e:	2301      	movs	r3, #1
 8005070:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005072:	f002 fa43 	bl	80074fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005076:	f000 fff7 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800507a:	f002 fa0f 	bl	800749c <vPortEnterCritical>
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005084:	b25b      	sxtb	r3, r3
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d103      	bne.n	8005094 <xQueueGenericSend+0x174>
 800508c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800509a:	b25b      	sxtb	r3, r3
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d103      	bne.n	80050aa <xQueueGenericSend+0x18a>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050aa:	f002 fa27 	bl	80074fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ae:	1d3a      	adds	r2, r7, #4
 80050b0:	f107 0314 	add.w	r3, r7, #20
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 fa7a 	bl	80065b0 <xTaskCheckForTimeOut>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d124      	bne.n	800510c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050c4:	f000 fd03 	bl	8005ace <prvIsQueueFull>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	3310      	adds	r3, #16
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 f99e 	bl	8006418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050de:	f000 fc8e 	bl	80059fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050e2:	f000 ffcf 	bl	8006084 <xTaskResumeAll>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f47f af7c 	bne.w	8004fe6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80050ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <xQueueGenericSend+0x200>)
 80050f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	e772      	b.n	8004fe6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005100:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005102:	f000 fc7c 	bl	80059fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005106:	f000 ffbd 	bl	8006084 <xTaskResumeAll>
 800510a:	e76c      	b.n	8004fe6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800510c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800510e:	f000 fc76 	bl	80059fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005112:	f000 ffb7 	bl	8006084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005116:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005118:	4618      	mov	r0, r3
 800511a:	3738      	adds	r7, #56	@ 0x38
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b090      	sub	sp, #64	@ 0x40
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	e7fd      	b.n	8005150 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <xQueueGenericSendFromISR+0x3e>
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <xQueueGenericSendFromISR+0x42>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <xQueueGenericSendFromISR+0x44>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d103      	bne.n	8005192 <xQueueGenericSendFromISR+0x6e>
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <xQueueGenericSendFromISR+0x72>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <xQueueGenericSendFromISR+0x74>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	623b      	str	r3, [r7, #32]
}
 80051ae:	bf00      	nop
 80051b0:	bf00      	nop
 80051b2:	e7fd      	b.n	80051b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051b4:	f002 fa34 	bl	8007620 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051b8:	f3ef 8211 	mrs	r2, BASEPRI
 80051bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61fa      	str	r2, [r7, #28]
 80051ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	429a      	cmp	r2, r3
 80051de:	d302      	bcc.n	80051e6 <xQueueGenericSendFromISR+0xc2>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d12f      	bne.n	8005246 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80051fc:	f000 fb6f 	bl	80058de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005200:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d112      	bne.n	8005230 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	3324      	adds	r3, #36	@ 0x24
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f950 	bl	80064bc <xTaskRemoveFromEventList>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e007      	b.n	8005240 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005230:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005234:	3301      	adds	r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	b25a      	sxtb	r2, r3
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005240:	2301      	movs	r3, #1
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005244:	e001      	b.n	800524a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005246:	2300      	movs	r3, #0
 8005248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800524a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005254:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005258:	4618      	mov	r0, r3
 800525a:	3740      	adds	r7, #64	@ 0x40
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08e      	sub	sp, #56	@ 0x38
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	623b      	str	r3, [r7, #32]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61fb      	str	r3, [r7, #28]
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <xQueueGiveFromISR+0x5c>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <xQueueGiveFromISR+0x60>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <xQueueGiveFromISR+0x62>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <xQueueGiveFromISR+0x7e>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	61bb      	str	r3, [r7, #24]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052de:	f002 f99f 	bl	8007620 <vPortValidateInterruptPriority>
	__asm volatile
 80052e2:	f3ef 8211 	mrs	r2, BASEPRI
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	617a      	str	r2, [r7, #20]
 80052f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80052fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800530a:	429a      	cmp	r2, r3
 800530c:	d22b      	bcs.n	8005366 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005320:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d112      	bne.n	8005350 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	3324      	adds	r3, #36	@ 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f8c0 	bl	80064bc <xTaskRemoveFromEventList>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e007      	b.n	8005360 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005354:	3301      	adds	r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	b25a      	sxtb	r2, r3
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005360:	2301      	movs	r3, #1
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
 8005364:	e001      	b.n	800536a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	@ 0x34
 800536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f383 8811 	msr	BASEPRI, r3
}
 8005374:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005378:	4618      	mov	r0, r3
 800537a:	3738      	adds	r7, #56	@ 0x38
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	@ 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <xQueueReceive+0x32>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	623b      	str	r3, [r7, #32]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <xQueueReceive+0x40>
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <xQueueReceive+0x44>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <xQueueReceive+0x46>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <xQueueReceive+0x62>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	61fb      	str	r3, [r7, #28]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e2:	f001 fa31 	bl	8006848 <xTaskGetSchedulerState>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <xQueueReceive+0x72>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <xQueueReceive+0x76>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueReceive+0x78>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xQueueReceive+0x94>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61bb      	str	r3, [r7, #24]
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005414:	f002 f842 	bl	800749c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01f      	beq.n	8005464 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005428:	f000 fac3 	bl	80059b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	1e5a      	subs	r2, r3, #1
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00f      	beq.n	800545c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	3310      	adds	r3, #16
 8005440:	4618      	mov	r0, r3
 8005442:	f001 f83b 	bl	80064bc <xTaskRemoveFromEventList>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800544c:	4b3c      	ldr	r3, [pc, #240]	@ (8005540 <xQueueReceive+0x1c0>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800545c:	f002 f84e 	bl	80074fc <vPortExitCritical>
				return pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	e069      	b.n	8005538 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546a:	f002 f847 	bl	80074fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800546e:	2300      	movs	r3, #0
 8005470:	e062      	b.n	8005538 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005478:	f107 0310 	add.w	r3, r7, #16
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f881 	bl	8006584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005486:	f002 f839 	bl	80074fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548a:	f000 fded 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548e:	f002 f805 	bl	800749c <vPortEnterCritical>
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <xQueueReceive+0x128>
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d103      	bne.n	80054be <xQueueReceive+0x13e>
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054be:	f002 f81d 	bl	80074fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	f107 0310 	add.w	r3, r7, #16
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f870 	bl	80065b0 <xTaskCheckForTimeOut>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d123      	bne.n	800551e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d8:	f000 fae3 	bl	8005aa2 <prvIsQueueEmpty>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d017      	beq.n	8005512 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	3324      	adds	r3, #36	@ 0x24
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 ff94 	bl	8006418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054f2:	f000 fa84 	bl	80059fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054f6:	f000 fdc5 	bl	8006084 <xTaskResumeAll>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d189      	bne.n	8005414 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005500:	4b0f      	ldr	r3, [pc, #60]	@ (8005540 <xQueueReceive+0x1c0>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	e780      	b.n	8005414 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005514:	f000 fa73 	bl	80059fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005518:	f000 fdb4 	bl	8006084 <xTaskResumeAll>
 800551c:	e77a      	b.n	8005414 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800551e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005520:	f000 fa6d 	bl	80059fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005524:	f000 fdae 	bl	8006084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800552a:	f000 faba 	bl	8005aa2 <prvIsQueueEmpty>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f43f af6f 	beq.w	8005414 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005536:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005538:	4618      	mov	r0, r3
 800553a:	3730      	adds	r7, #48	@ 0x30
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	@ 0x38
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	623b      	str	r3, [r7, #32]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	61fb      	str	r3, [r7, #28]
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005598:	f001 f956 	bl	8006848 <xTaskGetSchedulerState>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <xQueueSemaphoreTake+0x64>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <xQueueSemaphoreTake+0x68>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <xQueueSemaphoreTake+0x6a>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	61bb      	str	r3, [r7, #24]
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	e7fd      	b.n	80055c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ca:	f001 ff67 	bl	800749c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d024      	beq.n	8005624 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055ea:	f001 faa7 	bl	8006b3c <pvTaskIncrementMutexHeldCount>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00f      	beq.n	800561c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	3310      	adds	r3, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f000 ff5b 	bl	80064bc <xTaskRemoveFromEventList>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800560c:	4b54      	ldr	r3, [pc, #336]	@ (8005760 <xQueueSemaphoreTake+0x21c>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800561c:	f001 ff6e 	bl	80074fc <vPortExitCritical>
				return pdPASS;
 8005620:	2301      	movs	r3, #1
 8005622:	e098      	b.n	8005756 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d112      	bne.n	8005650 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	617b      	str	r3, [r7, #20]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005648:	f001 ff58 	bl	80074fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800564c:	2300      	movs	r3, #0
 800564e:	e082      	b.n	8005756 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	4618      	mov	r0, r3
 800565c:	f000 ff92 	bl	8006584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005664:	f001 ff4a 	bl	80074fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005668:	f000 fcfe 	bl	8006068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800566c:	f001 ff16 	bl	800749c <vPortEnterCritical>
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d103      	bne.n	8005686 <xQueueSemaphoreTake+0x142>
 800567e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005688:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800568c:	b25b      	sxtb	r3, r3
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d103      	bne.n	800569c <xQueueSemaphoreTake+0x158>
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800569c:	f001 ff2e 	bl	80074fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056a0:	463a      	mov	r2, r7
 80056a2:	f107 030c 	add.w	r3, r7, #12
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 ff81 	bl	80065b0 <xTaskCheckForTimeOut>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d132      	bne.n	800571a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056b6:	f000 f9f4 	bl	8005aa2 <prvIsQueueEmpty>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d026      	beq.n	800570e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80056c8:	f001 fee8 	bl	800749c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f8d7 	bl	8006884 <xTaskPriorityInherit>
 80056d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80056d8:	f001 ff10 	bl	80074fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056de:	3324      	adds	r3, #36	@ 0x24
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fe97 	bl	8006418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056ec:	f000 f987 	bl	80059fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056f0:	f000 fcc8 	bl	8006084 <xTaskResumeAll>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f47f af67 	bne.w	80055ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80056fc:	4b18      	ldr	r3, [pc, #96]	@ (8005760 <xQueueSemaphoreTake+0x21c>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	e75d      	b.n	80055ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800570e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005710:	f000 f975 	bl	80059fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005714:	f000 fcb6 	bl	8006084 <xTaskResumeAll>
 8005718:	e757      	b.n	80055ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800571a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800571c:	f000 f96f 	bl	80059fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005720:	f000 fcb0 	bl	8006084 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005724:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005726:	f000 f9bc 	bl	8005aa2 <prvIsQueueEmpty>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	f43f af4c 	beq.w	80055ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005738:	f001 feb0 	bl	800749c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800573c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800573e:	f000 f8b7 	bl	80058b0 <prvGetDisinheritPriorityAfterTimeout>
 8005742:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f972 	bl	8006a34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005750:	f001 fed4 	bl	80074fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005756:	4618      	mov	r0, r3
 8005758:	3738      	adds	r7, #56	@ 0x38
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08e      	sub	sp, #56	@ 0x38
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	623b      	str	r3, [r7, #32]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <xQueueReceiveFromISR+0x3c>
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <xQueueReceiveFromISR+0x40>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <xQueueReceiveFromISR+0x42>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	61fb      	str	r3, [r7, #28]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057c2:	f001 ff2d 	bl	8007620 <vPortValidateInterruptPriority>
	__asm volatile
 80057c6:	f3ef 8211 	mrs	r2, BASEPRI
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	61ba      	str	r2, [r7, #24]
 80057dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80057de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02f      	beq.n	800584e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057fc:	f000 f8d9 	bl	80059b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	1e5a      	subs	r2, r3, #1
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005808:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d112      	bne.n	8005838 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	3310      	adds	r3, #16
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fe4c 	bl	80064bc <xTaskRemoveFromEventList>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e007      	b.n	8005848 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800583c:	3301      	adds	r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	b25a      	sxtb	r2, r3
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005848:	2301      	movs	r3, #1
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
 800584c:	e001      	b.n	8005852 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800584e:	2300      	movs	r3, #0
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f383 8811 	msr	BASEPRI, r3
}
 800585c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005860:	4618      	mov	r0, r3
 8005862:	3738      	adds	r7, #56	@ 0x38
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <vQueueDelete+0x2a>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	60bb      	str	r3, [r7, #8]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f95c 	bl	8005b50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f001 ffca 	bl	800783c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e001      	b.n	80058d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80058d2:	68fb      	ldr	r3, [r7, #12]
	}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10d      	bne.n	8005918 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d14d      	bne.n	80059a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f001 f823 	bl	8006954 <xTaskPriorityDisinherit>
 800590e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	e043      	b.n	80059a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d119      	bne.n	8005952 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6858      	ldr	r0, [r3, #4]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	461a      	mov	r2, r3
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	f002 fa0c 	bl	8007d46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	441a      	add	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	d32b      	bcc.n	80059a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	e026      	b.n	80059a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68d8      	ldr	r0, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	461a      	mov	r2, r3
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	f002 f9f2 	bl	8007d46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	425b      	negs	r3, r3
 800596c:	441a      	add	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d207      	bcs.n	800598e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005986:	425b      	negs	r3, r3
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d105      	bne.n	80059a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3b01      	subs	r3, #1
 800599e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059a8:	697b      	ldr	r3, [r7, #20]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d018      	beq.n	80059f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d303      	bcc.n	80059e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68d9      	ldr	r1, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	461a      	mov	r2, r3
 80059f0:	6838      	ldr	r0, [r7, #0]
 80059f2:	f002 f9a8 	bl	8007d46 <memcpy>
	}
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a06:	f001 fd49 	bl	800749c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a12:	e011      	b.n	8005a38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d012      	beq.n	8005a42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3324      	adds	r3, #36	@ 0x24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fd4b 	bl	80064bc <xTaskRemoveFromEventList>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a2c:	f000 fe24 	bl	8006678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dce9      	bgt.n	8005a14 <prvUnlockQueue+0x16>
 8005a40:	e000      	b.n	8005a44 <prvUnlockQueue+0x46>
					break;
 8005a42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	22ff      	movs	r2, #255	@ 0xff
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a4c:	f001 fd56 	bl	80074fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a50:	f001 fd24 	bl	800749c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a5c:	e011      	b.n	8005a82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d012      	beq.n	8005a8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3310      	adds	r3, #16
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fd26 	bl	80064bc <xTaskRemoveFromEventList>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a76:	f000 fdff 	bl	8006678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a7a:	7bbb      	ldrb	r3, [r7, #14]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dce9      	bgt.n	8005a5e <prvUnlockQueue+0x60>
 8005a8a:	e000      	b.n	8005a8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	22ff      	movs	r2, #255	@ 0xff
 8005a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005a96:	f001 fd31 	bl	80074fc <vPortExitCritical>
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aaa:	f001 fcf7 	bl	800749c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e001      	b.n	8005ac0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ac0:	f001 fd1c 	bl	80074fc <vPortExitCritical>

	return xReturn;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ad6:	f001 fce1 	bl	800749c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d102      	bne.n	8005aec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e001      	b.n	8005af0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005af0:	f001 fd04 	bl	80074fc <vPortExitCritical>

	return xReturn;
 8005af4:	68fb      	ldr	r3, [r7, #12]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e014      	b.n	8005b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b10:	4a0e      	ldr	r2, [pc, #56]	@ (8005b4c <vQueueAddToRegistry+0x4c>)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b1c:	490b      	ldr	r1, [pc, #44]	@ (8005b4c <vQueueAddToRegistry+0x4c>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b26:	4a09      	ldr	r2, [pc, #36]	@ (8005b4c <vQueueAddToRegistry+0x4c>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b32:	e006      	b.n	8005b42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b07      	cmp	r3, #7
 8005b3e:	d9e7      	bls.n	8005b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	20000b84 	.word	0x20000b84

08005b50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e016      	b.n	8005b8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005b5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ba0 <vQueueUnregisterQueue+0x50>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10b      	bne.n	8005b86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba0 <vQueueUnregisterQueue+0x50>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2100      	movs	r1, #0
 8005b74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005b78:	4a09      	ldr	r2, [pc, #36]	@ (8005ba0 <vQueueUnregisterQueue+0x50>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	2200      	movs	r2, #0
 8005b82:	605a      	str	r2, [r3, #4]
				break;
 8005b84:	e006      	b.n	8005b94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b07      	cmp	r3, #7
 8005b90:	d9e5      	bls.n	8005b5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000b84 	.word	0x20000b84

08005ba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bb4:	f001 fc72 	bl	800749c <vPortEnterCritical>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d103      	bne.n	8005bce <vQueueWaitForMessageRestricted+0x2a>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d103      	bne.n	8005be4 <vQueueWaitForMessageRestricted+0x40>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005be4:	f001 fc8a 	bl	80074fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3324      	adds	r3, #36	@ 0x24
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fc33 	bl	8006464 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bfe:	6978      	ldr	r0, [r7, #20]
 8005c00:	f7ff fefd 	bl	80059fe <prvUnlockQueue>
	}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	@ 0x38
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	61fb      	str	r3, [r7, #28]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c56:	23a8      	movs	r3, #168	@ 0xa8
 8005c58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005c5e:	d00b      	beq.n	8005c78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61bb      	str	r3, [r7, #24]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01e      	beq.n	8005cbe <xTaskCreateStatic+0xb2>
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01b      	beq.n	8005cbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9303      	str	r3, [sp, #12]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f851 	bl	8005d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cb8:	f000 f8f6 	bl	8005ea8 <prvAddNewTaskToReadyList>
 8005cbc:	e001      	b.n	8005cc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cc2:	697b      	ldr	r3, [r7, #20]
	}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3728      	adds	r7, #40	@ 0x28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af04      	add	r7, sp, #16
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fcdd 	bl	80076a0 <pvPortMalloc>
 8005ce6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cee:	20a8      	movs	r0, #168	@ 0xa8
 8005cf0:	f001 fcd6 	bl	80076a0 <pvPortMalloc>
 8005cf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d02:	e005      	b.n	8005d10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d04:	6978      	ldr	r0, [r7, #20]
 8005d06:	f001 fd99 	bl	800783c <vPortFree>
 8005d0a:	e001      	b.n	8005d10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d017      	beq.n	8005d46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	2300      	movs	r3, #0
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f80f 	bl	8005d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d3a:	69f8      	ldr	r0, [r7, #28]
 8005d3c:	f000 f8b4 	bl	8005ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	e002      	b.n	8005d4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	461a      	mov	r2, r3
 8005d70:	21a5      	movs	r1, #165	@ 0xa5
 8005d72:	f001 ff2b 	bl	8007bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d80:	3b01      	subs	r3, #1
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	617b      	str	r3, [r7, #20]
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	e7fd      	b.n	8005dae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01f      	beq.n	8005df8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db8:	2300      	movs	r3, #0
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e012      	b.n	8005de4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	7819      	ldrb	r1, [r3, #0]
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3334      	adds	r3, #52	@ 0x34
 8005dce:	460a      	mov	r2, r1
 8005dd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3301      	adds	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d9e9      	bls.n	8005dbe <prvInitialiseNewTask+0x66>
 8005dea:	e000      	b.n	8005dee <prvInitialiseNewTask+0x96>
			{
				break;
 8005dec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005df6:	e003      	b.n	8005e00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	2b37      	cmp	r3, #55	@ 0x37
 8005e04:	d901      	bls.n	8005e0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e06:	2337      	movs	r3, #55	@ 0x37
 8005e08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe fe38 	bl	8004a96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	3318      	adds	r3, #24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fe33 	bl	8004a96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	3354      	adds	r3, #84	@ 0x54
 8005e5a:	224c      	movs	r2, #76	@ 0x4c
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 feb4 	bl	8007bcc <memset>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	4a0d      	ldr	r2, [pc, #52]	@ (8005e9c <prvInitialiseNewTask+0x144>)
 8005e68:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea0 <prvInitialiseNewTask+0x148>)
 8005e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea4 <prvInitialiseNewTask+0x14c>)
 8005e74:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	68f9      	ldr	r1, [r7, #12]
 8005e7a:	69b8      	ldr	r0, [r7, #24]
 8005e7c:	f001 fa1e 	bl	80072bc <pxPortInitialiseStack>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e92:	bf00      	nop
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20003218 	.word	0x20003218
 8005ea0:	20003280 	.word	0x20003280
 8005ea4:	200032e8 	.word	0x200032e8

08005ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005eb0:	f001 faf4 	bl	800749c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f6c <prvAddNewTaskToReadyList+0xc4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a2c      	ldr	r2, [pc, #176]	@ (8005f6c <prvAddNewTaskToReadyList+0xc4>)
 8005ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ecc:	4b27      	ldr	r3, [pc, #156]	@ (8005f6c <prvAddNewTaskToReadyList+0xc4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d110      	bne.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ed4:	f000 fbf4 	bl	80066c0 <prvInitialiseTaskLists>
 8005ed8:	e00d      	b.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eda:	4b26      	ldr	r3, [pc, #152]	@ (8005f74 <prvAddNewTaskToReadyList+0xcc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ee2:	4b23      	ldr	r3, [pc, #140]	@ (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d802      	bhi.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ef6:	4b20      	ldr	r3, [pc, #128]	@ (8005f78 <prvAddNewTaskToReadyList+0xd0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a1e      	ldr	r2, [pc, #120]	@ (8005f78 <prvAddNewTaskToReadyList+0xd0>)
 8005efe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f00:	4b1d      	ldr	r3, [pc, #116]	@ (8005f78 <prvAddNewTaskToReadyList+0xd0>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <prvAddNewTaskToReadyList+0xd4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <prvAddNewTaskToReadyList+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	4a18      	ldr	r2, [pc, #96]	@ (8005f7c <prvAddNewTaskToReadyList+0xd4>)
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <prvAddNewTaskToReadyList+0xd8>)
 8005f2a:	441a      	add	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7fe fdbb 	bl	8004aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f38:	f001 fae0 	bl	80074fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <prvAddNewTaskToReadyList+0xcc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f44:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d207      	bcs.n	8005f62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f52:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <prvAddNewTaskToReadyList+0xdc>)
 8005f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20001098 	.word	0x20001098
 8005f70:	20000bc4 	.word	0x20000bc4
 8005f74:	200010a4 	.word	0x200010a4
 8005f78:	200010b4 	.word	0x200010b4
 8005f7c:	200010a0 	.word	0x200010a0
 8005f80:	20000bc8 	.word	0x20000bc8
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	@ 0x28
 8005f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f96:	463a      	mov	r2, r7
 8005f98:	1d39      	adds	r1, r7, #4
 8005f9a:	f107 0308 	add.w	r3, r7, #8
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fd28 	bl	80049f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	9202      	str	r2, [sp, #8]
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	4924      	ldr	r1, [pc, #144]	@ (8006048 <vTaskStartScheduler+0xc0>)
 8005fb8:	4824      	ldr	r0, [pc, #144]	@ (800604c <vTaskStartScheduler+0xc4>)
 8005fba:	f7ff fe27 	bl	8005c0c <xTaskCreateStatic>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4a23      	ldr	r2, [pc, #140]	@ (8006050 <vTaskStartScheduler+0xc8>)
 8005fc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fc4:	4b22      	ldr	r3, [pc, #136]	@ (8006050 <vTaskStartScheduler+0xc8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e001      	b.n	8005fd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d102      	bne.n	8005fe2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fdc:	f000 fe16 	bl	8006c0c <xTimerCreateTimerTask>
 8005fe0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d11b      	bne.n	8006020 <vTaskStartScheduler+0x98>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	613b      	str	r3, [r7, #16]
}
 8005ffa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ffc:	4b15      	ldr	r3, [pc, #84]	@ (8006054 <vTaskStartScheduler+0xcc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3354      	adds	r3, #84	@ 0x54
 8006002:	4a15      	ldr	r2, [pc, #84]	@ (8006058 <vTaskStartScheduler+0xd0>)
 8006004:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006006:	4b15      	ldr	r3, [pc, #84]	@ (800605c <vTaskStartScheduler+0xd4>)
 8006008:	f04f 32ff 	mov.w	r2, #4294967295
 800600c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800600e:	4b14      	ldr	r3, [pc, #80]	@ (8006060 <vTaskStartScheduler+0xd8>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006014:	4b13      	ldr	r3, [pc, #76]	@ (8006064 <vTaskStartScheduler+0xdc>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800601a:	f001 f9cd 	bl	80073b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800601e:	e00f      	b.n	8006040 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d10b      	bne.n	8006040 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <vTaskStartScheduler+0xb4>
}
 8006040:	bf00      	nop
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	080086d4 	.word	0x080086d4
 800604c:	08006691 	.word	0x08006691
 8006050:	200010bc 	.word	0x200010bc
 8006054:	20000bc4 	.word	0x20000bc4
 8006058:	2000006c 	.word	0x2000006c
 800605c:	200010b8 	.word	0x200010b8
 8006060:	200010a4 	.word	0x200010a4
 8006064:	2000109c 	.word	0x2000109c

08006068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800606c:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <vTaskSuspendAll+0x18>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	4a03      	ldr	r2, [pc, #12]	@ (8006080 <vTaskSuspendAll+0x18>)
 8006074:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	200010c0 	.word	0x200010c0

08006084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006092:	4b42      	ldr	r3, [pc, #264]	@ (800619c <xTaskResumeAll+0x118>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	603b      	str	r3, [r7, #0]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060b2:	f001 f9f3 	bl	800749c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060b6:	4b39      	ldr	r3, [pc, #228]	@ (800619c <xTaskResumeAll+0x118>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	4a37      	ldr	r2, [pc, #220]	@ (800619c <xTaskResumeAll+0x118>)
 80060be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c0:	4b36      	ldr	r3, [pc, #216]	@ (800619c <xTaskResumeAll+0x118>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d162      	bne.n	800618e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060c8:	4b35      	ldr	r3, [pc, #212]	@ (80061a0 <xTaskResumeAll+0x11c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05e      	beq.n	800618e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060d0:	e02f      	b.n	8006132 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d2:	4b34      	ldr	r3, [pc, #208]	@ (80061a4 <xTaskResumeAll+0x120>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3318      	adds	r3, #24
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fd40 	bl	8004b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fd3b 	bl	8004b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f2:	4b2d      	ldr	r3, [pc, #180]	@ (80061a8 <xTaskResumeAll+0x124>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d903      	bls.n	8006102 <xTaskResumeAll+0x7e>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	4a2a      	ldr	r2, [pc, #168]	@ (80061a8 <xTaskResumeAll+0x124>)
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a27      	ldr	r2, [pc, #156]	@ (80061ac <xTaskResumeAll+0x128>)
 8006110:	441a      	add	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fe fcc8 	bl	8004aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006122:	4b23      	ldr	r3, [pc, #140]	@ (80061b0 <xTaskResumeAll+0x12c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800612c:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <xTaskResumeAll+0x130>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006132:	4b1c      	ldr	r3, [pc, #112]	@ (80061a4 <xTaskResumeAll+0x120>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1cb      	bne.n	80060d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006140:	f000 fb62 	bl	8006808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006144:	4b1c      	ldr	r3, [pc, #112]	@ (80061b8 <xTaskResumeAll+0x134>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006150:	f000 f844 	bl	80061dc <xTaskIncrementTick>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800615a:	4b16      	ldr	r3, [pc, #88]	@ (80061b4 <xTaskResumeAll+0x130>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3b01      	subs	r3, #1
 8006164:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f1      	bne.n	8006150 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800616c:	4b12      	ldr	r3, [pc, #72]	@ (80061b8 <xTaskResumeAll+0x134>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006172:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <xTaskResumeAll+0x130>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800617e:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <xTaskResumeAll+0x138>)
 8006180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f001 f9b5 	bl	80074fc <vPortExitCritical>

	return xAlreadyYielded;
 8006192:	68bb      	ldr	r3, [r7, #8]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200010c0 	.word	0x200010c0
 80061a0:	20001098 	.word	0x20001098
 80061a4:	20001058 	.word	0x20001058
 80061a8:	200010a0 	.word	0x200010a0
 80061ac:	20000bc8 	.word	0x20000bc8
 80061b0:	20000bc4 	.word	0x20000bc4
 80061b4:	200010ac 	.word	0x200010ac
 80061b8:	200010a8 	.word	0x200010a8
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061c6:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <xTaskGetTickCount+0x18>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061cc:	687b      	ldr	r3, [r7, #4]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	2000109c 	.word	0x2000109c

080061dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e6:	4b4f      	ldr	r3, [pc, #316]	@ (8006324 <xTaskIncrementTick+0x148>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 8090 	bne.w	8006310 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006328 <xTaskIncrementTick+0x14c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006328 <xTaskIncrementTick+0x14c>)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d121      	bne.n	8006248 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006204:	4b49      	ldr	r3, [pc, #292]	@ (800632c <xTaskIncrementTick+0x150>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <xTaskIncrementTick+0x4a>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	603b      	str	r3, [r7, #0]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <xTaskIncrementTick+0x46>
 8006226:	4b41      	ldr	r3, [pc, #260]	@ (800632c <xTaskIncrementTick+0x150>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	4b40      	ldr	r3, [pc, #256]	@ (8006330 <xTaskIncrementTick+0x154>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a3e      	ldr	r2, [pc, #248]	@ (800632c <xTaskIncrementTick+0x150>)
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4a3e      	ldr	r2, [pc, #248]	@ (8006330 <xTaskIncrementTick+0x154>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b3e      	ldr	r3, [pc, #248]	@ (8006334 <xTaskIncrementTick+0x158>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3301      	adds	r3, #1
 8006240:	4a3c      	ldr	r2, [pc, #240]	@ (8006334 <xTaskIncrementTick+0x158>)
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	f000 fae0 	bl	8006808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006248:	4b3b      	ldr	r3, [pc, #236]	@ (8006338 <xTaskIncrementTick+0x15c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	d349      	bcc.n	80062e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006252:	4b36      	ldr	r3, [pc, #216]	@ (800632c <xTaskIncrementTick+0x150>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625c:	4b36      	ldr	r3, [pc, #216]	@ (8006338 <xTaskIncrementTick+0x15c>)
 800625e:	f04f 32ff 	mov.w	r2, #4294967295
 8006262:	601a      	str	r2, [r3, #0]
					break;
 8006264:	e03f      	b.n	80062e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006266:	4b31      	ldr	r3, [pc, #196]	@ (800632c <xTaskIncrementTick+0x150>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	d203      	bcs.n	8006286 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800627e:	4a2e      	ldr	r2, [pc, #184]	@ (8006338 <xTaskIncrementTick+0x15c>)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006284:	e02f      	b.n	80062e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	3304      	adds	r3, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fc6a 	bl	8004b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3318      	adds	r3, #24
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fc61 	bl	8004b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a6:	4b25      	ldr	r3, [pc, #148]	@ (800633c <xTaskIncrementTick+0x160>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d903      	bls.n	80062b6 <xTaskIncrementTick+0xda>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	4a22      	ldr	r2, [pc, #136]	@ (800633c <xTaskIncrementTick+0x160>)
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006340 <xTaskIncrementTick+0x164>)
 80062c4:	441a      	add	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f7fe fbee 	bl	8004aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <xTaskIncrementTick+0x168>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	429a      	cmp	r2, r3
 80062de:	d3b8      	bcc.n	8006252 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e4:	e7b5      	b.n	8006252 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062e6:	4b17      	ldr	r3, [pc, #92]	@ (8006344 <xTaskIncrementTick+0x168>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ec:	4914      	ldr	r1, [pc, #80]	@ (8006340 <xTaskIncrementTick+0x164>)
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d901      	bls.n	8006302 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006302:	4b11      	ldr	r3, [pc, #68]	@ (8006348 <xTaskIncrementTick+0x16c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800630a:	2301      	movs	r3, #1
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e004      	b.n	800631a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006310:	4b0e      	ldr	r3, [pc, #56]	@ (800634c <xTaskIncrementTick+0x170>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	4a0d      	ldr	r2, [pc, #52]	@ (800634c <xTaskIncrementTick+0x170>)
 8006318:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800631a:	697b      	ldr	r3, [r7, #20]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	200010c0 	.word	0x200010c0
 8006328:	2000109c 	.word	0x2000109c
 800632c:	20001050 	.word	0x20001050
 8006330:	20001054 	.word	0x20001054
 8006334:	200010b0 	.word	0x200010b0
 8006338:	200010b8 	.word	0x200010b8
 800633c:	200010a0 	.word	0x200010a0
 8006340:	20000bc8 	.word	0x20000bc8
 8006344:	20000bc4 	.word	0x20000bc4
 8006348:	200010ac 	.word	0x200010ac
 800634c:	200010a8 	.word	0x200010a8

08006350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006356:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <vTaskSwitchContext+0xb0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800635e:	4b29      	ldr	r3, [pc, #164]	@ (8006404 <vTaskSwitchContext+0xb4>)
 8006360:	2201      	movs	r2, #1
 8006362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006364:	e047      	b.n	80063f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006366:	4b27      	ldr	r3, [pc, #156]	@ (8006404 <vTaskSwitchContext+0xb4>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636c:	4b26      	ldr	r3, [pc, #152]	@ (8006408 <vTaskSwitchContext+0xb8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e011      	b.n	8006398 <vTaskSwitchContext+0x48>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <vTaskSwitchContext+0x42>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vTaskSwitchContext+0x3e>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b01      	subs	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	491c      	ldr	r1, [pc, #112]	@ (800640c <vTaskSwitchContext+0xbc>)
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0e3      	beq.n	8006374 <vTaskSwitchContext+0x24>
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a15      	ldr	r2, [pc, #84]	@ (800640c <vTaskSwitchContext+0xbc>)
 80063b8:	4413      	add	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	3308      	adds	r3, #8
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d104      	bne.n	80063dc <vTaskSwitchContext+0x8c>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006410 <vTaskSwitchContext+0xc0>)
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <vTaskSwitchContext+0xb8>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063ec:	4b08      	ldr	r3, [pc, #32]	@ (8006410 <vTaskSwitchContext+0xc0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3354      	adds	r3, #84	@ 0x54
 80063f2:	4a08      	ldr	r2, [pc, #32]	@ (8006414 <vTaskSwitchContext+0xc4>)
 80063f4:	6013      	str	r3, [r2, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr
 8006400:	200010c0 	.word	0x200010c0
 8006404:	200010ac 	.word	0x200010ac
 8006408:	200010a0 	.word	0x200010a0
 800640c:	20000bc8 	.word	0x20000bc8
 8006410:	20000bc4 	.word	0x20000bc4
 8006414:	2000006c 	.word	0x2000006c

08006418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60fb      	str	r3, [r7, #12]
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006440:	4b07      	ldr	r3, [pc, #28]	@ (8006460 <vTaskPlaceOnEventList+0x48>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3318      	adds	r3, #24
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fe fb53 	bl	8004af4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800644e:	2101      	movs	r1, #1
 8006450:	6838      	ldr	r0, [r7, #0]
 8006452:	f000 fb87 	bl	8006b64 <prvAddCurrentTaskToDelayedList>
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000bc4 	.word	0x20000bc4

08006464 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	617b      	str	r3, [r7, #20]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800648e:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3318      	adds	r3, #24
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7fe fb09 	bl	8004aae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
 80064a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	68b8      	ldr	r0, [r7, #8]
 80064ac:	f000 fb5a 	bl	8006b64 <prvAddCurrentTaskToDelayedList>
	}
 80064b0:	bf00      	nop
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000bc4 	.word	0x20000bc4

080064bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60fb      	str	r3, [r7, #12]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	3318      	adds	r3, #24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fb38 	bl	8004b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <xTaskRemoveFromEventList+0xb0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11d      	bne.n	8006538 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3304      	adds	r3, #4
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fb2f 	bl	8004b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650a:	4b19      	ldr	r3, [pc, #100]	@ (8006570 <xTaskRemoveFromEventList+0xb4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d903      	bls.n	800651a <xTaskRemoveFromEventList+0x5e>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006516:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <xTaskRemoveFromEventList+0xb4>)
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4a13      	ldr	r2, [pc, #76]	@ (8006574 <xTaskRemoveFromEventList+0xb8>)
 8006528:	441a      	add	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f7fe fabc 	bl	8004aae <vListInsertEnd>
 8006536:	e005      	b.n	8006544 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3318      	adds	r3, #24
 800653c:	4619      	mov	r1, r3
 800653e:	480e      	ldr	r0, [pc, #56]	@ (8006578 <xTaskRemoveFromEventList+0xbc>)
 8006540:	f7fe fab5 	bl	8004aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006548:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <xTaskRemoveFromEventList+0xc0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	429a      	cmp	r2, r3
 8006550:	d905      	bls.n	800655e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006556:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <xTaskRemoveFromEventList+0xc4>)
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e001      	b.n	8006562 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006562:	697b      	ldr	r3, [r7, #20]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	200010c0 	.word	0x200010c0
 8006570:	200010a0 	.word	0x200010a0
 8006574:	20000bc8 	.word	0x20000bc8
 8006578:	20001058 	.word	0x20001058
 800657c:	20000bc4 	.word	0x20000bc4
 8006580:	200010ac 	.word	0x200010ac

08006584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <vTaskInternalSetTimeOutState+0x24>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <vTaskInternalSetTimeOutState+0x28>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	605a      	str	r2, [r3, #4]
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	200010b0 	.word	0x200010b0
 80065ac:	2000109c 	.word	0x2000109c

080065b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60fb      	str	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80065f6:	f000 ff51 	bl	800749c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <xTaskCheckForTimeOut+0xc0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d102      	bne.n	800661a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	e023      	b.n	8006662 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <xTaskCheckForTimeOut+0xc4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d007      	beq.n	8006636 <xTaskCheckForTimeOut+0x86>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e015      	b.n	8006662 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	429a      	cmp	r2, r3
 800663e:	d20b      	bcs.n	8006658 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad2      	subs	r2, r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff99 	bl	8006584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	e004      	b.n	8006662 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006662:	f000 ff4b 	bl	80074fc <vPortExitCritical>

	return xReturn;
 8006666:	69fb      	ldr	r3, [r7, #28]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2000109c 	.word	0x2000109c
 8006674:	200010b0 	.word	0x200010b0

08006678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800667c:	4b03      	ldr	r3, [pc, #12]	@ (800668c <vTaskMissedYield+0x14>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]
}
 8006682:	bf00      	nop
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	200010ac 	.word	0x200010ac

08006690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006698:	f000 f852 	bl	8006740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <prvIdleTask+0x28>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d9f9      	bls.n	8006698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066a4:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <prvIdleTask+0x2c>)
 80066a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066b4:	e7f0      	b.n	8006698 <prvIdleTask+0x8>
 80066b6:	bf00      	nop
 80066b8:	20000bc8 	.word	0x20000bc8
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c6:	2300      	movs	r3, #0
 80066c8:	607b      	str	r3, [r7, #4]
 80066ca:	e00c      	b.n	80066e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4a12      	ldr	r2, [pc, #72]	@ (8006720 <prvInitialiseTaskLists+0x60>)
 80066d8:	4413      	add	r3, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe f9bc 	bl	8004a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3301      	adds	r3, #1
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b37      	cmp	r3, #55	@ 0x37
 80066ea:	d9ef      	bls.n	80066cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066ec:	480d      	ldr	r0, [pc, #52]	@ (8006724 <prvInitialiseTaskLists+0x64>)
 80066ee:	f7fe f9b3 	bl	8004a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066f2:	480d      	ldr	r0, [pc, #52]	@ (8006728 <prvInitialiseTaskLists+0x68>)
 80066f4:	f7fe f9b0 	bl	8004a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066f8:	480c      	ldr	r0, [pc, #48]	@ (800672c <prvInitialiseTaskLists+0x6c>)
 80066fa:	f7fe f9ad 	bl	8004a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066fe:	480c      	ldr	r0, [pc, #48]	@ (8006730 <prvInitialiseTaskLists+0x70>)
 8006700:	f7fe f9aa 	bl	8004a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006704:	480b      	ldr	r0, [pc, #44]	@ (8006734 <prvInitialiseTaskLists+0x74>)
 8006706:	f7fe f9a7 	bl	8004a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800670a:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <prvInitialiseTaskLists+0x78>)
 800670c:	4a05      	ldr	r2, [pc, #20]	@ (8006724 <prvInitialiseTaskLists+0x64>)
 800670e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006710:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <prvInitialiseTaskLists+0x7c>)
 8006712:	4a05      	ldr	r2, [pc, #20]	@ (8006728 <prvInitialiseTaskLists+0x68>)
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000bc8 	.word	0x20000bc8
 8006724:	20001028 	.word	0x20001028
 8006728:	2000103c 	.word	0x2000103c
 800672c:	20001058 	.word	0x20001058
 8006730:	2000106c 	.word	0x2000106c
 8006734:	20001084 	.word	0x20001084
 8006738:	20001050 	.word	0x20001050
 800673c:	20001054 	.word	0x20001054

08006740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006746:	e019      	b.n	800677c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006748:	f000 fea8 	bl	800749c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674c:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <prvCheckTasksWaitingTermination+0x50>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fa03 	bl	8004b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <prvCheckTasksWaitingTermination+0x54>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3b01      	subs	r3, #1
 8006764:	4a0b      	ldr	r2, [pc, #44]	@ (8006794 <prvCheckTasksWaitingTermination+0x54>)
 8006766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006768:	4b0b      	ldr	r3, [pc, #44]	@ (8006798 <prvCheckTasksWaitingTermination+0x58>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3b01      	subs	r3, #1
 800676e:	4a0a      	ldr	r2, [pc, #40]	@ (8006798 <prvCheckTasksWaitingTermination+0x58>)
 8006770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006772:	f000 fec3 	bl	80074fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f810 	bl	800679c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <prvCheckTasksWaitingTermination+0x58>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e1      	bne.n	8006748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	2000106c 	.word	0x2000106c
 8006794:	20001098 	.word	0x20001098
 8006798:	20001080 	.word	0x20001080

0800679c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3354      	adds	r3, #84	@ 0x54
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fa3d 	bl	8007c28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d108      	bne.n	80067ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 f83d 	bl	800783c <vPortFree>
				vPortFree( pxTCB );
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 f83a 	bl	800783c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067c8:	e019      	b.n	80067fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d103      	bne.n	80067dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f831 	bl	800783c <vPortFree>
	}
 80067da:	e010      	b.n	80067fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d00b      	beq.n	80067fe <prvDeleteTCB+0x62>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <prvDeleteTCB+0x5e>
	}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800680e:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <prvResetNextTaskUnblockTime+0x38>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006818:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <prvResetNextTaskUnblockTime+0x3c>)
 800681a:	f04f 32ff 	mov.w	r2, #4294967295
 800681e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006820:	e008      	b.n	8006834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006822:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <prvResetNextTaskUnblockTime+0x38>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a04      	ldr	r2, [pc, #16]	@ (8006844 <prvResetNextTaskUnblockTime+0x3c>)
 8006832:	6013      	str	r3, [r2, #0]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20001050 	.word	0x20001050
 8006844:	200010b8 	.word	0x200010b8

08006848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800684e:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <xTaskGetSchedulerState+0x34>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006856:	2301      	movs	r3, #1
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	e008      	b.n	800686e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685c:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <xTaskGetSchedulerState+0x38>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006864:	2302      	movs	r3, #2
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e001      	b.n	800686e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800686e:	687b      	ldr	r3, [r7, #4]
	}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	200010a4 	.word	0x200010a4
 8006880:	200010c0 	.word	0x200010c0

08006884 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d051      	beq.n	800693e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	4b2a      	ldr	r3, [pc, #168]	@ (8006948 <xTaskPriorityInherit+0xc4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d241      	bcs.n	800692c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	db06      	blt.n	80068be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b0:	4b25      	ldr	r3, [pc, #148]	@ (8006948 <xTaskPriorityInherit+0xc4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6959      	ldr	r1, [r3, #20]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4a1f      	ldr	r2, [pc, #124]	@ (800694c <xTaskPriorityInherit+0xc8>)
 80068d0:	4413      	add	r3, r2
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d122      	bne.n	800691c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3304      	adds	r3, #4
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe f942 	bl	8004b64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068e0:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <xTaskPriorityInherit+0xc4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ee:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <xTaskPriorityInherit+0xcc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d903      	bls.n	80068fe <xTaskPriorityInherit+0x7a>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <xTaskPriorityInherit+0xcc>)
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4a10      	ldr	r2, [pc, #64]	@ (800694c <xTaskPriorityInherit+0xc8>)
 800690c:	441a      	add	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3304      	adds	r3, #4
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f7fe f8ca 	bl	8004aae <vListInsertEnd>
 800691a:	e004      	b.n	8006926 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <xTaskPriorityInherit+0xc4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006926:	2301      	movs	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	e008      	b.n	800693e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <xTaskPriorityInherit+0xc4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	429a      	cmp	r2, r3
 8006938:	d201      	bcs.n	800693e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800693e:	68fb      	ldr	r3, [r7, #12]
	}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000bc4 	.word	0x20000bc4
 800694c:	20000bc8 	.word	0x20000bc8
 8006950:	200010a0 	.word	0x200010a0

08006954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d058      	beq.n	8006a1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800696a:	4b2f      	ldr	r3, [pc, #188]	@ (8006a28 <xTaskPriorityDisinherit+0xd4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	429a      	cmp	r2, r3
 8006972:	d00b      	beq.n	800698c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10b      	bne.n	80069ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60bb      	str	r3, [r7, #8]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b0:	1e5a      	subs	r2, r3, #1
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d02c      	beq.n	8006a1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d128      	bne.n	8006a1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe f8c8 	bl	8004b64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ec:	4b0f      	ldr	r3, [pc, #60]	@ (8006a2c <xTaskPriorityDisinherit+0xd8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <xTaskPriorityDisinherit+0xa8>
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	4a0c      	ldr	r2, [pc, #48]	@ (8006a2c <xTaskPriorityDisinherit+0xd8>)
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4a09      	ldr	r2, [pc, #36]	@ (8006a30 <xTaskPriorityDisinherit+0xdc>)
 8006a0a:	441a      	add	r2, r3
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f7fe f84b 	bl	8004aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a1c:	697b      	ldr	r3, [r7, #20]
	}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000bc4 	.word	0x20000bc4
 8006a2c:	200010a0 	.word	0x200010a0
 8006a30:	20000bc8 	.word	0x20000bc8

08006a34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d06c      	beq.n	8006b26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d902      	bls.n	8006a7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e002      	b.n	8006a82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d04c      	beq.n	8006b26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d147      	bne.n	8006b26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006a96:	4b26      	ldr	r3, [pc, #152]	@ (8006b30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d10b      	bne.n	8006ab8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60bb      	str	r3, [r7, #8]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	db04      	blt.n	8006ad6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	6959      	ldr	r1, [r3, #20]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a13      	ldr	r2, [pc, #76]	@ (8006b34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	d11c      	bne.n	8006b26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe f837 	bl	8004b64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afa:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d903      	bls.n	8006b0a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a07      	ldr	r2, [pc, #28]	@ (8006b34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b18:	441a      	add	r2, r3
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fd ffc4 	bl	8004aae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b26:	bf00      	nop
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000bc4 	.word	0x20000bc4
 8006b34:	20000bc8 	.word	0x20000bc8
 8006b38:	200010a0 	.word	0x200010a0

08006b3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006b40:	4b07      	ldr	r3, [pc, #28]	@ (8006b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006b48:	4b05      	ldr	r3, [pc, #20]	@ (8006b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b4e:	3201      	adds	r2, #1
 8006b50:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006b52:	4b03      	ldr	r3, [pc, #12]	@ (8006b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b54:	681b      	ldr	r3, [r3, #0]
	}
 8006b56:	4618      	mov	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000bc4 	.word	0x20000bc4

08006b64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b6e:	4b21      	ldr	r3, [pc, #132]	@ (8006bf4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b74:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fff2 	bl	8004b64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d10a      	bne.n	8006b9e <prvAddCurrentTaskToDelayedList+0x3a>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4819      	ldr	r0, [pc, #100]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0x98>)
 8006b98:	f7fd ff89 	bl	8004aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b9c:	e026      	b.n	8006bec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ba6:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d209      	bcs.n	8006bca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bb6:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fd ff96 	bl	8004af4 <vListInsert>
}
 8006bc8:	e010      	b.n	8006bec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bca:	4b0e      	ldr	r3, [pc, #56]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7fd ff8c 	bl	8004af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d202      	bcs.n	8006bec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006be6:	4a08      	ldr	r2, [pc, #32]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6013      	str	r3, [r2, #0]
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	2000109c 	.word	0x2000109c
 8006bf8:	20000bc4 	.word	0x20000bc4
 8006bfc:	20001084 	.word	0x20001084
 8006c00:	20001054 	.word	0x20001054
 8006c04:	20001050 	.word	0x20001050
 8006c08:	200010b8 	.word	0x200010b8

08006c0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	@ 0x28
 8006c10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c16:	f000 fb11 	bl	800723c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <xTimerCreateTimerTask+0x84>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d021      	beq.n	8006c66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c2a:	1d3a      	adds	r2, r7, #4
 8006c2c:	f107 0108 	add.w	r1, r7, #8
 8006c30:	f107 030c 	add.w	r3, r7, #12
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd fef5 	bl	8004a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	9202      	str	r2, [sp, #8]
 8006c42:	9301      	str	r3, [sp, #4]
 8006c44:	2302      	movs	r3, #2
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	4911      	ldr	r1, [pc, #68]	@ (8006c94 <xTimerCreateTimerTask+0x88>)
 8006c4e:	4812      	ldr	r0, [pc, #72]	@ (8006c98 <xTimerCreateTimerTask+0x8c>)
 8006c50:	f7fe ffdc 	bl	8005c0c <xTaskCreateStatic>
 8006c54:	4603      	mov	r3, r0
 8006c56:	4a11      	ldr	r2, [pc, #68]	@ (8006c9c <xTimerCreateTimerTask+0x90>)
 8006c58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <xTimerCreateTimerTask+0x90>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c62:	2301      	movs	r3, #1
 8006c64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10b      	bne.n	8006c84 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	613b      	str	r3, [r7, #16]
}
 8006c7e:	bf00      	nop
 8006c80:	bf00      	nop
 8006c82:	e7fd      	b.n	8006c80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c84:	697b      	ldr	r3, [r7, #20]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	200010f4 	.word	0x200010f4
 8006c94:	080086dc 	.word	0x080086dc
 8006c98:	08006dd9 	.word	0x08006dd9
 8006c9c:	200010f8 	.word	0x200010f8

08006ca0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	@ 0x28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10b      	bne.n	8006cd0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	623b      	str	r3, [r7, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	e7fd      	b.n	8006ccc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cd0:	4b19      	ldr	r3, [pc, #100]	@ (8006d38 <xTimerGenericCommand+0x98>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02a      	beq.n	8006d2e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	dc18      	bgt.n	8006d1c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cea:	f7ff fdad 	bl	8006848 <xTaskGetSchedulerState>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d109      	bne.n	8006d08 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cf4:	4b10      	ldr	r3, [pc, #64]	@ (8006d38 <xTimerGenericCommand+0x98>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	f107 0110 	add.w	r1, r7, #16
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d00:	f7fe f90e 	bl	8004f20 <xQueueGenericSend>
 8006d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d06:	e012      	b.n	8006d2e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d08:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <xTimerGenericCommand+0x98>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	f107 0110 	add.w	r1, r7, #16
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	f7fe f904 	bl	8004f20 <xQueueGenericSend>
 8006d18:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d1a:	e008      	b.n	8006d2e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <xTimerGenericCommand+0x98>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	f107 0110 	add.w	r1, r7, #16
 8006d24:	2300      	movs	r3, #0
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	f7fe f9fc 	bl	8005124 <xQueueGenericSendFromISR>
 8006d2c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3728      	adds	r7, #40	@ 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200010f4 	.word	0x200010f4

08006d3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d46:	4b23      	ldr	r3, [pc, #140]	@ (8006dd4 <prvProcessExpiredTimer+0x98>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fd ff05 	bl	8004b64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d023      	beq.n	8006db0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	18d1      	adds	r1, r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	6978      	ldr	r0, [r7, #20]
 8006d76:	f000 f8d3 	bl	8006f20 <prvInsertTimerInActiveList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d020      	beq.n	8006dc2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d80:	2300      	movs	r3, #0
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	f7ff ff88 	bl	8006ca0 <xTimerGenericCommand>
 8006d90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d114      	bne.n	8006dc2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	60fb      	str	r3, [r7, #12]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	6978      	ldr	r0, [r7, #20]
 8006dc8:	4798      	blx	r3
}
 8006dca:	bf00      	nop
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	200010ec 	.word	0x200010ec

08006dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 f859 	bl	8006e9c <prvGetNextExpireTime>
 8006dea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4619      	mov	r1, r3
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f805 	bl	8006e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006df6:	f000 f8d5 	bl	8006fa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dfa:	bf00      	nop
 8006dfc:	e7f0      	b.n	8006de0 <prvTimerTask+0x8>
	...

08006e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e0a:	f7ff f92d 	bl	8006068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e0e:	f107 0308 	add.w	r3, r7, #8
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f864 	bl	8006ee0 <prvSampleTimeNow>
 8006e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d130      	bne.n	8006e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <prvProcessTimerOrBlockTask+0x3c>
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d806      	bhi.n	8006e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e2e:	f7ff f929 	bl	8006084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ff81 	bl	8006d3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e3a:	e024      	b.n	8006e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e42:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <prvProcessTimerOrBlockTask+0x90>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <prvProcessTimerOrBlockTask+0x50>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <prvProcessTimerOrBlockTask+0x52>
 8006e50:	2300      	movs	r3, #0
 8006e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e54:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <prvProcessTimerOrBlockTask+0x94>)
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4619      	mov	r1, r3
 8006e62:	f7fe fe9f 	bl	8005ba4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e66:	f7ff f90d 	bl	8006084 <xTaskResumeAll>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e70:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <prvProcessTimerOrBlockTask+0x98>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
}
 8006e80:	e001      	b.n	8006e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e82:	f7ff f8ff 	bl	8006084 <xTaskResumeAll>
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200010f0 	.word	0x200010f0
 8006e94:	200010f4 	.word	0x200010f4
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <prvGetNextExpireTime+0x40>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <prvGetNextExpireTime+0x16>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	e000      	b.n	8006eb4 <prvGetNextExpireTime+0x18>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d105      	bne.n	8006ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ec0:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <prvGetNextExpireTime+0x40>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e001      	b.n	8006ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	200010ec 	.word	0x200010ec

08006ee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ee8:	f7ff f96a 	bl	80061c0 <xTaskGetTickCount>
 8006eec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006eee:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <prvSampleTimeNow+0x3c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d205      	bcs.n	8006f04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ef8:	f000 f93a 	bl	8007170 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e002      	b.n	8006f0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f0a:	4a04      	ldr	r2, [pc, #16]	@ (8006f1c <prvSampleTimeNow+0x3c>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f10:	68fb      	ldr	r3, [r7, #12]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200010fc 	.word	0x200010fc

08006f20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d812      	bhi.n	8006f6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e01b      	b.n	8006f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f5a:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <prvInsertTimerInActiveList+0x7c>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f7fd fdc5 	bl	8004af4 <vListInsert>
 8006f6a:	e012      	b.n	8006f92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d206      	bcs.n	8006f82 <prvInsertTimerInActiveList+0x62>
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e007      	b.n	8006f92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <prvInsertTimerInActiveList+0x80>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fd fdb1 	bl	8004af4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f92:	697b      	ldr	r3, [r7, #20]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	200010f0 	.word	0x200010f0
 8006fa0:	200010ec 	.word	0x200010ec

08006fa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08e      	sub	sp, #56	@ 0x38
 8006fa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006faa:	e0ce      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da19      	bge.n	8006fe6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fb2:	1d3b      	adds	r3, r7, #4
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	61fb      	str	r3, [r7, #28]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fdc:	6850      	ldr	r0, [r2, #4]
 8006fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fe0:	6892      	ldr	r2, [r2, #8]
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f2c0 80ae 	blt.w	800714a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fd fdb0 	bl	8004b64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007004:	463b      	mov	r3, r7
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff ff6a 	bl	8006ee0 <prvSampleTimeNow>
 800700c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b09      	cmp	r3, #9
 8007012:	f200 8097 	bhi.w	8007144 <prvProcessReceivedCommands+0x1a0>
 8007016:	a201      	add	r2, pc, #4	@ (adr r2, 800701c <prvProcessReceivedCommands+0x78>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007045 	.word	0x08007045
 8007020:	08007045 	.word	0x08007045
 8007024:	08007045 	.word	0x08007045
 8007028:	080070bb 	.word	0x080070bb
 800702c:	080070cf 	.word	0x080070cf
 8007030:	0800711b 	.word	0x0800711b
 8007034:	08007045 	.word	0x08007045
 8007038:	08007045 	.word	0x08007045
 800703c:	080070bb 	.word	0x080070bb
 8007040:	080070cf 	.word	0x080070cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	18d1      	adds	r1, r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007064:	f7ff ff5c 	bl	8006f20 <prvInsertTimerInActiveList>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d06c      	beq.n	8007148 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007074:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d061      	beq.n	8007148 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	441a      	add	r2, r3
 800708c:	2300      	movs	r3, #0
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2300      	movs	r3, #0
 8007092:	2100      	movs	r1, #0
 8007094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007096:	f7ff fe03 	bl	8006ca0 <xTimerGenericCommand>
 800709a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d152      	bne.n	8007148 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	61bb      	str	r3, [r7, #24]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070cc:	e03d      	b.n	800714a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	617b      	str	r3, [r7, #20]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	18d1      	adds	r1, r2, r3
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007114:	f7ff ff04 	bl	8006f20 <prvInsertTimerInActiveList>
					break;
 8007118:	e017      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800712a:	f000 fb87 	bl	800783c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800712e:	e00c      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007142:	e002      	b.n	800714a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <prvProcessReceivedCommands+0x1a6>
					break;
 8007148:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800714a:	4b08      	ldr	r3, [pc, #32]	@ (800716c <prvProcessReceivedCommands+0x1c8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	1d39      	adds	r1, r7, #4
 8007150:	2200      	movs	r2, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe f914 	bl	8005380 <xQueueReceive>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f47f af26 	bne.w	8006fac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3730      	adds	r7, #48	@ 0x30
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200010f4 	.word	0x200010f4

08007170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007176:	e049      	b.n	800720c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007178:	4b2e      	ldr	r3, [pc, #184]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007182:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3304      	adds	r3, #4
 8007190:	4618      	mov	r0, r3
 8007192:	f7fd fce7 	bl	8004b64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02f      	beq.n	800720c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4413      	add	r3, r2
 80071b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d90e      	bls.n	80071dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f7fd fc8d 	bl	8004af4 <vListInsert>
 80071da:	e017      	b.n	800720c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071dc:	2300      	movs	r3, #0
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fd5a 	bl	8006ca0 <xTimerGenericCommand>
 80071ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	603b      	str	r3, [r7, #0]
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800720c:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1b0      	bne.n	8007178 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007216:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800721c:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <prvSwitchTimerLists+0xc8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a04      	ldr	r2, [pc, #16]	@ (8007234 <prvSwitchTimerLists+0xc4>)
 8007222:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007224:	4a04      	ldr	r2, [pc, #16]	@ (8007238 <prvSwitchTimerLists+0xc8>)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6013      	str	r3, [r2, #0]
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	200010ec 	.word	0x200010ec
 8007238:	200010f0 	.word	0x200010f0

0800723c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007242:	f000 f92b 	bl	800749c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007246:	4b15      	ldr	r3, [pc, #84]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d120      	bne.n	8007290 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800724e:	4814      	ldr	r0, [pc, #80]	@ (80072a0 <prvCheckForValidListAndQueue+0x64>)
 8007250:	f7fd fc02 	bl	8004a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007254:	4813      	ldr	r0, [pc, #76]	@ (80072a4 <prvCheckForValidListAndQueue+0x68>)
 8007256:	f7fd fbff 	bl	8004a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800725a:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <prvCheckForValidListAndQueue+0x6c>)
 800725c:	4a10      	ldr	r2, [pc, #64]	@ (80072a0 <prvCheckForValidListAndQueue+0x64>)
 800725e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007260:	4b12      	ldr	r3, [pc, #72]	@ (80072ac <prvCheckForValidListAndQueue+0x70>)
 8007262:	4a10      	ldr	r2, [pc, #64]	@ (80072a4 <prvCheckForValidListAndQueue+0x68>)
 8007264:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007266:	2300      	movs	r3, #0
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <prvCheckForValidListAndQueue+0x74>)
 800726c:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <prvCheckForValidListAndQueue+0x78>)
 800726e:	2110      	movs	r1, #16
 8007270:	200a      	movs	r0, #10
 8007272:	f7fd fd0b 	bl	8004c8c <xQueueGenericCreateStatic>
 8007276:	4603      	mov	r3, r0
 8007278:	4a08      	ldr	r2, [pc, #32]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 800727a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800727c:	4b07      	ldr	r3, [pc, #28]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007284:	4b05      	ldr	r3, [pc, #20]	@ (800729c <prvCheckForValidListAndQueue+0x60>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	490b      	ldr	r1, [pc, #44]	@ (80072b8 <prvCheckForValidListAndQueue+0x7c>)
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fc38 	bl	8005b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007290:	f000 f934 	bl	80074fc <vPortExitCritical>
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200010f4 	.word	0x200010f4
 80072a0:	200010c4 	.word	0x200010c4
 80072a4:	200010d8 	.word	0x200010d8
 80072a8:	200010ec 	.word	0x200010ec
 80072ac:	200010f0 	.word	0x200010f0
 80072b0:	200011a0 	.word	0x200011a0
 80072b4:	20001100 	.word	0x20001100
 80072b8:	080086e4 	.word	0x080086e4

080072bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3b04      	subs	r3, #4
 80072cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80072d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b04      	subs	r3, #4
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 0201 	bic.w	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072ec:	4a08      	ldr	r2, [pc, #32]	@ (8007310 <pxPortInitialiseStack+0x54>)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3b14      	subs	r3, #20
 80072f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3b20      	subs	r3, #32
 8007302:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr
 8007310:	08007315 	.word	0x08007315

08007314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800731a:	2300      	movs	r3, #0
 800731c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800731e:	4b12      	ldr	r3, [pc, #72]	@ (8007368 <prvTaskExitError+0x54>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d00b      	beq.n	8007340 <prvTaskExitError+0x2c>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60fb      	str	r3, [r7, #12]
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	e7fd      	b.n	800733c <prvTaskExitError+0x28>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60bb      	str	r3, [r7, #8]
}
 8007352:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007354:	bf00      	nop
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0fc      	beq.n	8007356 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr
 8007368:	20000068 	.word	0x20000068
 800736c:	00000000 	.word	0x00000000

08007370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <pxCurrentTCBConst2>)
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800737a:	f380 8809 	msr	PSP, r0
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8811 	msr	BASEPRI, r0
 800738a:	f04e 0e0d 	orr.w	lr, lr, #13
 800738e:	4770      	bx	lr

08007390 <pxCurrentTCBConst2>:
 8007390:	20000bc4 	.word	0x20000bc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007398:	4806      	ldr	r0, [pc, #24]	@ (80073b4 <prvPortStartFirstTask+0x1c>)
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f380 8808 	msr	MSP, r0
 80073a2:	b662      	cpsie	i
 80073a4:	b661      	cpsie	f
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	df00      	svc	0
 80073b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073b2:	bf00      	nop
 80073b4:	e000ed08 	.word	0xe000ed08

080073b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073be:	4b32      	ldr	r3, [pc, #200]	@ (8007488 <xPortStartScheduler+0xd0>)
 80073c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	22ff      	movs	r2, #255	@ 0xff
 80073ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	4b2a      	ldr	r3, [pc, #168]	@ (800748c <xPortStartScheduler+0xd4>)
 80073e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007490 <xPortStartScheduler+0xd8>)
 80073e8:	2207      	movs	r2, #7
 80073ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ec:	e009      	b.n	8007402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073ee:	4b28      	ldr	r3, [pc, #160]	@ (8007490 <xPortStartScheduler+0xd8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4a26      	ldr	r2, [pc, #152]	@ (8007490 <xPortStartScheduler+0xd8>)
 80073f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740a:	2b80      	cmp	r3, #128	@ 0x80
 800740c:	d0ef      	beq.n	80073ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800740e:	4b20      	ldr	r3, [pc, #128]	@ (8007490 <xPortStartScheduler+0xd8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f1c3 0307 	rsb	r3, r3, #7
 8007416:	2b04      	cmp	r3, #4
 8007418:	d00b      	beq.n	8007432 <xPortStartScheduler+0x7a>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	60bb      	str	r3, [r7, #8]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007432:	4b17      	ldr	r3, [pc, #92]	@ (8007490 <xPortStartScheduler+0xd8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	4a15      	ldr	r2, [pc, #84]	@ (8007490 <xPortStartScheduler+0xd8>)
 800743a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800743c:	4b14      	ldr	r3, [pc, #80]	@ (8007490 <xPortStartScheduler+0xd8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007444:	4a12      	ldr	r2, [pc, #72]	@ (8007490 <xPortStartScheduler+0xd8>)
 8007446:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007450:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <xPortStartScheduler+0xdc>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0f      	ldr	r2, [pc, #60]	@ (8007494 <xPortStartScheduler+0xdc>)
 8007456:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800745a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <xPortStartScheduler+0xdc>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a0c      	ldr	r2, [pc, #48]	@ (8007494 <xPortStartScheduler+0xdc>)
 8007462:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007466:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007468:	f000 f8b8 	bl	80075dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800746c:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <xPortStartScheduler+0xe0>)
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007472:	f7ff ff91 	bl	8007398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007476:	f7fe ff6b 	bl	8006350 <vTaskSwitchContext>
	prvTaskExitError();
 800747a:	f7ff ff4b 	bl	8007314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	e000e400 	.word	0xe000e400
 800748c:	200011f0 	.word	0x200011f0
 8007490:	200011f4 	.word	0x200011f4
 8007494:	e000ed20 	.word	0xe000ed20
 8007498:	20000068 	.word	0x20000068

0800749c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	607b      	str	r3, [r7, #4]
}
 80074b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074b6:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <vPortEnterCritical+0x58>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	4a0d      	ldr	r2, [pc, #52]	@ (80074f4 <vPortEnterCritical+0x58>)
 80074be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <vPortEnterCritical+0x58>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d110      	bne.n	80074ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074c8:	4b0b      	ldr	r3, [pc, #44]	@ (80074f8 <vPortEnterCritical+0x5c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <vPortEnterCritical+0x4e>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	603b      	str	r3, [r7, #0]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <vPortEnterCritical+0x4a>
	}
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr
 80074f4:	20000068 	.word	0x20000068
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007502:	4b12      	ldr	r3, [pc, #72]	@ (800754c <vPortExitCritical+0x50>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <vPortExitCritical+0x26>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	607b      	str	r3, [r7, #4]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007522:	4b0a      	ldr	r3, [pc, #40]	@ (800754c <vPortExitCritical+0x50>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3b01      	subs	r3, #1
 8007528:	4a08      	ldr	r2, [pc, #32]	@ (800754c <vPortExitCritical+0x50>)
 800752a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <vPortExitCritical+0x50>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <vPortExitCritical+0x44>
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000068 	.word	0x20000068

08007550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007550:	f3ef 8009 	mrs	r0, PSP
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4b0d      	ldr	r3, [pc, #52]	@ (8007590 <pxCurrentTCBConst>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007560:	6010      	str	r0, [r2, #0]
 8007562:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007566:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800756a:	f380 8811 	msr	BASEPRI, r0
 800756e:	f7fe feef 	bl	8006350 <vTaskSwitchContext>
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	6808      	ldr	r0, [r1, #0]
 8007582:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007586:	f380 8809 	msr	PSP, r0
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	4770      	bx	lr

08007590 <pxCurrentTCBConst>:
 8007590:	20000bc4 	.word	0x20000bc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop

08007598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
}
 80075b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075b2:	f7fe fe13 	bl	80061dc <xTaskIncrementTick>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <xPortSysTickHandler+0x40>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	f383 8811 	msr	BASEPRI, r3
}
 80075ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075e0:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <vPortSetupTimerInterrupt+0x30>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <vPortSetupTimerInterrupt+0x34>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ec:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <vPortSetupTimerInterrupt+0x38>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a09      	ldr	r2, [pc, #36]	@ (8007618 <vPortSetupTimerInterrupt+0x3c>)
 80075f2:	fba2 2303 	umull	r2, r3, r2, r3
 80075f6:	099b      	lsrs	r3, r3, #6
 80075f8:	4a08      	ldr	r2, [pc, #32]	@ (800761c <vPortSetupTimerInterrupt+0x40>)
 80075fa:	3b01      	subs	r3, #1
 80075fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075fe:	4b03      	ldr	r3, [pc, #12]	@ (800760c <vPortSetupTimerInterrupt+0x30>)
 8007600:	2207      	movs	r2, #7
 8007602:	601a      	str	r2, [r3, #0]
}
 8007604:	bf00      	nop
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr
 800760c:	e000e010 	.word	0xe000e010
 8007610:	e000e018 	.word	0xe000e018
 8007614:	2000005c 	.word	0x2000005c
 8007618:	10624dd3 	.word	0x10624dd3
 800761c:	e000e014 	.word	0xe000e014

08007620 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007626:	f3ef 8305 	mrs	r3, IPSR
 800762a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b0f      	cmp	r3, #15
 8007630:	d915      	bls.n	800765e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007632:	4a17      	ldr	r2, [pc, #92]	@ (8007690 <vPortValidateInterruptPriority+0x70>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800763c:	4b15      	ldr	r3, [pc, #84]	@ (8007694 <vPortValidateInterruptPriority+0x74>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	7afa      	ldrb	r2, [r7, #11]
 8007642:	429a      	cmp	r2, r3
 8007644:	d20b      	bcs.n	800765e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	607b      	str	r3, [r7, #4]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800765e:	4b0e      	ldr	r3, [pc, #56]	@ (8007698 <vPortValidateInterruptPriority+0x78>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <vPortValidateInterruptPriority+0x7c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d90b      	bls.n	8007686 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	603b      	str	r3, [r7, #0]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <vPortValidateInterruptPriority+0x62>
	}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr
 8007690:	e000e3f0 	.word	0xe000e3f0
 8007694:	200011f0 	.word	0x200011f0
 8007698:	e000ed0c 	.word	0xe000ed0c
 800769c:	200011f4 	.word	0x200011f4

080076a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	@ 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076ac:	f7fe fcdc 	bl	8006068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007824 <pvPortMalloc+0x184>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076b8:	f000 f924 	bl	8007904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007828 <pvPortMalloc+0x188>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4013      	ands	r3, r2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f040 8095 	bne.w	80077f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01e      	beq.n	800770e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80076d0:	2208      	movs	r2, #8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4413      	add	r3, r2
 80076d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d015      	beq.n	800770e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f023 0307 	bic.w	r3, r3, #7
 80076e8:	3308      	adds	r3, #8
 80076ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00b      	beq.n	800770e <pvPortMalloc+0x6e>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	617b      	str	r3, [r7, #20]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d06f      	beq.n	80077f4 <pvPortMalloc+0x154>
 8007714:	4b45      	ldr	r3, [pc, #276]	@ (800782c <pvPortMalloc+0x18c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d86a      	bhi.n	80077f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800771e:	4b44      	ldr	r3, [pc, #272]	@ (8007830 <pvPortMalloc+0x190>)
 8007720:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007722:	4b43      	ldr	r3, [pc, #268]	@ (8007830 <pvPortMalloc+0x190>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007728:	e004      	b.n	8007734 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d903      	bls.n	8007746 <pvPortMalloc+0xa6>
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f1      	bne.n	800772a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007746:	4b37      	ldr	r3, [pc, #220]	@ (8007824 <pvPortMalloc+0x184>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800774c:	429a      	cmp	r2, r3
 800774e:	d051      	beq.n	80077f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2208      	movs	r2, #8
 8007756:	4413      	add	r3, r2
 8007758:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	1ad2      	subs	r2, r2, r3
 800776a:	2308      	movs	r3, #8
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	429a      	cmp	r2, r3
 8007770:	d920      	bls.n	80077b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <pvPortMalloc+0xfc>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	613b      	str	r3, [r7, #16]
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	e7fd      	b.n	8007798 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077ae:	69b8      	ldr	r0, [r7, #24]
 80077b0:	f000 f90a 	bl	80079c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077b4:	4b1d      	ldr	r3, [pc, #116]	@ (800782c <pvPortMalloc+0x18c>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	4a1b      	ldr	r2, [pc, #108]	@ (800782c <pvPortMalloc+0x18c>)
 80077c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077c2:	4b1a      	ldr	r3, [pc, #104]	@ (800782c <pvPortMalloc+0x18c>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <pvPortMalloc+0x194>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d203      	bcs.n	80077d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077ce:	4b17      	ldr	r3, [pc, #92]	@ (800782c <pvPortMalloc+0x18c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a18      	ldr	r2, [pc, #96]	@ (8007834 <pvPortMalloc+0x194>)
 80077d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	4b13      	ldr	r3, [pc, #76]	@ (8007828 <pvPortMalloc+0x188>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	431a      	orrs	r2, r3
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077ea:	4b13      	ldr	r3, [pc, #76]	@ (8007838 <pvPortMalloc+0x198>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a11      	ldr	r2, [pc, #68]	@ (8007838 <pvPortMalloc+0x198>)
 80077f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077f4:	f7fe fc46 	bl	8006084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <pvPortMalloc+0x17a>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <pvPortMalloc+0x176>
	return pvReturn;
 800781a:	69fb      	ldr	r3, [r7, #28]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3728      	adds	r7, #40	@ 0x28
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20003200 	.word	0x20003200
 8007828:	20003214 	.word	0x20003214
 800782c:	20003204 	.word	0x20003204
 8007830:	200031f8 	.word	0x200031f8
 8007834:	20003208 	.word	0x20003208
 8007838:	2000320c 	.word	0x2000320c

0800783c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d04f      	beq.n	80078ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800784e:	2308      	movs	r3, #8
 8007850:	425b      	negs	r3, r3
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4b25      	ldr	r3, [pc, #148]	@ (80078f8 <vPortFree+0xbc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <vPortFree+0x46>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60fb      	str	r3, [r7, #12]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <vPortFree+0x66>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	60bb      	str	r3, [r7, #8]
}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	e7fd      	b.n	800789e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <vPortFree+0xbc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01e      	beq.n	80078ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11a      	bne.n	80078ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <vPortFree+0xbc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	43db      	mvns	r3, r3
 80078c2:	401a      	ands	r2, r3
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078c8:	f7fe fbce 	bl	8006068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	4b0a      	ldr	r3, [pc, #40]	@ (80078fc <vPortFree+0xc0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	4a09      	ldr	r2, [pc, #36]	@ (80078fc <vPortFree+0xc0>)
 80078d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078da:	6938      	ldr	r0, [r7, #16]
 80078dc:	f000 f874 	bl	80079c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078e0:	4b07      	ldr	r3, [pc, #28]	@ (8007900 <vPortFree+0xc4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	4a06      	ldr	r2, [pc, #24]	@ (8007900 <vPortFree+0xc4>)
 80078e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ea:	f7fe fbcb 	bl	8006084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ee:	bf00      	nop
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20003214 	.word	0x20003214
 80078fc:	20003204 	.word	0x20003204
 8007900:	20003210 	.word	0x20003210

08007904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800790a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800790e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007910:	4b27      	ldr	r3, [pc, #156]	@ (80079b0 <prvHeapInit+0xac>)
 8007912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3307      	adds	r3, #7
 8007922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0307 	bic.w	r3, r3, #7
 800792a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	4a1f      	ldr	r2, [pc, #124]	@ (80079b0 <prvHeapInit+0xac>)
 8007934:	4413      	add	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800793c:	4a1d      	ldr	r2, [pc, #116]	@ (80079b4 <prvHeapInit+0xb0>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007942:	4b1c      	ldr	r3, [pc, #112]	@ (80079b4 <prvHeapInit+0xb0>)
 8007944:	2200      	movs	r2, #0
 8007946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	4413      	add	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007950:	2208      	movs	r2, #8
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0307 	bic.w	r3, r3, #7
 800795e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <prvHeapInit+0xb4>)
 8007964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007966:	4b14      	ldr	r3, [pc, #80]	@ (80079b8 <prvHeapInit+0xb4>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800796e:	4b12      	ldr	r3, [pc, #72]	@ (80079b8 <prvHeapInit+0xb4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007984:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <prvHeapInit+0xb4>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4a0a      	ldr	r2, [pc, #40]	@ (80079bc <prvHeapInit+0xb8>)
 8007992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	4a09      	ldr	r2, [pc, #36]	@ (80079c0 <prvHeapInit+0xbc>)
 800799a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800799c:	4b09      	ldr	r3, [pc, #36]	@ (80079c4 <prvHeapInit+0xc0>)
 800799e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	200011f8 	.word	0x200011f8
 80079b4:	200031f8 	.word	0x200031f8
 80079b8:	20003200 	.word	0x20003200
 80079bc:	20003208 	.word	0x20003208
 80079c0:	20003204 	.word	0x20003204
 80079c4:	20003214 	.word	0x20003214

080079c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079d0:	4b27      	ldr	r3, [pc, #156]	@ (8007a70 <prvInsertBlockIntoFreeList+0xa8>)
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e002      	b.n	80079dc <prvInsertBlockIntoFreeList+0x14>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d8f7      	bhi.n	80079d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d108      	bne.n	8007a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	441a      	add	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	441a      	add	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d118      	bne.n	8007a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b14      	ldr	r3, [pc, #80]	@ (8007a74 <prvInsertBlockIntoFreeList+0xac>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d00d      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e008      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <prvInsertBlockIntoFreeList+0xac>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e003      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d002      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr
 8007a70:	200031f8 	.word	0x200031f8
 8007a74:	20003200 	.word	0x20003200

08007a78 <_strtoul_l.isra.0>:
 8007a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	4686      	mov	lr, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	4e33      	ldr	r6, [pc, #204]	@ (8007b50 <_strtoul_l.isra.0+0xd8>)
 8007a82:	4628      	mov	r0, r5
 8007a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a88:	5d37      	ldrb	r7, [r6, r4]
 8007a8a:	f017 0708 	ands.w	r7, r7, #8
 8007a8e:	d1f8      	bne.n	8007a82 <_strtoul_l.isra.0+0xa>
 8007a90:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a92:	d110      	bne.n	8007ab6 <_strtoul_l.isra.0+0x3e>
 8007a94:	2701      	movs	r7, #1
 8007a96:	782c      	ldrb	r4, [r5, #0]
 8007a98:	1c85      	adds	r5, r0, #2
 8007a9a:	f033 0010 	bics.w	r0, r3, #16
 8007a9e:	d115      	bne.n	8007acc <_strtoul_l.isra.0+0x54>
 8007aa0:	2c30      	cmp	r4, #48	@ 0x30
 8007aa2:	d10d      	bne.n	8007ac0 <_strtoul_l.isra.0+0x48>
 8007aa4:	7828      	ldrb	r0, [r5, #0]
 8007aa6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007aaa:	2858      	cmp	r0, #88	@ 0x58
 8007aac:	d108      	bne.n	8007ac0 <_strtoul_l.isra.0+0x48>
 8007aae:	786c      	ldrb	r4, [r5, #1]
 8007ab0:	3502      	adds	r5, #2
 8007ab2:	2310      	movs	r3, #16
 8007ab4:	e00a      	b.n	8007acc <_strtoul_l.isra.0+0x54>
 8007ab6:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ab8:	bf04      	itt	eq
 8007aba:	782c      	ldrbeq	r4, [r5, #0]
 8007abc:	1c85      	addeq	r5, r0, #2
 8007abe:	e7ec      	b.n	8007a9a <_strtoul_l.isra.0+0x22>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1f6      	bne.n	8007ab2 <_strtoul_l.isra.0+0x3a>
 8007ac4:	2c30      	cmp	r4, #48	@ 0x30
 8007ac6:	bf14      	ite	ne
 8007ac8:	230a      	movne	r3, #10
 8007aca:	2308      	moveq	r3, #8
 8007acc:	f04f 38ff 	mov.w	r8, #4294967295
 8007ad0:	fbb8 f8f3 	udiv	r8, r8, r3
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	fb03 f908 	mul.w	r9, r3, r8
 8007ada:	4630      	mov	r0, r6
 8007adc:	ea6f 0909 	mvn.w	r9, r9
 8007ae0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007ae4:	f1bc 0f09 	cmp.w	ip, #9
 8007ae8:	d810      	bhi.n	8007b0c <_strtoul_l.isra.0+0x94>
 8007aea:	4664      	mov	r4, ip
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	dd1e      	ble.n	8007b2e <_strtoul_l.isra.0+0xb6>
 8007af0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007af4:	d007      	beq.n	8007b06 <_strtoul_l.isra.0+0x8e>
 8007af6:	4580      	cmp	r8, r0
 8007af8:	d316      	bcc.n	8007b28 <_strtoul_l.isra.0+0xb0>
 8007afa:	d101      	bne.n	8007b00 <_strtoul_l.isra.0+0x88>
 8007afc:	45a1      	cmp	r9, r4
 8007afe:	db13      	blt.n	8007b28 <_strtoul_l.isra.0+0xb0>
 8007b00:	2601      	movs	r6, #1
 8007b02:	fb00 4003 	mla	r0, r0, r3, r4
 8007b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b0a:	e7e9      	b.n	8007ae0 <_strtoul_l.isra.0+0x68>
 8007b0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007b10:	f1bc 0f19 	cmp.w	ip, #25
 8007b14:	d801      	bhi.n	8007b1a <_strtoul_l.isra.0+0xa2>
 8007b16:	3c37      	subs	r4, #55	@ 0x37
 8007b18:	e7e8      	b.n	8007aec <_strtoul_l.isra.0+0x74>
 8007b1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007b1e:	f1bc 0f19 	cmp.w	ip, #25
 8007b22:	d804      	bhi.n	8007b2e <_strtoul_l.isra.0+0xb6>
 8007b24:	3c57      	subs	r4, #87	@ 0x57
 8007b26:	e7e1      	b.n	8007aec <_strtoul_l.isra.0+0x74>
 8007b28:	f04f 36ff 	mov.w	r6, #4294967295
 8007b2c:	e7eb      	b.n	8007b06 <_strtoul_l.isra.0+0x8e>
 8007b2e:	1c73      	adds	r3, r6, #1
 8007b30:	d106      	bne.n	8007b40 <_strtoul_l.isra.0+0xc8>
 8007b32:	2322      	movs	r3, #34	@ 0x22
 8007b34:	4630      	mov	r0, r6
 8007b36:	f8ce 3000 	str.w	r3, [lr]
 8007b3a:	b932      	cbnz	r2, 8007b4a <_strtoul_l.isra.0+0xd2>
 8007b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b40:	b107      	cbz	r7, 8007b44 <_strtoul_l.isra.0+0xcc>
 8007b42:	4240      	negs	r0, r0
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	d0f9      	beq.n	8007b3c <_strtoul_l.isra.0+0xc4>
 8007b48:	b106      	cbz	r6, 8007b4c <_strtoul_l.isra.0+0xd4>
 8007b4a:	1e69      	subs	r1, r5, #1
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	e7f5      	b.n	8007b3c <_strtoul_l.isra.0+0xc4>
 8007b50:	08008a83 	.word	0x08008a83

08007b54 <strtoul>:
 8007b54:	4613      	mov	r3, r2
 8007b56:	460a      	mov	r2, r1
 8007b58:	4601      	mov	r1, r0
 8007b5a:	4802      	ldr	r0, [pc, #8]	@ (8007b64 <strtoul+0x10>)
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f7ff bf8b 	b.w	8007a78 <_strtoul_l.isra.0>
 8007b62:	bf00      	nop
 8007b64:	2000006c 	.word	0x2000006c

08007b68 <siprintf>:
 8007b68:	b40e      	push	{r1, r2, r3}
 8007b6a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	2400      	movs	r4, #0
 8007b72:	b09d      	sub	sp, #116	@ 0x74
 8007b74:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007b76:	9002      	str	r0, [sp, #8]
 8007b78:	9006      	str	r0, [sp, #24]
 8007b7a:	9107      	str	r1, [sp, #28]
 8007b7c:	9104      	str	r1, [sp, #16]
 8007b7e:	4809      	ldr	r0, [pc, #36]	@ (8007ba4 <siprintf+0x3c>)
 8007b80:	4909      	ldr	r1, [pc, #36]	@ (8007ba8 <siprintf+0x40>)
 8007b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b86:	9105      	str	r1, [sp, #20]
 8007b88:	6800      	ldr	r0, [r0, #0]
 8007b8a:	a902      	add	r1, sp, #8
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007b90:	f000 fa3a 	bl	8008008 <_svfiprintf_r>
 8007b94:	9b02      	ldr	r3, [sp, #8]
 8007b96:	701c      	strb	r4, [r3, #0]
 8007b98:	b01d      	add	sp, #116	@ 0x74
 8007b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b9e:	b003      	add	sp, #12
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000006c 	.word	0x2000006c
 8007ba8:	ffff0208 	.word	0xffff0208

08007bac <memcmp>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	3901      	subs	r1, #1
 8007bb0:	4402      	add	r2, r0
 8007bb2:	4290      	cmp	r0, r2
 8007bb4:	d101      	bne.n	8007bba <memcmp+0xe>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e005      	b.n	8007bc6 <memcmp+0x1a>
 8007bba:	7803      	ldrb	r3, [r0, #0]
 8007bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	d001      	beq.n	8007bc8 <memcmp+0x1c>
 8007bc4:	1b18      	subs	r0, r3, r4
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	3001      	adds	r0, #1
 8007bca:	e7f2      	b.n	8007bb2 <memcmp+0x6>

08007bcc <memset>:
 8007bcc:	4603      	mov	r3, r0
 8007bce:	4402      	add	r2, r0
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d100      	bne.n	8007bd6 <memset+0xa>
 8007bd4:	4770      	bx	lr
 8007bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bda:	e7f9      	b.n	8007bd0 <memset+0x4>

08007bdc <strncmp>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	b16a      	cbz	r2, 8007bfc <strncmp+0x20>
 8007be0:	3901      	subs	r1, #1
 8007be2:	1884      	adds	r4, r0, r2
 8007be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d103      	bne.n	8007bf8 <strncmp+0x1c>
 8007bf0:	42a0      	cmp	r0, r4
 8007bf2:	d001      	beq.n	8007bf8 <strncmp+0x1c>
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d1f5      	bne.n	8007be4 <strncmp+0x8>
 8007bf8:	1ad0      	subs	r0, r2, r3
 8007bfa:	bd10      	pop	{r4, pc}
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	e7fc      	b.n	8007bfa <strncmp+0x1e>

08007c00 <strncpy>:
 8007c00:	4603      	mov	r3, r0
 8007c02:	b510      	push	{r4, lr}
 8007c04:	3901      	subs	r1, #1
 8007c06:	b132      	cbz	r2, 8007c16 <strncpy+0x16>
 8007c08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c0c:	3a01      	subs	r2, #1
 8007c0e:	f803 4b01 	strb.w	r4, [r3], #1
 8007c12:	2c00      	cmp	r4, #0
 8007c14:	d1f7      	bne.n	8007c06 <strncpy+0x6>
 8007c16:	2100      	movs	r1, #0
 8007c18:	441a      	add	r2, r3
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d100      	bne.n	8007c20 <strncpy+0x20>
 8007c1e:	bd10      	pop	{r4, pc}
 8007c20:	f803 1b01 	strb.w	r1, [r3], #1
 8007c24:	e7f9      	b.n	8007c1a <strncpy+0x1a>
	...

08007c28 <_reclaim_reent>:
 8007c28:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce0 <_reclaim_reent+0xb8>)
 8007c2a:	b570      	push	{r4, r5, r6, lr}
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4283      	cmp	r3, r0
 8007c32:	d053      	beq.n	8007cdc <_reclaim_reent+0xb4>
 8007c34:	69c3      	ldr	r3, [r0, #28]
 8007c36:	b31b      	cbz	r3, 8007c80 <_reclaim_reent+0x58>
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	b163      	cbz	r3, 8007c56 <_reclaim_reent+0x2e>
 8007c3c:	2500      	movs	r5, #0
 8007c3e:	69e3      	ldr	r3, [r4, #28]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	5959      	ldr	r1, [r3, r5]
 8007c44:	b9b1      	cbnz	r1, 8007c74 <_reclaim_reent+0x4c>
 8007c46:	3504      	adds	r5, #4
 8007c48:	2d80      	cmp	r5, #128	@ 0x80
 8007c4a:	d1f8      	bne.n	8007c3e <_reclaim_reent+0x16>
 8007c4c:	69e3      	ldr	r3, [r4, #28]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	68d9      	ldr	r1, [r3, #12]
 8007c52:	f000 f887 	bl	8007d64 <_free_r>
 8007c56:	69e3      	ldr	r3, [r4, #28]
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	b111      	cbz	r1, 8007c62 <_reclaim_reent+0x3a>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 f881 	bl	8007d64 <_free_r>
 8007c62:	69e3      	ldr	r3, [r4, #28]
 8007c64:	689d      	ldr	r5, [r3, #8]
 8007c66:	b15d      	cbz	r5, 8007c80 <_reclaim_reent+0x58>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	682d      	ldr	r5, [r5, #0]
 8007c6e:	f000 f879 	bl	8007d64 <_free_r>
 8007c72:	e7f8      	b.n	8007c66 <_reclaim_reent+0x3e>
 8007c74:	680e      	ldr	r6, [r1, #0]
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 f874 	bl	8007d64 <_free_r>
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	e7e1      	b.n	8007c44 <_reclaim_reent+0x1c>
 8007c80:	6961      	ldr	r1, [r4, #20]
 8007c82:	b111      	cbz	r1, 8007c8a <_reclaim_reent+0x62>
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 f86d 	bl	8007d64 <_free_r>
 8007c8a:	69e1      	ldr	r1, [r4, #28]
 8007c8c:	b111      	cbz	r1, 8007c94 <_reclaim_reent+0x6c>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f868 	bl	8007d64 <_free_r>
 8007c94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c96:	b111      	cbz	r1, 8007c9e <_reclaim_reent+0x76>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f863 	bl	8007d64 <_free_r>
 8007c9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ca0:	b111      	cbz	r1, 8007ca8 <_reclaim_reent+0x80>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f85e 	bl	8007d64 <_free_r>
 8007ca8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007caa:	b111      	cbz	r1, 8007cb2 <_reclaim_reent+0x8a>
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 f859 	bl	8007d64 <_free_r>
 8007cb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007cb4:	b111      	cbz	r1, 8007cbc <_reclaim_reent+0x94>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f854 	bl	8007d64 <_free_r>
 8007cbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cbe:	b111      	cbz	r1, 8007cc6 <_reclaim_reent+0x9e>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 f84f 	bl	8007d64 <_free_r>
 8007cc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007cc8:	b111      	cbz	r1, 8007cd0 <_reclaim_reent+0xa8>
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f84a 	bl	8007d64 <_free_r>
 8007cd0:	6a23      	ldr	r3, [r4, #32]
 8007cd2:	b11b      	cbz	r3, 8007cdc <_reclaim_reent+0xb4>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cda:	4718      	bx	r3
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
 8007cde:	bf00      	nop
 8007ce0:	2000006c 	.word	0x2000006c

08007ce4 <__errno>:
 8007ce4:	4b01      	ldr	r3, [pc, #4]	@ (8007cec <__errno+0x8>)
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	2000006c 	.word	0x2000006c

08007cf0 <__libc_init_array>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	4d0c      	ldr	r5, [pc, #48]	@ (8007d28 <__libc_init_array+0x38>)
 8007cf6:	4c0d      	ldr	r4, [pc, #52]	@ (8007d2c <__libc_init_array+0x3c>)
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	42a6      	cmp	r6, r4
 8007cfe:	d109      	bne.n	8007d14 <__libc_init_array+0x24>
 8007d00:	f000 fc82 	bl	8008608 <_init>
 8007d04:	2600      	movs	r6, #0
 8007d06:	4d0a      	ldr	r5, [pc, #40]	@ (8007d30 <__libc_init_array+0x40>)
 8007d08:	4c0a      	ldr	r4, [pc, #40]	@ (8007d34 <__libc_init_array+0x44>)
 8007d0a:	1b64      	subs	r4, r4, r5
 8007d0c:	10a4      	asrs	r4, r4, #2
 8007d0e:	42a6      	cmp	r6, r4
 8007d10:	d105      	bne.n	8007d1e <__libc_init_array+0x2e>
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d18:	4798      	blx	r3
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	e7ee      	b.n	8007cfc <__libc_init_array+0xc>
 8007d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d22:	4798      	blx	r3
 8007d24:	3601      	adds	r6, #1
 8007d26:	e7f2      	b.n	8007d0e <__libc_init_array+0x1e>
 8007d28:	080090c0 	.word	0x080090c0
 8007d2c:	080090c0 	.word	0x080090c0
 8007d30:	080090c0 	.word	0x080090c0
 8007d34:	080090c4 	.word	0x080090c4

08007d38 <__retarget_lock_acquire_recursive>:
 8007d38:	4770      	bx	lr

08007d3a <__retarget_lock_release_recursive>:
 8007d3a:	4770      	bx	lr

08007d3c <__aeabi_memcpy>:
 8007d3c:	f000 b803 	b.w	8007d46 <memcpy>

08007d40 <__aeabi_memclr>:
 8007d40:	2200      	movs	r2, #0
 8007d42:	f000 bc17 	b.w	8008574 <__aeabi_memset>

08007d46 <memcpy>:
 8007d46:	440a      	add	r2, r1
 8007d48:	4291      	cmp	r1, r2
 8007d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d4e:	d100      	bne.n	8007d52 <memcpy+0xc>
 8007d50:	4770      	bx	lr
 8007d52:	b510      	push	{r4, lr}
 8007d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d58:	4291      	cmp	r1, r2
 8007d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d5e:	d1f9      	bne.n	8007d54 <memcpy+0xe>
 8007d60:	bd10      	pop	{r4, pc}
	...

08007d64 <_free_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4605      	mov	r5, r0
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	d040      	beq.n	8007dee <_free_r+0x8a>
 8007d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d70:	1f0c      	subs	r4, r1, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bfb8      	it	lt
 8007d76:	18e4      	addlt	r4, r4, r3
 8007d78:	f000 f8de 	bl	8007f38 <__malloc_lock>
 8007d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007df0 <_free_r+0x8c>)
 8007d7e:	6813      	ldr	r3, [r2, #0]
 8007d80:	b933      	cbnz	r3, 8007d90 <_free_r+0x2c>
 8007d82:	6063      	str	r3, [r4, #4]
 8007d84:	6014      	str	r4, [r2, #0]
 8007d86:	4628      	mov	r0, r5
 8007d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d8c:	f000 b8da 	b.w	8007f44 <__malloc_unlock>
 8007d90:	42a3      	cmp	r3, r4
 8007d92:	d908      	bls.n	8007da6 <_free_r+0x42>
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	1821      	adds	r1, r4, r0
 8007d98:	428b      	cmp	r3, r1
 8007d9a:	bf01      	itttt	eq
 8007d9c:	6819      	ldreq	r1, [r3, #0]
 8007d9e:	685b      	ldreq	r3, [r3, #4]
 8007da0:	1809      	addeq	r1, r1, r0
 8007da2:	6021      	streq	r1, [r4, #0]
 8007da4:	e7ed      	b.n	8007d82 <_free_r+0x1e>
 8007da6:	461a      	mov	r2, r3
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	b10b      	cbz	r3, 8007db0 <_free_r+0x4c>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d9fa      	bls.n	8007da6 <_free_r+0x42>
 8007db0:	6811      	ldr	r1, [r2, #0]
 8007db2:	1850      	adds	r0, r2, r1
 8007db4:	42a0      	cmp	r0, r4
 8007db6:	d10b      	bne.n	8007dd0 <_free_r+0x6c>
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	4401      	add	r1, r0
 8007dbc:	1850      	adds	r0, r2, r1
 8007dbe:	4283      	cmp	r3, r0
 8007dc0:	6011      	str	r1, [r2, #0]
 8007dc2:	d1e0      	bne.n	8007d86 <_free_r+0x22>
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4408      	add	r0, r1
 8007dca:	6010      	str	r0, [r2, #0]
 8007dcc:	6053      	str	r3, [r2, #4]
 8007dce:	e7da      	b.n	8007d86 <_free_r+0x22>
 8007dd0:	d902      	bls.n	8007dd8 <_free_r+0x74>
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	e7d6      	b.n	8007d86 <_free_r+0x22>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	1821      	adds	r1, r4, r0
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	bf01      	itttt	eq
 8007de0:	6819      	ldreq	r1, [r3, #0]
 8007de2:	685b      	ldreq	r3, [r3, #4]
 8007de4:	1809      	addeq	r1, r1, r0
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	6054      	str	r4, [r2, #4]
 8007dec:	e7cb      	b.n	8007d86 <_free_r+0x22>
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	2000335c 	.word	0x2000335c

08007df4 <sbrk_aligned>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e34 <sbrk_aligned+0x40>)
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	b911      	cbnz	r1, 8007e06 <sbrk_aligned+0x12>
 8007e00:	f000 fba8 	bl	8008554 <_sbrk_r>
 8007e04:	6030      	str	r0, [r6, #0]
 8007e06:	4621      	mov	r1, r4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 fba3 	bl	8008554 <_sbrk_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d103      	bne.n	8007e1a <sbrk_aligned+0x26>
 8007e12:	f04f 34ff 	mov.w	r4, #4294967295
 8007e16:	4620      	mov	r0, r4
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	1cc4      	adds	r4, r0, #3
 8007e1c:	f024 0403 	bic.w	r4, r4, #3
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d0f8      	beq.n	8007e16 <sbrk_aligned+0x22>
 8007e24:	1a21      	subs	r1, r4, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fb94 	bl	8008554 <_sbrk_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d1f2      	bne.n	8007e16 <sbrk_aligned+0x22>
 8007e30:	e7ef      	b.n	8007e12 <sbrk_aligned+0x1e>
 8007e32:	bf00      	nop
 8007e34:	20003358 	.word	0x20003358

08007e38 <_malloc_r>:
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e3c:	1ccd      	adds	r5, r1, #3
 8007e3e:	f025 0503 	bic.w	r5, r5, #3
 8007e42:	3508      	adds	r5, #8
 8007e44:	2d0c      	cmp	r5, #12
 8007e46:	bf38      	it	cc
 8007e48:	250c      	movcc	r5, #12
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	db01      	blt.n	8007e54 <_malloc_r+0x1c>
 8007e50:	42a9      	cmp	r1, r5
 8007e52:	d904      	bls.n	8007e5e <_malloc_r+0x26>
 8007e54:	230c      	movs	r3, #12
 8007e56:	6033      	str	r3, [r6, #0]
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f34 <_malloc_r+0xfc>
 8007e62:	f000 f869 	bl	8007f38 <__malloc_lock>
 8007e66:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	bb44      	cbnz	r4, 8007ec0 <_malloc_r+0x88>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4630      	mov	r0, r6
 8007e72:	f7ff ffbf 	bl	8007df4 <sbrk_aligned>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	4604      	mov	r4, r0
 8007e7a:	d158      	bne.n	8007f2e <_malloc_r+0xf6>
 8007e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e80:	4627      	mov	r7, r4
 8007e82:	2f00      	cmp	r7, #0
 8007e84:	d143      	bne.n	8007f0e <_malloc_r+0xd6>
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	d04b      	beq.n	8007f22 <_malloc_r+0xea>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	eb04 0903 	add.w	r9, r4, r3
 8007e94:	f000 fb5e 	bl	8008554 <_sbrk_r>
 8007e98:	4581      	cmp	r9, r0
 8007e9a:	d142      	bne.n	8007f22 <_malloc_r+0xea>
 8007e9c:	6821      	ldr	r1, [r4, #0]
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	1a6d      	subs	r5, r5, r1
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7ff ffa6 	bl	8007df4 <sbrk_aligned>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d03a      	beq.n	8007f22 <_malloc_r+0xea>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	442b      	add	r3, r5
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	bb62      	cbnz	r2, 8007f14 <_malloc_r+0xdc>
 8007eba:	f8c8 7000 	str.w	r7, [r8]
 8007ebe:	e00f      	b.n	8007ee0 <_malloc_r+0xa8>
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	1b52      	subs	r2, r2, r5
 8007ec4:	d420      	bmi.n	8007f08 <_malloc_r+0xd0>
 8007ec6:	2a0b      	cmp	r2, #11
 8007ec8:	d917      	bls.n	8007efa <_malloc_r+0xc2>
 8007eca:	1961      	adds	r1, r4, r5
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	6025      	str	r5, [r4, #0]
 8007ed0:	bf18      	it	ne
 8007ed2:	6059      	strne	r1, [r3, #4]
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	bf08      	it	eq
 8007ed8:	f8c8 1000 	streq.w	r1, [r8]
 8007edc:	5162      	str	r2, [r4, r5]
 8007ede:	604b      	str	r3, [r1, #4]
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 f82f 	bl	8007f44 <__malloc_unlock>
 8007ee6:	f104 000b 	add.w	r0, r4, #11
 8007eea:	1d23      	adds	r3, r4, #4
 8007eec:	f020 0007 	bic.w	r0, r0, #7
 8007ef0:	1ac2      	subs	r2, r0, r3
 8007ef2:	bf1c      	itt	ne
 8007ef4:	1a1b      	subne	r3, r3, r0
 8007ef6:	50a3      	strne	r3, [r4, r2]
 8007ef8:	e7af      	b.n	8007e5a <_malloc_r+0x22>
 8007efa:	6862      	ldr	r2, [r4, #4]
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	bf0c      	ite	eq
 8007f00:	f8c8 2000 	streq.w	r2, [r8]
 8007f04:	605a      	strne	r2, [r3, #4]
 8007f06:	e7eb      	b.n	8007ee0 <_malloc_r+0xa8>
 8007f08:	4623      	mov	r3, r4
 8007f0a:	6864      	ldr	r4, [r4, #4]
 8007f0c:	e7ae      	b.n	8007e6c <_malloc_r+0x34>
 8007f0e:	463c      	mov	r4, r7
 8007f10:	687f      	ldr	r7, [r7, #4]
 8007f12:	e7b6      	b.n	8007e82 <_malloc_r+0x4a>
 8007f14:	461a      	mov	r2, r3
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	d1fb      	bne.n	8007f14 <_malloc_r+0xdc>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6053      	str	r3, [r2, #4]
 8007f20:	e7de      	b.n	8007ee0 <_malloc_r+0xa8>
 8007f22:	230c      	movs	r3, #12
 8007f24:	4630      	mov	r0, r6
 8007f26:	6033      	str	r3, [r6, #0]
 8007f28:	f000 f80c 	bl	8007f44 <__malloc_unlock>
 8007f2c:	e794      	b.n	8007e58 <_malloc_r+0x20>
 8007f2e:	6005      	str	r5, [r0, #0]
 8007f30:	e7d6      	b.n	8007ee0 <_malloc_r+0xa8>
 8007f32:	bf00      	nop
 8007f34:	2000335c 	.word	0x2000335c

08007f38 <__malloc_lock>:
 8007f38:	4801      	ldr	r0, [pc, #4]	@ (8007f40 <__malloc_lock+0x8>)
 8007f3a:	f7ff befd 	b.w	8007d38 <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	20003354 	.word	0x20003354

08007f44 <__malloc_unlock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	@ (8007f4c <__malloc_unlock+0x8>)
 8007f46:	f7ff bef8 	b.w	8007d3a <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	20003354 	.word	0x20003354

08007f50 <__ssputs_r>:
 8007f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	461f      	mov	r7, r3
 8007f56:	688e      	ldr	r6, [r1, #8]
 8007f58:	4682      	mov	sl, r0
 8007f5a:	42be      	cmp	r6, r7
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	4690      	mov	r8, r2
 8007f60:	680b      	ldr	r3, [r1, #0]
 8007f62:	d82d      	bhi.n	8007fc0 <__ssputs_r+0x70>
 8007f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f6c:	d026      	beq.n	8007fbc <__ssputs_r+0x6c>
 8007f6e:	6965      	ldr	r5, [r4, #20]
 8007f70:	6909      	ldr	r1, [r1, #16]
 8007f72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f76:	eba3 0901 	sub.w	r9, r3, r1
 8007f7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f7e:	1c7b      	adds	r3, r7, #1
 8007f80:	444b      	add	r3, r9
 8007f82:	106d      	asrs	r5, r5, #1
 8007f84:	429d      	cmp	r5, r3
 8007f86:	bf38      	it	cc
 8007f88:	461d      	movcc	r5, r3
 8007f8a:	0553      	lsls	r3, r2, #21
 8007f8c:	d527      	bpl.n	8007fde <__ssputs_r+0x8e>
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7ff ff52 	bl	8007e38 <_malloc_r>
 8007f94:	4606      	mov	r6, r0
 8007f96:	b360      	cbz	r0, 8007ff2 <__ssputs_r+0xa2>
 8007f98:	464a      	mov	r2, r9
 8007f9a:	6921      	ldr	r1, [r4, #16]
 8007f9c:	f7ff fed3 	bl	8007d46 <memcpy>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	6126      	str	r6, [r4, #16]
 8007fae:	444e      	add	r6, r9
 8007fb0:	6026      	str	r6, [r4, #0]
 8007fb2:	463e      	mov	r6, r7
 8007fb4:	6165      	str	r5, [r4, #20]
 8007fb6:	eba5 0509 	sub.w	r5, r5, r9
 8007fba:	60a5      	str	r5, [r4, #8]
 8007fbc:	42be      	cmp	r6, r7
 8007fbe:	d900      	bls.n	8007fc2 <__ssputs_r+0x72>
 8007fc0:	463e      	mov	r6, r7
 8007fc2:	4632      	mov	r2, r6
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	6820      	ldr	r0, [r4, #0]
 8007fc8:	f000 faaa 	bl	8008520 <memmove>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	1b9b      	subs	r3, r3, r6
 8007fd2:	60a3      	str	r3, [r4, #8]
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	4433      	add	r3, r6
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fde:	462a      	mov	r2, r5
 8007fe0:	f000 fadb 	bl	800859a <_realloc_r>
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d1e0      	bne.n	8007fac <__ssputs_r+0x5c>
 8007fea:	4650      	mov	r0, sl
 8007fec:	6921      	ldr	r1, [r4, #16]
 8007fee:	f7ff feb9 	bl	8007d64 <_free_r>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	f8ca 3000 	str.w	r3, [sl]
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	e7e9      	b.n	8007fda <__ssputs_r+0x8a>
	...

08008008 <_svfiprintf_r>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	4698      	mov	r8, r3
 800800e:	898b      	ldrh	r3, [r1, #12]
 8008010:	4607      	mov	r7, r0
 8008012:	061b      	lsls	r3, r3, #24
 8008014:	460d      	mov	r5, r1
 8008016:	4614      	mov	r4, r2
 8008018:	b09d      	sub	sp, #116	@ 0x74
 800801a:	d510      	bpl.n	800803e <_svfiprintf_r+0x36>
 800801c:	690b      	ldr	r3, [r1, #16]
 800801e:	b973      	cbnz	r3, 800803e <_svfiprintf_r+0x36>
 8008020:	2140      	movs	r1, #64	@ 0x40
 8008022:	f7ff ff09 	bl	8007e38 <_malloc_r>
 8008026:	6028      	str	r0, [r5, #0]
 8008028:	6128      	str	r0, [r5, #16]
 800802a:	b930      	cbnz	r0, 800803a <_svfiprintf_r+0x32>
 800802c:	230c      	movs	r3, #12
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
 8008034:	b01d      	add	sp, #116	@ 0x74
 8008036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803a:	2340      	movs	r3, #64	@ 0x40
 800803c:	616b      	str	r3, [r5, #20]
 800803e:	2300      	movs	r3, #0
 8008040:	9309      	str	r3, [sp, #36]	@ 0x24
 8008042:	2320      	movs	r3, #32
 8008044:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008048:	2330      	movs	r3, #48	@ 0x30
 800804a:	f04f 0901 	mov.w	r9, #1
 800804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008052:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80081ec <_svfiprintf_r+0x1e4>
 8008056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800805a:	4623      	mov	r3, r4
 800805c:	469a      	mov	sl, r3
 800805e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008062:	b10a      	cbz	r2, 8008068 <_svfiprintf_r+0x60>
 8008064:	2a25      	cmp	r2, #37	@ 0x25
 8008066:	d1f9      	bne.n	800805c <_svfiprintf_r+0x54>
 8008068:	ebba 0b04 	subs.w	fp, sl, r4
 800806c:	d00b      	beq.n	8008086 <_svfiprintf_r+0x7e>
 800806e:	465b      	mov	r3, fp
 8008070:	4622      	mov	r2, r4
 8008072:	4629      	mov	r1, r5
 8008074:	4638      	mov	r0, r7
 8008076:	f7ff ff6b 	bl	8007f50 <__ssputs_r>
 800807a:	3001      	adds	r0, #1
 800807c:	f000 80a7 	beq.w	80081ce <_svfiprintf_r+0x1c6>
 8008080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008082:	445a      	add	r2, fp
 8008084:	9209      	str	r2, [sp, #36]	@ 0x24
 8008086:	f89a 3000 	ldrb.w	r3, [sl]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 809f 	beq.w	80081ce <_svfiprintf_r+0x1c6>
 8008090:	2300      	movs	r3, #0
 8008092:	f04f 32ff 	mov.w	r2, #4294967295
 8008096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800809a:	f10a 0a01 	add.w	sl, sl, #1
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	9307      	str	r3, [sp, #28]
 80080a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80080a8:	4654      	mov	r4, sl
 80080aa:	2205      	movs	r2, #5
 80080ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b0:	484e      	ldr	r0, [pc, #312]	@ (80081ec <_svfiprintf_r+0x1e4>)
 80080b2:	f000 fa64 	bl	800857e <memchr>
 80080b6:	9a04      	ldr	r2, [sp, #16]
 80080b8:	b9d8      	cbnz	r0, 80080f2 <_svfiprintf_r+0xea>
 80080ba:	06d0      	lsls	r0, r2, #27
 80080bc:	bf44      	itt	mi
 80080be:	2320      	movmi	r3, #32
 80080c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c4:	0711      	lsls	r1, r2, #28
 80080c6:	bf44      	itt	mi
 80080c8:	232b      	movmi	r3, #43	@ 0x2b
 80080ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ce:	f89a 3000 	ldrb.w	r3, [sl]
 80080d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d4:	d015      	beq.n	8008102 <_svfiprintf_r+0xfa>
 80080d6:	4654      	mov	r4, sl
 80080d8:	2000      	movs	r0, #0
 80080da:	f04f 0c0a 	mov.w	ip, #10
 80080de:	9a07      	ldr	r2, [sp, #28]
 80080e0:	4621      	mov	r1, r4
 80080e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e6:	3b30      	subs	r3, #48	@ 0x30
 80080e8:	2b09      	cmp	r3, #9
 80080ea:	d94b      	bls.n	8008184 <_svfiprintf_r+0x17c>
 80080ec:	b1b0      	cbz	r0, 800811c <_svfiprintf_r+0x114>
 80080ee:	9207      	str	r2, [sp, #28]
 80080f0:	e014      	b.n	800811c <_svfiprintf_r+0x114>
 80080f2:	eba0 0308 	sub.w	r3, r0, r8
 80080f6:	fa09 f303 	lsl.w	r3, r9, r3
 80080fa:	4313      	orrs	r3, r2
 80080fc:	46a2      	mov	sl, r4
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	e7d2      	b.n	80080a8 <_svfiprintf_r+0xa0>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	1d19      	adds	r1, r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	9103      	str	r1, [sp, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfbb      	ittet	lt
 800810e:	425b      	neglt	r3, r3
 8008110:	f042 0202 	orrlt.w	r2, r2, #2
 8008114:	9307      	strge	r3, [sp, #28]
 8008116:	9307      	strlt	r3, [sp, #28]
 8008118:	bfb8      	it	lt
 800811a:	9204      	strlt	r2, [sp, #16]
 800811c:	7823      	ldrb	r3, [r4, #0]
 800811e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008120:	d10a      	bne.n	8008138 <_svfiprintf_r+0x130>
 8008122:	7863      	ldrb	r3, [r4, #1]
 8008124:	2b2a      	cmp	r3, #42	@ 0x2a
 8008126:	d132      	bne.n	800818e <_svfiprintf_r+0x186>
 8008128:	9b03      	ldr	r3, [sp, #12]
 800812a:	3402      	adds	r4, #2
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	9203      	str	r2, [sp, #12]
 8008132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008136:	9305      	str	r3, [sp, #20]
 8008138:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80081f0 <_svfiprintf_r+0x1e8>
 800813c:	2203      	movs	r2, #3
 800813e:	4650      	mov	r0, sl
 8008140:	7821      	ldrb	r1, [r4, #0]
 8008142:	f000 fa1c 	bl	800857e <memchr>
 8008146:	b138      	cbz	r0, 8008158 <_svfiprintf_r+0x150>
 8008148:	2240      	movs	r2, #64	@ 0x40
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	eba0 000a 	sub.w	r0, r0, sl
 8008150:	4082      	lsls	r2, r0
 8008152:	4313      	orrs	r3, r2
 8008154:	3401      	adds	r4, #1
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815c:	2206      	movs	r2, #6
 800815e:	4825      	ldr	r0, [pc, #148]	@ (80081f4 <_svfiprintf_r+0x1ec>)
 8008160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008164:	f000 fa0b 	bl	800857e <memchr>
 8008168:	2800      	cmp	r0, #0
 800816a:	d036      	beq.n	80081da <_svfiprintf_r+0x1d2>
 800816c:	4b22      	ldr	r3, [pc, #136]	@ (80081f8 <_svfiprintf_r+0x1f0>)
 800816e:	bb1b      	cbnz	r3, 80081b8 <_svfiprintf_r+0x1b0>
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	3307      	adds	r3, #7
 8008174:	f023 0307 	bic.w	r3, r3, #7
 8008178:	3308      	adds	r3, #8
 800817a:	9303      	str	r3, [sp, #12]
 800817c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817e:	4433      	add	r3, r6
 8008180:	9309      	str	r3, [sp, #36]	@ 0x24
 8008182:	e76a      	b.n	800805a <_svfiprintf_r+0x52>
 8008184:	460c      	mov	r4, r1
 8008186:	2001      	movs	r0, #1
 8008188:	fb0c 3202 	mla	r2, ip, r2, r3
 800818c:	e7a8      	b.n	80080e0 <_svfiprintf_r+0xd8>
 800818e:	2300      	movs	r3, #0
 8008190:	f04f 0c0a 	mov.w	ip, #10
 8008194:	4619      	mov	r1, r3
 8008196:	3401      	adds	r4, #1
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	4620      	mov	r0, r4
 800819c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a0:	3a30      	subs	r2, #48	@ 0x30
 80081a2:	2a09      	cmp	r2, #9
 80081a4:	d903      	bls.n	80081ae <_svfiprintf_r+0x1a6>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0c6      	beq.n	8008138 <_svfiprintf_r+0x130>
 80081aa:	9105      	str	r1, [sp, #20]
 80081ac:	e7c4      	b.n	8008138 <_svfiprintf_r+0x130>
 80081ae:	4604      	mov	r4, r0
 80081b0:	2301      	movs	r3, #1
 80081b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b6:	e7f0      	b.n	800819a <_svfiprintf_r+0x192>
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	462a      	mov	r2, r5
 80081be:	4638      	mov	r0, r7
 80081c0:	4b0e      	ldr	r3, [pc, #56]	@ (80081fc <_svfiprintf_r+0x1f4>)
 80081c2:	a904      	add	r1, sp, #16
 80081c4:	f3af 8000 	nop.w
 80081c8:	1c42      	adds	r2, r0, #1
 80081ca:	4606      	mov	r6, r0
 80081cc:	d1d6      	bne.n	800817c <_svfiprintf_r+0x174>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	065b      	lsls	r3, r3, #25
 80081d2:	f53f af2d 	bmi.w	8008030 <_svfiprintf_r+0x28>
 80081d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081d8:	e72c      	b.n	8008034 <_svfiprintf_r+0x2c>
 80081da:	ab03      	add	r3, sp, #12
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	462a      	mov	r2, r5
 80081e0:	4638      	mov	r0, r7
 80081e2:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <_svfiprintf_r+0x1f4>)
 80081e4:	a904      	add	r1, sp, #16
 80081e6:	f000 f87d 	bl	80082e4 <_printf_i>
 80081ea:	e7ed      	b.n	80081c8 <_svfiprintf_r+0x1c0>
 80081ec:	08008b83 	.word	0x08008b83
 80081f0:	08008b89 	.word	0x08008b89
 80081f4:	08008b8d 	.word	0x08008b8d
 80081f8:	00000000 	.word	0x00000000
 80081fc:	08007f51 	.word	0x08007f51

08008200 <_printf_common>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	4616      	mov	r6, r2
 8008206:	4698      	mov	r8, r3
 8008208:	688a      	ldr	r2, [r1, #8]
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	4607      	mov	r7, r0
 800820e:	4293      	cmp	r3, r2
 8008210:	bfb8      	it	lt
 8008212:	4613      	movlt	r3, r2
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800821a:	460c      	mov	r4, r1
 800821c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008220:	b10a      	cbz	r2, 8008226 <_printf_common+0x26>
 8008222:	3301      	adds	r3, #1
 8008224:	6033      	str	r3, [r6, #0]
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	0699      	lsls	r1, r3, #26
 800822a:	bf42      	ittt	mi
 800822c:	6833      	ldrmi	r3, [r6, #0]
 800822e:	3302      	addmi	r3, #2
 8008230:	6033      	strmi	r3, [r6, #0]
 8008232:	6825      	ldr	r5, [r4, #0]
 8008234:	f015 0506 	ands.w	r5, r5, #6
 8008238:	d106      	bne.n	8008248 <_printf_common+0x48>
 800823a:	f104 0a19 	add.w	sl, r4, #25
 800823e:	68e3      	ldr	r3, [r4, #12]
 8008240:	6832      	ldr	r2, [r6, #0]
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	42ab      	cmp	r3, r5
 8008246:	dc2b      	bgt.n	80082a0 <_printf_common+0xa0>
 8008248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	3b00      	subs	r3, #0
 8008250:	bf18      	it	ne
 8008252:	2301      	movne	r3, #1
 8008254:	0692      	lsls	r2, r2, #26
 8008256:	d430      	bmi.n	80082ba <_printf_common+0xba>
 8008258:	4641      	mov	r1, r8
 800825a:	4638      	mov	r0, r7
 800825c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008260:	47c8      	blx	r9
 8008262:	3001      	adds	r0, #1
 8008264:	d023      	beq.n	80082ae <_printf_common+0xae>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	f003 0306 	and.w	r3, r3, #6
 800826e:	2b04      	cmp	r3, #4
 8008270:	bf14      	ite	ne
 8008272:	2500      	movne	r5, #0
 8008274:	6833      	ldreq	r3, [r6, #0]
 8008276:	f04f 0600 	mov.w	r6, #0
 800827a:	bf08      	it	eq
 800827c:	68e5      	ldreq	r5, [r4, #12]
 800827e:	f104 041a 	add.w	r4, r4, #26
 8008282:	bf08      	it	eq
 8008284:	1aed      	subeq	r5, r5, r3
 8008286:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800828a:	bf08      	it	eq
 800828c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008290:	4293      	cmp	r3, r2
 8008292:	bfc4      	itt	gt
 8008294:	1a9b      	subgt	r3, r3, r2
 8008296:	18ed      	addgt	r5, r5, r3
 8008298:	42b5      	cmp	r5, r6
 800829a:	d11a      	bne.n	80082d2 <_printf_common+0xd2>
 800829c:	2000      	movs	r0, #0
 800829e:	e008      	b.n	80082b2 <_printf_common+0xb2>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4652      	mov	r2, sl
 80082a4:	4641      	mov	r1, r8
 80082a6:	4638      	mov	r0, r7
 80082a8:	47c8      	blx	r9
 80082aa:	3001      	adds	r0, #1
 80082ac:	d103      	bne.n	80082b6 <_printf_common+0xb6>
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	3501      	adds	r5, #1
 80082b8:	e7c1      	b.n	800823e <_printf_common+0x3e>
 80082ba:	2030      	movs	r0, #48	@ 0x30
 80082bc:	18e1      	adds	r1, r4, r3
 80082be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082c8:	4422      	add	r2, r4
 80082ca:	3302      	adds	r3, #2
 80082cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082d0:	e7c2      	b.n	8008258 <_printf_common+0x58>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4622      	mov	r2, r4
 80082d6:	4641      	mov	r1, r8
 80082d8:	4638      	mov	r0, r7
 80082da:	47c8      	blx	r9
 80082dc:	3001      	adds	r0, #1
 80082de:	d0e6      	beq.n	80082ae <_printf_common+0xae>
 80082e0:	3601      	adds	r6, #1
 80082e2:	e7d9      	b.n	8008298 <_printf_common+0x98>

080082e4 <_printf_i>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	7e0f      	ldrb	r7, [r1, #24]
 80082ea:	4691      	mov	r9, r2
 80082ec:	2f78      	cmp	r7, #120	@ 0x78
 80082ee:	4680      	mov	r8, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	469a      	mov	sl, r3
 80082f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082fa:	d807      	bhi.n	800830c <_printf_i+0x28>
 80082fc:	2f62      	cmp	r7, #98	@ 0x62
 80082fe:	d80a      	bhi.n	8008316 <_printf_i+0x32>
 8008300:	2f00      	cmp	r7, #0
 8008302:	f000 80d1 	beq.w	80084a8 <_printf_i+0x1c4>
 8008306:	2f58      	cmp	r7, #88	@ 0x58
 8008308:	f000 80b8 	beq.w	800847c <_printf_i+0x198>
 800830c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008314:	e03a      	b.n	800838c <_printf_i+0xa8>
 8008316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800831a:	2b15      	cmp	r3, #21
 800831c:	d8f6      	bhi.n	800830c <_printf_i+0x28>
 800831e:	a101      	add	r1, pc, #4	@ (adr r1, 8008324 <_printf_i+0x40>)
 8008320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008391 	.word	0x08008391
 800832c:	0800830d 	.word	0x0800830d
 8008330:	0800830d 	.word	0x0800830d
 8008334:	0800830d 	.word	0x0800830d
 8008338:	0800830d 	.word	0x0800830d
 800833c:	08008391 	.word	0x08008391
 8008340:	0800830d 	.word	0x0800830d
 8008344:	0800830d 	.word	0x0800830d
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	0800848f 	.word	0x0800848f
 8008354:	080083bb 	.word	0x080083bb
 8008358:	08008449 	.word	0x08008449
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	080084b1 	.word	0x080084b1
 8008368:	0800830d 	.word	0x0800830d
 800836c:	080083bb 	.word	0x080083bb
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008451 	.word	0x08008451
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6032      	str	r2, [r6, #0]
 8008384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e09c      	b.n	80084ca <_printf_i+0x1e6>
 8008390:	6833      	ldr	r3, [r6, #0]
 8008392:	6820      	ldr	r0, [r4, #0]
 8008394:	1d19      	adds	r1, r3, #4
 8008396:	6031      	str	r1, [r6, #0]
 8008398:	0606      	lsls	r6, r0, #24
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0xbc>
 800839c:	681d      	ldr	r5, [r3, #0]
 800839e:	e003      	b.n	80083a8 <_printf_i+0xc4>
 80083a0:	0645      	lsls	r5, r0, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0xb8>
 80083a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	da03      	bge.n	80083b4 <_printf_i+0xd0>
 80083ac:	232d      	movs	r3, #45	@ 0x2d
 80083ae:	426d      	negs	r5, r5
 80083b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083b4:	230a      	movs	r3, #10
 80083b6:	4858      	ldr	r0, [pc, #352]	@ (8008518 <_printf_i+0x234>)
 80083b8:	e011      	b.n	80083de <_printf_i+0xfa>
 80083ba:	6821      	ldr	r1, [r4, #0]
 80083bc:	6833      	ldr	r3, [r6, #0]
 80083be:	0608      	lsls	r0, r1, #24
 80083c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083c4:	d402      	bmi.n	80083cc <_printf_i+0xe8>
 80083c6:	0649      	lsls	r1, r1, #25
 80083c8:	bf48      	it	mi
 80083ca:	b2ad      	uxthmi	r5, r5
 80083cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	bf14      	ite	ne
 80083d2:	230a      	movne	r3, #10
 80083d4:	2308      	moveq	r3, #8
 80083d6:	4850      	ldr	r0, [pc, #320]	@ (8008518 <_printf_i+0x234>)
 80083d8:	2100      	movs	r1, #0
 80083da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083de:	6866      	ldr	r6, [r4, #4]
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	60a6      	str	r6, [r4, #8]
 80083e4:	db05      	blt.n	80083f2 <_printf_i+0x10e>
 80083e6:	6821      	ldr	r1, [r4, #0]
 80083e8:	432e      	orrs	r6, r5
 80083ea:	f021 0104 	bic.w	r1, r1, #4
 80083ee:	6021      	str	r1, [r4, #0]
 80083f0:	d04b      	beq.n	800848a <_printf_i+0x1a6>
 80083f2:	4616      	mov	r6, r2
 80083f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80083f8:	fb03 5711 	mls	r7, r3, r1, r5
 80083fc:	5dc7      	ldrb	r7, [r0, r7]
 80083fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008402:	462f      	mov	r7, r5
 8008404:	42bb      	cmp	r3, r7
 8008406:	460d      	mov	r5, r1
 8008408:	d9f4      	bls.n	80083f4 <_printf_i+0x110>
 800840a:	2b08      	cmp	r3, #8
 800840c:	d10b      	bne.n	8008426 <_printf_i+0x142>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	07df      	lsls	r7, r3, #31
 8008412:	d508      	bpl.n	8008426 <_printf_i+0x142>
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	6861      	ldr	r1, [r4, #4]
 8008418:	4299      	cmp	r1, r3
 800841a:	bfde      	ittt	le
 800841c:	2330      	movle	r3, #48	@ 0x30
 800841e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008422:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008426:	1b92      	subs	r2, r2, r6
 8008428:	6122      	str	r2, [r4, #16]
 800842a:	464b      	mov	r3, r9
 800842c:	4621      	mov	r1, r4
 800842e:	4640      	mov	r0, r8
 8008430:	f8cd a000 	str.w	sl, [sp]
 8008434:	aa03      	add	r2, sp, #12
 8008436:	f7ff fee3 	bl	8008200 <_printf_common>
 800843a:	3001      	adds	r0, #1
 800843c:	d14a      	bne.n	80084d4 <_printf_i+0x1f0>
 800843e:	f04f 30ff 	mov.w	r0, #4294967295
 8008442:	b004      	add	sp, #16
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f043 0320 	orr.w	r3, r3, #32
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	2778      	movs	r7, #120	@ 0x78
 8008452:	4832      	ldr	r0, [pc, #200]	@ (800851c <_printf_i+0x238>)
 8008454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6831      	ldr	r1, [r6, #0]
 800845c:	061f      	lsls	r7, r3, #24
 800845e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008462:	d402      	bmi.n	800846a <_printf_i+0x186>
 8008464:	065f      	lsls	r7, r3, #25
 8008466:	bf48      	it	mi
 8008468:	b2ad      	uxthmi	r5, r5
 800846a:	6031      	str	r1, [r6, #0]
 800846c:	07d9      	lsls	r1, r3, #31
 800846e:	bf44      	itt	mi
 8008470:	f043 0320 	orrmi.w	r3, r3, #32
 8008474:	6023      	strmi	r3, [r4, #0]
 8008476:	b11d      	cbz	r5, 8008480 <_printf_i+0x19c>
 8008478:	2310      	movs	r3, #16
 800847a:	e7ad      	b.n	80083d8 <_printf_i+0xf4>
 800847c:	4826      	ldr	r0, [pc, #152]	@ (8008518 <_printf_i+0x234>)
 800847e:	e7e9      	b.n	8008454 <_printf_i+0x170>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	f023 0320 	bic.w	r3, r3, #32
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	e7f6      	b.n	8008478 <_printf_i+0x194>
 800848a:	4616      	mov	r6, r2
 800848c:	e7bd      	b.n	800840a <_printf_i+0x126>
 800848e:	6833      	ldr	r3, [r6, #0]
 8008490:	6825      	ldr	r5, [r4, #0]
 8008492:	1d18      	adds	r0, r3, #4
 8008494:	6961      	ldr	r1, [r4, #20]
 8008496:	6030      	str	r0, [r6, #0]
 8008498:	062e      	lsls	r6, r5, #24
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	d501      	bpl.n	80084a2 <_printf_i+0x1be>
 800849e:	6019      	str	r1, [r3, #0]
 80084a0:	e002      	b.n	80084a8 <_printf_i+0x1c4>
 80084a2:	0668      	lsls	r0, r5, #25
 80084a4:	d5fb      	bpl.n	800849e <_printf_i+0x1ba>
 80084a6:	8019      	strh	r1, [r3, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	4616      	mov	r6, r2
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	e7bc      	b.n	800842a <_printf_i+0x146>
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	2100      	movs	r1, #0
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	6032      	str	r2, [r6, #0]
 80084b8:	681e      	ldr	r6, [r3, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	4630      	mov	r0, r6
 80084be:	f000 f85e 	bl	800857e <memchr>
 80084c2:	b108      	cbz	r0, 80084c8 <_printf_i+0x1e4>
 80084c4:	1b80      	subs	r0, r0, r6
 80084c6:	6060      	str	r0, [r4, #4]
 80084c8:	6863      	ldr	r3, [r4, #4]
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	2300      	movs	r3, #0
 80084ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084d2:	e7aa      	b.n	800842a <_printf_i+0x146>
 80084d4:	4632      	mov	r2, r6
 80084d6:	4649      	mov	r1, r9
 80084d8:	4640      	mov	r0, r8
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	47d0      	blx	sl
 80084de:	3001      	adds	r0, #1
 80084e0:	d0ad      	beq.n	800843e <_printf_i+0x15a>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	079b      	lsls	r3, r3, #30
 80084e6:	d413      	bmi.n	8008510 <_printf_i+0x22c>
 80084e8:	68e0      	ldr	r0, [r4, #12]
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	4298      	cmp	r0, r3
 80084ee:	bfb8      	it	lt
 80084f0:	4618      	movlt	r0, r3
 80084f2:	e7a6      	b.n	8008442 <_printf_i+0x15e>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4632      	mov	r2, r6
 80084f8:	4649      	mov	r1, r9
 80084fa:	4640      	mov	r0, r8
 80084fc:	47d0      	blx	sl
 80084fe:	3001      	adds	r0, #1
 8008500:	d09d      	beq.n	800843e <_printf_i+0x15a>
 8008502:	3501      	adds	r5, #1
 8008504:	68e3      	ldr	r3, [r4, #12]
 8008506:	9903      	ldr	r1, [sp, #12]
 8008508:	1a5b      	subs	r3, r3, r1
 800850a:	42ab      	cmp	r3, r5
 800850c:	dcf2      	bgt.n	80084f4 <_printf_i+0x210>
 800850e:	e7eb      	b.n	80084e8 <_printf_i+0x204>
 8008510:	2500      	movs	r5, #0
 8008512:	f104 0619 	add.w	r6, r4, #25
 8008516:	e7f5      	b.n	8008504 <_printf_i+0x220>
 8008518:	08008b94 	.word	0x08008b94
 800851c:	08008ba5 	.word	0x08008ba5

08008520 <memmove>:
 8008520:	4288      	cmp	r0, r1
 8008522:	b510      	push	{r4, lr}
 8008524:	eb01 0402 	add.w	r4, r1, r2
 8008528:	d902      	bls.n	8008530 <memmove+0x10>
 800852a:	4284      	cmp	r4, r0
 800852c:	4623      	mov	r3, r4
 800852e:	d807      	bhi.n	8008540 <memmove+0x20>
 8008530:	1e43      	subs	r3, r0, #1
 8008532:	42a1      	cmp	r1, r4
 8008534:	d008      	beq.n	8008548 <memmove+0x28>
 8008536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800853a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853e:	e7f8      	b.n	8008532 <memmove+0x12>
 8008540:	4601      	mov	r1, r0
 8008542:	4402      	add	r2, r0
 8008544:	428a      	cmp	r2, r1
 8008546:	d100      	bne.n	800854a <memmove+0x2a>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008552:	e7f7      	b.n	8008544 <memmove+0x24>

08008554 <_sbrk_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	2300      	movs	r3, #0
 8008558:	4d05      	ldr	r5, [pc, #20]	@ (8008570 <_sbrk_r+0x1c>)
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f7f9 fdca 	bl	80020f8 <_sbrk>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_sbrk_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_sbrk_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	20003350 	.word	0x20003350

08008574 <__aeabi_memset>:
 8008574:	4613      	mov	r3, r2
 8008576:	460a      	mov	r2, r1
 8008578:	4619      	mov	r1, r3
 800857a:	f7ff bb27 	b.w	8007bcc <memset>

0800857e <memchr>:
 800857e:	4603      	mov	r3, r0
 8008580:	b510      	push	{r4, lr}
 8008582:	b2c9      	uxtb	r1, r1
 8008584:	4402      	add	r2, r0
 8008586:	4293      	cmp	r3, r2
 8008588:	4618      	mov	r0, r3
 800858a:	d101      	bne.n	8008590 <memchr+0x12>
 800858c:	2000      	movs	r0, #0
 800858e:	e003      	b.n	8008598 <memchr+0x1a>
 8008590:	7804      	ldrb	r4, [r0, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	428c      	cmp	r4, r1
 8008596:	d1f6      	bne.n	8008586 <memchr+0x8>
 8008598:	bd10      	pop	{r4, pc}

0800859a <_realloc_r>:
 800859a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859e:	4607      	mov	r7, r0
 80085a0:	4614      	mov	r4, r2
 80085a2:	460d      	mov	r5, r1
 80085a4:	b921      	cbnz	r1, 80085b0 <_realloc_r+0x16>
 80085a6:	4611      	mov	r1, r2
 80085a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ac:	f7ff bc44 	b.w	8007e38 <_malloc_r>
 80085b0:	b92a      	cbnz	r2, 80085be <_realloc_r+0x24>
 80085b2:	f7ff fbd7 	bl	8007d64 <_free_r>
 80085b6:	4625      	mov	r5, r4
 80085b8:	4628      	mov	r0, r5
 80085ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085be:	f000 f81a 	bl	80085f6 <_malloc_usable_size_r>
 80085c2:	4284      	cmp	r4, r0
 80085c4:	4606      	mov	r6, r0
 80085c6:	d802      	bhi.n	80085ce <_realloc_r+0x34>
 80085c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085cc:	d8f4      	bhi.n	80085b8 <_realloc_r+0x1e>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff fc31 	bl	8007e38 <_malloc_r>
 80085d6:	4680      	mov	r8, r0
 80085d8:	b908      	cbnz	r0, 80085de <_realloc_r+0x44>
 80085da:	4645      	mov	r5, r8
 80085dc:	e7ec      	b.n	80085b8 <_realloc_r+0x1e>
 80085de:	42b4      	cmp	r4, r6
 80085e0:	4622      	mov	r2, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	bf28      	it	cs
 80085e6:	4632      	movcs	r2, r6
 80085e8:	f7ff fbad 	bl	8007d46 <memcpy>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4638      	mov	r0, r7
 80085f0:	f7ff fbb8 	bl	8007d64 <_free_r>
 80085f4:	e7f1      	b.n	80085da <_realloc_r+0x40>

080085f6 <_malloc_usable_size_r>:
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	1f18      	subs	r0, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfbc      	itt	lt
 8008600:	580b      	ldrlt	r3, [r1, r0]
 8008602:	18c0      	addlt	r0, r0, r3
 8008604:	4770      	bx	lr
	...

08008608 <_init>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	bf00      	nop
 800860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860e:	bc08      	pop	{r3}
 8008610:	469e      	mov	lr, r3
 8008612:	4770      	bx	lr

08008614 <_fini>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr
