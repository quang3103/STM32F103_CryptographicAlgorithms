
NUCLEO-F103RB_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00006100  2**2
                  ALLOC
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .API_SHARED   0000000c  08018000  08018000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00002234  0800100c  0800100c  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .mysection    00000054  0801800c  0801800c  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000070  08003240  08003240  00004240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080032b0  080032b0  00006060  2**0
                  CONTENTS, READONLY
  8 .ARM          00000000  080032b0  080032b0  00006060  2**0
                  CONTENTS, READONLY
  9 .preinit_array 00000000  080032b0  080032b0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  080032b0  080032b0  000042b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000004  080032b4  080032b4  000042b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         00000068  20000180  080032b8  00005180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000001b8  200001e8  08003320  000051e8  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  200003a0  08003320  000053a0  2**0
                  ALLOC
 15 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 16 .debug_info   00006ed0  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000159d  00000000  00000000  0000cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000006e8  00000000  00000000  0000e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000537  00000000  00000000  0000ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001788b  00000000  00000000  0000f117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00007fab  00000000  00000000  000269a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00083dec  00000000  00000000  0002e94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  000b2739  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000020c8  00000000  00000000  000b277c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000072  00000000  00000000  000b4844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c05      	ldr	r4, [pc, #20]	@ (8001024 <__do_global_dtors_aux+0x18>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	b933      	cbnz	r3, 8001022 <__do_global_dtors_aux+0x16>
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__do_global_dtors_aux+0x1c>)
 8001016:	b113      	cbz	r3, 800101e <__do_global_dtors_aux+0x12>
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <__do_global_dtors_aux+0x20>)
 800101a:	f3af 8000 	nop.w
 800101e:	2301      	movs	r3, #1
 8001020:	7023      	strb	r3, [r4, #0]
 8001022:	bd10      	pop	{r4, pc}
 8001024:	200001e8 	.word	0x200001e8
 8001028:	00000000 	.word	0x00000000
 800102c:	08003228 	.word	0x08003228

08001030 <frame_dummy>:
 8001030:	b508      	push	{r3, lr}
 8001032:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <frame_dummy+0x10>)
 8001034:	b11b      	cbz	r3, 800103e <frame_dummy+0xe>
 8001036:	4903      	ldr	r1, [pc, #12]	@ (8001044 <frame_dummy+0x14>)
 8001038:	4803      	ldr	r0, [pc, #12]	@ (8001048 <frame_dummy+0x18>)
 800103a:	f3af 8000 	nop.w
 800103e:	bd08      	pop	{r3, pc}
 8001040:	00000000 	.word	0x00000000
 8001044:	200001ec 	.word	0x200001ec
 8001048:	08003228 	.word	0x08003228

0800104c <go2APP>:
		TurnOn,
		TurnOff
};

void go2APP(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	//check if there is something "installed" in the app FLASH region
	if(((*(uint32_t*) FLASH_APP_ADDR) & 0x2FFE0000) == 0x20000000)
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <go2APP+0x4c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <go2APP+0x50>)
 8001058:	4013      	ands	r3, r2
 800105a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800105e:	d114      	bne.n	800108a <go2APP+0x3e>
	{
		printf("Preparing to jump to App ...\r\n");
 8001060:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <go2APP+0x54>)
 8001062:	f001 fd53 	bl	8002b0c <puts>
		HAL_Delay(100);
 8001066:	2064      	movs	r0, #100	@ 0x64
 8001068:	f000 fafa 	bl	8001660 <HAL_Delay>
		//jump to the application
		JumpAddress = *(uint32_t *) (FLASH_APP_ADDR + 4 );
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <go2APP+0x58>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pFunction) JumpAddress;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	60bb      	str	r3, [r7, #8]
		//initialize application's stack pointer
		__set_MSP(*(uint32_t *)FLASH_APP_ADDR);
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <go2APP+0x4c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f383 8808 	msr	MSP, r3
}
 8001082:	bf00      	nop
		Jump_To_Application();
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4798      	blx	r3
	else
	{
		//there is no application installed
		printf("No APP found\r\n");
	}
}
 8001088:	e002      	b.n	8001090 <go2APP+0x44>
		printf("No APP found\r\n");
 800108a:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <go2APP+0x5c>)
 800108c:	f001 fd3e 	bl	8002b0c <puts>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08008000 	.word	0x08008000
 800109c:	2ffe0000 	.word	0x2ffe0000
 80010a0:	08003240 	.word	0x08003240
 80010a4:	08008004 	.word	0x08008004
 80010a8:	08003260 	.word	0x08003260

080010ac <_write>:

int _write(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	1c4b      	adds	r3, r1, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <_write+0x3c>)
 80010ca:	f001 fa33 	bl	8002534 <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_write+0x12>
	}
	return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000204 	.word	0x20000204

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fa51 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f81b 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 f885 	bl	800120c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001102:	f000 f859 	bl	80011b8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("BOOTLOADER Start \r\n");
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <main+0x40>)
 8001108:	f001 fd00 	bl	8002b0c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (counter <= 2) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d808      	bhi.n	8001124 <main+0x38>
		  api.Blink(1000);
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <main+0x44>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111a:	4798      	blx	r3
		  counter+=1;
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	3301      	adds	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e7f3      	b.n	800110c <main+0x20>
	  }
	  else go2APP();
 8001124:	f7ff ff92 	bl	800104c <go2APP>
	  if (counter <= 2) {
 8001128:	e7f0      	b.n	800110c <main+0x20>
 800112a:	bf00      	nop
 800112c:	08003270 	.word	0x08003270
 8001130:	08018000 	.word	0x08018000

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	@ 0x40
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2228      	movs	r2, #40	@ 0x28
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fdc2 	bl	8002ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115a:	2301      	movs	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115e:	2310      	movs	r3, #16
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001166:	2300      	movs	r3, #0
 8001168:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800116a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800116e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fd7d 	bl	8001c74 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001180:	f000 f8b2 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001188:	2302      	movs	r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2102      	movs	r1, #2
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 ffea 	bl	8002178 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011aa:	f000 f89d 	bl	80012e8 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3740      	adds	r7, #64	@ 0x40
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f001 f950 	bl	8002494 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f875 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000204 	.word	0x20000204
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a2c      	ldr	r2, [pc, #176]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 800123e:	f043 0320 	orr.w	r3, r3, #32
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a20      	ldr	r2, [pc, #128]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_GPIO_Init+0xcc>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	4815      	ldr	r0, [pc, #84]	@ (80012dc <MX_GPIO_Init+0xd0>)
 8001286:	f000 fca1 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_GPIO_Init+0xd4>)
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	@ (80012e4 <MX_GPIO_Init+0xd8>)
 80012a0:	f000 fb10 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012a4:	2320      	movs	r3, #32
 80012a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <MX_GPIO_Init+0xd0>)
 80012bc:	f000 fb02 	bl	80018c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2028      	movs	r0, #40	@ 0x28
 80012c6:	f000 fac6 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ca:	2028      	movs	r0, #40	@ 0x28
 80012cc:	f000 fadf 	bl	800188e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40011000 	.word	0x40011000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <Error_Handler+0x8>

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <HAL_MspInit+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <HAL_MspInit+0x5c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_MspInit+0x60>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_MspInit+0x60>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000

08001358 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a15      	ldr	r2, [pc, #84]	@ (80013c8 <HAL_UART_MspInit+0x70>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d123      	bne.n	80013c0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_UART_MspInit+0x74>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <HAL_UART_MspInit+0x74>)
 800137e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001382:	61d3      	str	r3, [r2, #28]
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_UART_MspInit+0x74>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_UART_MspInit+0x74>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <HAL_UART_MspInit+0x74>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_UART_MspInit+0x74>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013a8:	230c      	movs	r3, #12
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <HAL_UART_MspInit+0x78>)
 80013bc:	f000 fa82 	bl	80018c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004400 	.word	0x40004400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f900 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001430:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001434:	f000 fbfc 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
  }

  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800149c:	605a      	str	r2, [r3, #4]
  return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <_isatty>:

int _isatty(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f001 fc2e 	bl	8002d68 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20005000 	.word	0x20005000
 8001538:	00000400 	.word	0x00000400
 800153c:	2000024c 	.word	0x2000024c
 8001540:	200003a0 	.word	0x200003a0

08001544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001550:	f7ff fff8 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001554:	480b      	ldr	r0, [pc, #44]	@ (8001584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001558:	4a0c      	ldr	r2, [pc, #48]	@ (800158c <LoopFillZerobss+0x16>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800156c:	4c09      	ldr	r4, [pc, #36]	@ (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f001 fbfb 	bl	8002d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157e:	f7ff fdb5 	bl	80010ec <main>
  bx lr
 8001582:	4770      	bx	lr
  ldr r0, =_sdata
 8001584:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8001588:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800158c:	080032b8 	.word	0x080032b8
  ldr r2, =_sbss
 8001590:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001594:	200003a0 	.word	0x200003a0

08001598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_2_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <HAL_Init+0x28>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <HAL_Init+0x28>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f947 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fe9c 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40022000 	.word	0x40022000

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f95f 	bl	80018aa <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f927 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000180 	.word	0x20000180
 8001620:	20000188 	.word	0x20000188
 8001624:	20000184 	.word	0x20000184

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a03      	ldr	r2, [pc, #12]	@ (8001648 <HAL_IncTick+0x20>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000188 	.word	0x20000188
 8001648:	20000250 	.word	0x20000250

0800164c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <HAL_GetTick+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000250 	.word	0x20000250

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff fff0 	bl	800164c <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffe0 	bl	800164c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000188 	.word	0x20000188

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4906      	ldr	r1, [pc, #24]	@ (8001740 <__NVIC_EnableIRQ+0x34>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff90 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	@ (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff2d 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff42 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff35 	bl	800170c <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b08b      	sub	sp, #44	@ 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e169      	b.n	8001bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d8:	2201      	movs	r2, #1
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8158 	bne.w	8001ba6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a9a      	ldr	r2, [pc, #616]	@ (8001b64 <HAL_GPIO_Init+0x2a0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d05e      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001900:	4a98      	ldr	r2, [pc, #608]	@ (8001b64 <HAL_GPIO_Init+0x2a0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d875      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 8001906:	4a98      	ldr	r2, [pc, #608]	@ (8001b68 <HAL_GPIO_Init+0x2a4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d058      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 800190c:	4a96      	ldr	r2, [pc, #600]	@ (8001b68 <HAL_GPIO_Init+0x2a4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d86f      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 8001912:	4a96      	ldr	r2, [pc, #600]	@ (8001b6c <HAL_GPIO_Init+0x2a8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d052      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001918:	4a94      	ldr	r2, [pc, #592]	@ (8001b6c <HAL_GPIO_Init+0x2a8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d869      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 800191e:	4a94      	ldr	r2, [pc, #592]	@ (8001b70 <HAL_GPIO_Init+0x2ac>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d04c      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001924:	4a92      	ldr	r2, [pc, #584]	@ (8001b70 <HAL_GPIO_Init+0x2ac>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d863      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 800192a:	4a92      	ldr	r2, [pc, #584]	@ (8001b74 <HAL_GPIO_Init+0x2b0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d046      	beq.n	80019be <HAL_GPIO_Init+0xfa>
 8001930:	4a90      	ldr	r2, [pc, #576]	@ (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d85d      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d82a      	bhi.n	8001990 <HAL_GPIO_Init+0xcc>
 800193a:	2b12      	cmp	r3, #18
 800193c:	d859      	bhi.n	80019f2 <HAL_GPIO_Init+0x12e>
 800193e:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <HAL_GPIO_Init+0x80>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	080019bf 	.word	0x080019bf
 8001948:	08001999 	.word	0x08001999
 800194c:	080019ab 	.word	0x080019ab
 8001950:	080019ed 	.word	0x080019ed
 8001954:	080019f3 	.word	0x080019f3
 8001958:	080019f3 	.word	0x080019f3
 800195c:	080019f3 	.word	0x080019f3
 8001960:	080019f3 	.word	0x080019f3
 8001964:	080019f3 	.word	0x080019f3
 8001968:	080019f3 	.word	0x080019f3
 800196c:	080019f3 	.word	0x080019f3
 8001970:	080019f3 	.word	0x080019f3
 8001974:	080019f3 	.word	0x080019f3
 8001978:	080019f3 	.word	0x080019f3
 800197c:	080019f3 	.word	0x080019f3
 8001980:	080019f3 	.word	0x080019f3
 8001984:	080019f3 	.word	0x080019f3
 8001988:	080019a1 	.word	0x080019a1
 800198c:	080019b5 	.word	0x080019b5
 8001990:	4a79      	ldr	r2, [pc, #484]	@ (8001b78 <HAL_GPIO_Init+0x2b4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001996:	e02c      	b.n	80019f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e029      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	3304      	adds	r3, #4
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e024      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	3308      	adds	r3, #8
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e01f      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	330c      	adds	r3, #12
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e01a      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c6:	2304      	movs	r3, #4
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e013      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	611a      	str	r2, [r3, #16]
          break;
 80019de:	e009      	b.n	80019f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	615a      	str	r2, [r3, #20]
          break;
 80019ea:	e003      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e000      	b.n	80019f4 <HAL_GPIO_Init+0x130>
          break;
 80019f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2bff      	cmp	r3, #255	@ 0xff
 80019f8:	d801      	bhi.n	80019fe <HAL_GPIO_Init+0x13a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	e001      	b.n	8001a02 <HAL_GPIO_Init+0x13e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3304      	adds	r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2bff      	cmp	r3, #255	@ 0xff
 8001a08:	d802      	bhi.n	8001a10 <HAL_GPIO_Init+0x14c>
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x152>
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	3b08      	subs	r3, #8
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80b1 	beq.w	8001ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a44:	4b4d      	ldr	r3, [pc, #308]	@ (8001b7c <HAL_GPIO_Init+0x2b8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a4c      	ldr	r2, [pc, #304]	@ (8001b7c <HAL_GPIO_Init+0x2b8>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_GPIO_Init+0x2b8>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a5c:	4a48      	ldr	r2, [pc, #288]	@ (8001b80 <HAL_GPIO_Init+0x2bc>)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a40      	ldr	r2, [pc, #256]	@ (8001b84 <HAL_GPIO_Init+0x2c0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_GPIO_Init+0x1ec>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b88 <HAL_GPIO_Init+0x2c4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x1e8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3e      	ldr	r2, [pc, #248]	@ (8001b8c <HAL_GPIO_Init+0x2c8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b90 <HAL_GPIO_Init+0x2cc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x1e0>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e006      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e004      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_GPIO_Init+0x1ee>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ac2:	492f      	ldr	r1, [pc, #188]	@ (8001b80 <HAL_GPIO_Init+0x2bc>)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001adc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	492c      	ldr	r1, [pc, #176]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4928      	ldr	r1, [pc, #160]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b04:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4922      	ldr	r1, [pc, #136]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	491e      	ldr	r1, [pc, #120]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4918      	ldr	r1, [pc, #96]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4914      	ldr	r1, [pc, #80]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d021      	beq.n	8001b98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	490e      	ldr	r1, [pc, #56]	@ (8001b94 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e021      	b.n	8001ba6 <HAL_GPIO_Init+0x2e2>
 8001b62:	bf00      	nop
 8001b64:	10320000 	.word	0x10320000
 8001b68:	10310000 	.word	0x10310000
 8001b6c:	10220000 	.word	0x10220000
 8001b70:	10210000 	.word	0x10210000
 8001b74:	10120000 	.word	0x10120000
 8001b78:	10110000 	.word	0x10110000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	40010800 	.word	0x40010800
 8001b88:	40010c00 	.word	0x40010c00
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	40011400 	.word	0x40011400
 8001b94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_GPIO_Init+0x304>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4909      	ldr	r1, [pc, #36]	@ (8001bc8 <HAL_GPIO_Init+0x304>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f ae8e 	bne.w	80018d8 <HAL_GPIO_Init+0x14>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	372c      	adds	r7, #44	@ 0x2c
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43d9      	mvns	r1, r3
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f806 	bl	8001c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e272      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b92      	ldr	r3, [pc, #584]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
 8001cac:	4b8c      	ldr	r3, [pc, #560]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x12c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e24c      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x76>
 8001cdc:	4b80      	ldr	r3, [pc, #512]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b78      	ldr	r3, [pc, #480]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a77      	ldr	r2, [pc, #476]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xbc>
 8001d16:	4b72      	ldr	r3, [pc, #456]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a71      	ldr	r2, [pc, #452]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d30:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b68      	ldr	r3, [pc, #416]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fc7c 	bl	800164c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fc78 	bl	800164c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e200      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe4>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc68 	bl	800164c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fc64 	bl	800164c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1ec      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x10c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dba:	4b49      	ldr	r3, [pc, #292]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
 8001dc6:	4b46      	ldr	r3, [pc, #280]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1c0      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4939      	ldr	r1, [pc, #228]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fc1d 	bl	800164c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fc19 	bl	800164c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1a1      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4927      	ldr	r1, [pc, #156]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fbfc 	bl	800164c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fbf8 	bl	800164c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e180      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d019      	beq.n	8001ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fbdc 	bl	800164c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbd8 	bl	800164c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e160      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 face 	bl	8002458 <RCC_Delay>
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fbc2 	bl	800164c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fbbe 	bl	800164c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e146      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	42420000 	.word	0x42420000
 8001ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b92      	ldr	r3, [pc, #584]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a6 	beq.w	8002052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b88      	ldr	r3, [pc, #544]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a87      	ldr	r2, [pc, #540]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b85      	ldr	r3, [pc, #532]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b82      	ldr	r3, [pc, #520]	@ (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7e      	ldr	r2, [pc, #504]	@ (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb7f 	bl	800164c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fb7b 	bl	800164c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	@ 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e103      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b75      	ldr	r3, [pc, #468]	@ (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x334>
 8001f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a69      	ldr	r2, [pc, #420]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b67      	ldr	r3, [pc, #412]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a66      	ldr	r2, [pc, #408]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	e01c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x356>
 8001fb0:	4b61      	ldr	r3, [pc, #388]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a60      	ldr	r2, [pc, #384]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fca:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a5a      	ldr	r2, [pc, #360]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b58      	ldr	r3, [pc, #352]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a57      	ldr	r2, [pc, #348]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb2f 	bl	800164c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fb2b 	bl	800164c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0b1      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ee      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x37e>
 8002014:	e014      	b.n	8002040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb19 	bl	800164c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fb15 	bl	800164c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e09b      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b40      	ldr	r3, [pc, #256]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8087 	beq.w	800216a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d061      	beq.n	800212c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d146      	bne.n	80020fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fae9 	bl	800164c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff fae5 	bl	800164c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e06d      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b29      	ldr	r3, [pc, #164]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a6:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4921      	ldr	r1, [pc, #132]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a19      	ldr	r1, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	430b      	orrs	r3, r1
 80020ca:	491b      	ldr	r1, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fab9 	bl	800164c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff fab5 	bl	800164c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e03d      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
 80020fc:	e035      	b.n	800216a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_RCC_OscConfig+0x4cc>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff faa2 	bl	800164c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fa9e 	bl	800164c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e026      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x498>
 800212a:	e01e      	b.n	800216a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e019      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_RCC_OscConfig+0x500>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0d0      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b6a      	ldr	r3, [pc, #424]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d910      	bls.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b67      	ldr	r3, [pc, #412]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4965      	ldr	r1, [pc, #404]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b63      	ldr	r3, [pc, #396]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b8      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b59      	ldr	r3, [pc, #356]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a58      	ldr	r2, [pc, #352]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ec:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b50      	ldr	r3, [pc, #320]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	494d      	ldr	r1, [pc, #308]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d040      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b47      	ldr	r3, [pc, #284]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e07f      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b41      	ldr	r3, [pc, #260]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e073      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b39      	ldr	r3, [pc, #228]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4936      	ldr	r1, [pc, #216]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff f9f0 	bl	800164c <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff f9ec 	bl	800164c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e053      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d210      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4922      	ldr	r1, [pc, #136]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e032      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4916      	ldr	r1, [pc, #88]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f2:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002306:	f000 f821 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	490a      	ldr	r1, [pc, #40]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a09      	ldr	r2, [pc, #36]	@ (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f94e 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	08003284 	.word	0x08003284
 8002344:	20000180 	.word	0x20000180
 8002348:	20000184 	.word	0x20000184

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002366:	4b1e      	ldr	r3, [pc, #120]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d002      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x30>
 8002376:	2b08      	cmp	r3, #8
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x36>
 800237a:	e027      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e027      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0c5b      	lsrs	r3, r3, #17
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	4a11      	ldr	r2, [pc, #68]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e004      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	693b      	ldr	r3, [r7, #16]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	0800329c 	.word	0x0800329c
 80023ec:	080032ac 	.word	0x080032ac
 80023f0:	003d0900 	.word	0x003d0900

080023f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b02      	ldr	r3, [pc, #8]	@ (8002404 <HAL_RCC_GetHCLKFreq+0x10>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20000180 	.word	0x20000180

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800240c:	f7ff fff2 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	@ (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	08003294 	.word	0x08003294

08002430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002434:	f7ff ffde 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0adb      	lsrs	r3, r3, #11
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	@ (8002454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	08003294 	.word	0x08003294

08002458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002460:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <RCC_Delay+0x34>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <RCC_Delay+0x38>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0a5b      	lsrs	r3, r3, #9
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002474:	bf00      	nop
  }
  while (Delay --);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	60fa      	str	r2, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f9      	bne.n	8002474 <RCC_Delay+0x1c>
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	20000180 	.word	0x20000180
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e042      	b.n	800252c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe ff4c 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	@ 0x24
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f971 	bl	80027c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800250c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b20      	cmp	r3, #32
 8002552:	d175      	bne.n	8002640 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_UART_Transmit+0x2c>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e06e      	b.n	8002642 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	@ 0x21
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002572:	f7ff f86b 	bl	800164c <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800258c:	d108      	bne.n	80025a0 <HAL_UART_Transmit+0x6c>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e003      	b.n	80025a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a8:	e02e      	b.n	8002608 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f848 	bl	800264a <UART_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e03a      	b.n	8002642 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3302      	adds	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e007      	b.n	80025fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3301      	adds	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1cb      	bne.n	80025aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	2140      	movs	r1, #64	@ 0x40
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f814 	bl	800264a <UART_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e006      	b.n	8002642 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800265a:	e03b      	b.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d037      	beq.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002664:	f7fe fff2 	bl	800164c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	429a      	cmp	r2, r3
 8002672:	d302      	bcc.n	800267a <UART_WaitOnFlagUntilTimeout+0x30>
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e03a      	b.n	80026f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b80      	cmp	r3, #128	@ 0x80
 8002690:	d020      	beq.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b40      	cmp	r3, #64	@ 0x40
 8002696:	d01d      	beq.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d116      	bne.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f81d 	bl	80026fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2208      	movs	r2, #8
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e00f      	b.n	80026f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4013      	ands	r3, r2
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d0b4      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b095      	sub	sp, #84	@ 0x54
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270e:	e853 3f00 	ldrex	r3, [r3]
 8002712:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	330c      	adds	r3, #12
 8002722:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002724:	643a      	str	r2, [r7, #64]	@ 0x40
 8002726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002728:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800272a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800272c:	e841 2300 	strex	r3, r2, [r1]
 8002730:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e5      	bne.n	8002704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3314      	adds	r3, #20
 800273e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	e853 3f00 	ldrex	r3, [r3]
 8002746:	61fb      	str	r3, [r7, #28]
   return(result);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002758:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800275a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800275e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002760:	e841 2300 	strex	r3, r2, [r1]
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e5      	bne.n	8002738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	2b01      	cmp	r3, #1
 8002772:	d119      	bne.n	80027a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	e853 3f00 	ldrex	r3, [r3]
 8002782:	60bb      	str	r3, [r7, #8]
   return(result);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f023 0310 	bic.w	r3, r3, #16
 800278a:	647b      	str	r3, [r7, #68]	@ 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002794:	61ba      	str	r2, [r7, #24]
 8002796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002798:	6979      	ldr	r1, [r7, #20]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	e841 2300 	strex	r3, r2, [r1]
 80027a0:	613b      	str	r3, [r7, #16]
   return(result);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e5      	bne.n	8002774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027b6:	bf00      	nop
 80027b8:	3754      	adds	r7, #84	@ 0x54
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027fa:	f023 030c 	bic.w	r3, r3, #12
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	430b      	orrs	r3, r1
 8002806:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2c      	ldr	r2, [pc, #176]	@ (80028d4 <UART_SetConfig+0x114>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002828:	f7ff fe02 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	e002      	b.n	8002836 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002830:	f7ff fdea 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8002834:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <UART_SetConfig+0x118>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	0119      	lsls	r1, r3, #4
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fbb2 f2f3 	udiv	r2, r2, r3
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <UART_SetConfig+0x118>)
 800286e:	fba3 0302 	umull	r0, r3, r3, r2
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2064      	movs	r0, #100	@ 0x64
 8002876:	fb00 f303 	mul.w	r3, r0, r3
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	3332      	adds	r3, #50	@ 0x32
 8002880:	4a15      	ldr	r2, [pc, #84]	@ (80028d8 <UART_SetConfig+0x118>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800288c:	4419      	add	r1, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <UART_SetConfig+0x118>)
 80028a6:	fba3 0302 	umull	r0, r3, r3, r2
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2064      	movs	r0, #100	@ 0x64
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	3332      	adds	r3, #50	@ 0x32
 80028b8:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <UART_SetConfig+0x118>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	440a      	add	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013800 	.word	0x40013800
 80028d8:	51eb851f 	.word	0x51eb851f

080028dc <std>:
 80028dc:	2300      	movs	r3, #0
 80028de:	b510      	push	{r4, lr}
 80028e0:	4604      	mov	r4, r0
 80028e2:	e9c0 3300 	strd	r3, r3, [r0]
 80028e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028ea:	6083      	str	r3, [r0, #8]
 80028ec:	8181      	strh	r1, [r0, #12]
 80028ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80028f0:	81c2      	strh	r2, [r0, #14]
 80028f2:	6183      	str	r3, [r0, #24]
 80028f4:	4619      	mov	r1, r3
 80028f6:	2208      	movs	r2, #8
 80028f8:	305c      	adds	r0, #92	@ 0x5c
 80028fa:	f000 f9e7 	bl	8002ccc <memset>
 80028fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002934 <std+0x58>)
 8002900:	6224      	str	r4, [r4, #32]
 8002902:	6263      	str	r3, [r4, #36]	@ 0x24
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <std+0x5c>)
 8002906:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <std+0x60>)
 800290a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <std+0x64>)
 800290e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <std+0x68>)
 8002912:	429c      	cmp	r4, r3
 8002914:	d006      	beq.n	8002924 <std+0x48>
 8002916:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800291a:	4294      	cmp	r4, r2
 800291c:	d002      	beq.n	8002924 <std+0x48>
 800291e:	33d0      	adds	r3, #208	@ 0xd0
 8002920:	429c      	cmp	r4, r3
 8002922:	d105      	bne.n	8002930 <std+0x54>
 8002924:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292c:	f000 ba46 	b.w	8002dbc <__retarget_lock_init_recursive>
 8002930:	bd10      	pop	{r4, pc}
 8002932:	bf00      	nop
 8002934:	08002b1d 	.word	0x08002b1d
 8002938:	08002b3f 	.word	0x08002b3f
 800293c:	08002b77 	.word	0x08002b77
 8002940:	08002b9b 	.word	0x08002b9b
 8002944:	20000254 	.word	0x20000254

08002948 <stdio_exit_handler>:
 8002948:	4a02      	ldr	r2, [pc, #8]	@ (8002954 <stdio_exit_handler+0xc>)
 800294a:	4903      	ldr	r1, [pc, #12]	@ (8002958 <stdio_exit_handler+0x10>)
 800294c:	4803      	ldr	r0, [pc, #12]	@ (800295c <stdio_exit_handler+0x14>)
 800294e:	f000 b869 	b.w	8002a24 <_fwalk_sglue>
 8002952:	bf00      	nop
 8002954:	2000018c 	.word	0x2000018c
 8002958:	080030b1 	.word	0x080030b1
 800295c:	2000019c 	.word	0x2000019c

08002960 <cleanup_stdio>:
 8002960:	6841      	ldr	r1, [r0, #4]
 8002962:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <cleanup_stdio+0x34>)
 8002964:	b510      	push	{r4, lr}
 8002966:	4299      	cmp	r1, r3
 8002968:	4604      	mov	r4, r0
 800296a:	d001      	beq.n	8002970 <cleanup_stdio+0x10>
 800296c:	f000 fba0 	bl	80030b0 <_fflush_r>
 8002970:	68a1      	ldr	r1, [r4, #8]
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <cleanup_stdio+0x38>)
 8002974:	4299      	cmp	r1, r3
 8002976:	d002      	beq.n	800297e <cleanup_stdio+0x1e>
 8002978:	4620      	mov	r0, r4
 800297a:	f000 fb99 	bl	80030b0 <_fflush_r>
 800297e:	68e1      	ldr	r1, [r4, #12]
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <cleanup_stdio+0x3c>)
 8002982:	4299      	cmp	r1, r3
 8002984:	d004      	beq.n	8002990 <cleanup_stdio+0x30>
 8002986:	4620      	mov	r0, r4
 8002988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800298c:	f000 bb90 	b.w	80030b0 <_fflush_r>
 8002990:	bd10      	pop	{r4, pc}
 8002992:	bf00      	nop
 8002994:	20000254 	.word	0x20000254
 8002998:	200002bc 	.word	0x200002bc
 800299c:	20000324 	.word	0x20000324

080029a0 <global_stdio_init.part.0>:
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <global_stdio_init.part.0+0x30>)
 80029a4:	4c0b      	ldr	r4, [pc, #44]	@ (80029d4 <global_stdio_init.part.0+0x34>)
 80029a6:	4a0c      	ldr	r2, [pc, #48]	@ (80029d8 <global_stdio_init.part.0+0x38>)
 80029a8:	4620      	mov	r0, r4
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	2104      	movs	r1, #4
 80029ae:	2200      	movs	r2, #0
 80029b0:	f7ff ff94 	bl	80028dc <std>
 80029b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80029b8:	2201      	movs	r2, #1
 80029ba:	2109      	movs	r1, #9
 80029bc:	f7ff ff8e 	bl	80028dc <std>
 80029c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80029c4:	2202      	movs	r2, #2
 80029c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ca:	2112      	movs	r1, #18
 80029cc:	f7ff bf86 	b.w	80028dc <std>
 80029d0:	2000038c 	.word	0x2000038c
 80029d4:	20000254 	.word	0x20000254
 80029d8:	08002949 	.word	0x08002949

080029dc <__sfp_lock_acquire>:
 80029dc:	4801      	ldr	r0, [pc, #4]	@ (80029e4 <__sfp_lock_acquire+0x8>)
 80029de:	f000 b9ee 	b.w	8002dbe <__retarget_lock_acquire_recursive>
 80029e2:	bf00      	nop
 80029e4:	20000395 	.word	0x20000395

080029e8 <__sfp_lock_release>:
 80029e8:	4801      	ldr	r0, [pc, #4]	@ (80029f0 <__sfp_lock_release+0x8>)
 80029ea:	f000 b9e9 	b.w	8002dc0 <__retarget_lock_release_recursive>
 80029ee:	bf00      	nop
 80029f0:	20000395 	.word	0x20000395

080029f4 <__sinit>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4604      	mov	r4, r0
 80029f8:	f7ff fff0 	bl	80029dc <__sfp_lock_acquire>
 80029fc:	6a23      	ldr	r3, [r4, #32]
 80029fe:	b11b      	cbz	r3, 8002a08 <__sinit+0x14>
 8002a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a04:	f7ff bff0 	b.w	80029e8 <__sfp_lock_release>
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <__sinit+0x28>)
 8002a0a:	6223      	str	r3, [r4, #32]
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__sinit+0x2c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f5      	bne.n	8002a00 <__sinit+0xc>
 8002a14:	f7ff ffc4 	bl	80029a0 <global_stdio_init.part.0>
 8002a18:	e7f2      	b.n	8002a00 <__sinit+0xc>
 8002a1a:	bf00      	nop
 8002a1c:	08002961 	.word	0x08002961
 8002a20:	2000038c 	.word	0x2000038c

08002a24 <_fwalk_sglue>:
 8002a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a28:	4607      	mov	r7, r0
 8002a2a:	4688      	mov	r8, r1
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	2600      	movs	r6, #0
 8002a30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a34:	f1b9 0901 	subs.w	r9, r9, #1
 8002a38:	d505      	bpl.n	8002a46 <_fwalk_sglue+0x22>
 8002a3a:	6824      	ldr	r4, [r4, #0]
 8002a3c:	2c00      	cmp	r4, #0
 8002a3e:	d1f7      	bne.n	8002a30 <_fwalk_sglue+0xc>
 8002a40:	4630      	mov	r0, r6
 8002a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a46:	89ab      	ldrh	r3, [r5, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d907      	bls.n	8002a5c <_fwalk_sglue+0x38>
 8002a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a50:	3301      	adds	r3, #1
 8002a52:	d003      	beq.n	8002a5c <_fwalk_sglue+0x38>
 8002a54:	4629      	mov	r1, r5
 8002a56:	4638      	mov	r0, r7
 8002a58:	47c0      	blx	r8
 8002a5a:	4306      	orrs	r6, r0
 8002a5c:	3568      	adds	r5, #104	@ 0x68
 8002a5e:	e7e9      	b.n	8002a34 <_fwalk_sglue+0x10>

08002a60 <_puts_r>:
 8002a60:	6a03      	ldr	r3, [r0, #32]
 8002a62:	b570      	push	{r4, r5, r6, lr}
 8002a64:	4605      	mov	r5, r0
 8002a66:	460e      	mov	r6, r1
 8002a68:	6884      	ldr	r4, [r0, #8]
 8002a6a:	b90b      	cbnz	r3, 8002a70 <_puts_r+0x10>
 8002a6c:	f7ff ffc2 	bl	80029f4 <__sinit>
 8002a70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a72:	07db      	lsls	r3, r3, #31
 8002a74:	d405      	bmi.n	8002a82 <_puts_r+0x22>
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	0598      	lsls	r0, r3, #22
 8002a7a:	d402      	bmi.n	8002a82 <_puts_r+0x22>
 8002a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a7e:	f000 f99e 	bl	8002dbe <__retarget_lock_acquire_recursive>
 8002a82:	89a3      	ldrh	r3, [r4, #12]
 8002a84:	0719      	lsls	r1, r3, #28
 8002a86:	d502      	bpl.n	8002a8e <_puts_r+0x2e>
 8002a88:	6923      	ldr	r3, [r4, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d135      	bne.n	8002afa <_puts_r+0x9a>
 8002a8e:	4621      	mov	r1, r4
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 f8c5 	bl	8002c20 <__swsetup_r>
 8002a96:	b380      	cbz	r0, 8002afa <_puts_r+0x9a>
 8002a98:	f04f 35ff 	mov.w	r5, #4294967295
 8002a9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a9e:	07da      	lsls	r2, r3, #31
 8002aa0:	d405      	bmi.n	8002aae <_puts_r+0x4e>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	059b      	lsls	r3, r3, #22
 8002aa6:	d402      	bmi.n	8002aae <_puts_r+0x4e>
 8002aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002aaa:	f000 f989 	bl	8002dc0 <__retarget_lock_release_recursive>
 8002aae:	4628      	mov	r0, r5
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da04      	bge.n	8002ac0 <_puts_r+0x60>
 8002ab6:	69a2      	ldr	r2, [r4, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dc17      	bgt.n	8002aec <_puts_r+0x8c>
 8002abc:	290a      	cmp	r1, #10
 8002abe:	d015      	beq.n	8002aec <_puts_r+0x8c>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	6022      	str	r2, [r4, #0]
 8002ac6:	7019      	strb	r1, [r3, #0]
 8002ac8:	68a3      	ldr	r3, [r4, #8]
 8002aca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60a3      	str	r3, [r4, #8]
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	d1ed      	bne.n	8002ab2 <_puts_r+0x52>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da11      	bge.n	8002afe <_puts_r+0x9e>
 8002ada:	4622      	mov	r2, r4
 8002adc:	210a      	movs	r1, #10
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 f85f 	bl	8002ba2 <__swbuf_r>
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d0d7      	beq.n	8002a98 <_puts_r+0x38>
 8002ae8:	250a      	movs	r5, #10
 8002aea:	e7d7      	b.n	8002a9c <_puts_r+0x3c>
 8002aec:	4622      	mov	r2, r4
 8002aee:	4628      	mov	r0, r5
 8002af0:	f000 f857 	bl	8002ba2 <__swbuf_r>
 8002af4:	3001      	adds	r0, #1
 8002af6:	d1e7      	bne.n	8002ac8 <_puts_r+0x68>
 8002af8:	e7ce      	b.n	8002a98 <_puts_r+0x38>
 8002afa:	3e01      	subs	r6, #1
 8002afc:	e7e4      	b.n	8002ac8 <_puts_r+0x68>
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	6022      	str	r2, [r4, #0]
 8002b04:	220a      	movs	r2, #10
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e7ee      	b.n	8002ae8 <_puts_r+0x88>
	...

08002b0c <puts>:
 8002b0c:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <puts+0xc>)
 8002b0e:	4601      	mov	r1, r0
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f7ff bfa5 	b.w	8002a60 <_puts_r>
 8002b16:	bf00      	nop
 8002b18:	20000198 	.word	0x20000198

08002b1c <__sread>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	460c      	mov	r4, r1
 8002b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b24:	f000 f8fc 	bl	8002d20 <_read_r>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	bfab      	itete	ge
 8002b2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b30:	181b      	addge	r3, r3, r0
 8002b32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b36:	bfac      	ite	ge
 8002b38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b3a:	81a3      	strhlt	r3, [r4, #12]
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <__swrite>:
 8002b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b42:	461f      	mov	r7, r3
 8002b44:	898b      	ldrh	r3, [r1, #12]
 8002b46:	4605      	mov	r5, r0
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	d505      	bpl.n	8002b5c <__swrite+0x1e>
 8002b50:	2302      	movs	r3, #2
 8002b52:	2200      	movs	r2, #0
 8002b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b58:	f000 f8d0 	bl	8002cfc <_lseek_r>
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	4632      	mov	r2, r6
 8002b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b64:	81a3      	strh	r3, [r4, #12]
 8002b66:	4628      	mov	r0, r5
 8002b68:	463b      	mov	r3, r7
 8002b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b72:	f000 b8e7 	b.w	8002d44 <_write_r>

08002b76 <__sseek>:
 8002b76:	b510      	push	{r4, lr}
 8002b78:	460c      	mov	r4, r1
 8002b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7e:	f000 f8bd 	bl	8002cfc <_lseek_r>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	bf15      	itete	ne
 8002b88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b92:	81a3      	strheq	r3, [r4, #12]
 8002b94:	bf18      	it	ne
 8002b96:	81a3      	strhne	r3, [r4, #12]
 8002b98:	bd10      	pop	{r4, pc}

08002b9a <__sclose>:
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 b89d 	b.w	8002cdc <_close_r>

08002ba2 <__swbuf_r>:
 8002ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba4:	460e      	mov	r6, r1
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	4605      	mov	r5, r0
 8002baa:	b118      	cbz	r0, 8002bb4 <__swbuf_r+0x12>
 8002bac:	6a03      	ldr	r3, [r0, #32]
 8002bae:	b90b      	cbnz	r3, 8002bb4 <__swbuf_r+0x12>
 8002bb0:	f7ff ff20 	bl	80029f4 <__sinit>
 8002bb4:	69a3      	ldr	r3, [r4, #24]
 8002bb6:	60a3      	str	r3, [r4, #8]
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	071a      	lsls	r2, r3, #28
 8002bbc:	d501      	bpl.n	8002bc2 <__swbuf_r+0x20>
 8002bbe:	6923      	ldr	r3, [r4, #16]
 8002bc0:	b943      	cbnz	r3, 8002bd4 <__swbuf_r+0x32>
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f000 f82b 	bl	8002c20 <__swsetup_r>
 8002bca:	b118      	cbz	r0, 8002bd4 <__swbuf_r+0x32>
 8002bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8002bd0:	4638      	mov	r0, r7
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	6922      	ldr	r2, [r4, #16]
 8002bd8:	b2f6      	uxtb	r6, r6
 8002bda:	1a98      	subs	r0, r3, r2
 8002bdc:	6963      	ldr	r3, [r4, #20]
 8002bde:	4637      	mov	r7, r6
 8002be0:	4283      	cmp	r3, r0
 8002be2:	dc05      	bgt.n	8002bf0 <__swbuf_r+0x4e>
 8002be4:	4621      	mov	r1, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 fa62 	bl	80030b0 <_fflush_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d1ed      	bne.n	8002bcc <__swbuf_r+0x2a>
 8002bf0:	68a3      	ldr	r3, [r4, #8]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	60a3      	str	r3, [r4, #8]
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	6022      	str	r2, [r4, #0]
 8002bfc:	701e      	strb	r6, [r3, #0]
 8002bfe:	6962      	ldr	r2, [r4, #20]
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d004      	beq.n	8002c10 <__swbuf_r+0x6e>
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	07db      	lsls	r3, r3, #31
 8002c0a:	d5e1      	bpl.n	8002bd0 <__swbuf_r+0x2e>
 8002c0c:	2e0a      	cmp	r6, #10
 8002c0e:	d1df      	bne.n	8002bd0 <__swbuf_r+0x2e>
 8002c10:	4621      	mov	r1, r4
 8002c12:	4628      	mov	r0, r5
 8002c14:	f000 fa4c 	bl	80030b0 <_fflush_r>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d0d9      	beq.n	8002bd0 <__swbuf_r+0x2e>
 8002c1c:	e7d6      	b.n	8002bcc <__swbuf_r+0x2a>
	...

08002c20 <__swsetup_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <__swsetup_r+0xa8>)
 8002c24:	4605      	mov	r5, r0
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	460c      	mov	r4, r1
 8002c2a:	b118      	cbz	r0, 8002c34 <__swsetup_r+0x14>
 8002c2c:	6a03      	ldr	r3, [r0, #32]
 8002c2e:	b90b      	cbnz	r3, 8002c34 <__swsetup_r+0x14>
 8002c30:	f7ff fee0 	bl	80029f4 <__sinit>
 8002c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c38:	0719      	lsls	r1, r3, #28
 8002c3a:	d422      	bmi.n	8002c82 <__swsetup_r+0x62>
 8002c3c:	06da      	lsls	r2, r3, #27
 8002c3e:	d407      	bmi.n	8002c50 <__swsetup_r+0x30>
 8002c40:	2209      	movs	r2, #9
 8002c42:	602a      	str	r2, [r5, #0]
 8002c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	81a3      	strh	r3, [r4, #12]
 8002c4e:	e033      	b.n	8002cb8 <__swsetup_r+0x98>
 8002c50:	0758      	lsls	r0, r3, #29
 8002c52:	d512      	bpl.n	8002c7a <__swsetup_r+0x5a>
 8002c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c56:	b141      	cbz	r1, 8002c6a <__swsetup_r+0x4a>
 8002c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c5c:	4299      	cmp	r1, r3
 8002c5e:	d002      	beq.n	8002c66 <__swsetup_r+0x46>
 8002c60:	4628      	mov	r0, r5
 8002c62:	f000 f8af 	bl	8002dc4 <_free_r>
 8002c66:	2300      	movs	r3, #0
 8002c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c70:	81a3      	strh	r3, [r4, #12]
 8002c72:	2300      	movs	r3, #0
 8002c74:	6063      	str	r3, [r4, #4]
 8002c76:	6923      	ldr	r3, [r4, #16]
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	81a3      	strh	r3, [r4, #12]
 8002c82:	6923      	ldr	r3, [r4, #16]
 8002c84:	b94b      	cbnz	r3, 8002c9a <__swsetup_r+0x7a>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c90:	d003      	beq.n	8002c9a <__swsetup_r+0x7a>
 8002c92:	4621      	mov	r1, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 fa58 	bl	800314a <__smakebuf_r>
 8002c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c9e:	f013 0201 	ands.w	r2, r3, #1
 8002ca2:	d00a      	beq.n	8002cba <__swsetup_r+0x9a>
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60a2      	str	r2, [r4, #8]
 8002ca8:	6962      	ldr	r2, [r4, #20]
 8002caa:	4252      	negs	r2, r2
 8002cac:	61a2      	str	r2, [r4, #24]
 8002cae:	6922      	ldr	r2, [r4, #16]
 8002cb0:	b942      	cbnz	r2, 8002cc4 <__swsetup_r+0xa4>
 8002cb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002cb6:	d1c5      	bne.n	8002c44 <__swsetup_r+0x24>
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
 8002cba:	0799      	lsls	r1, r3, #30
 8002cbc:	bf58      	it	pl
 8002cbe:	6962      	ldrpl	r2, [r4, #20]
 8002cc0:	60a2      	str	r2, [r4, #8]
 8002cc2:	e7f4      	b.n	8002cae <__swsetup_r+0x8e>
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e7f7      	b.n	8002cb8 <__swsetup_r+0x98>
 8002cc8:	20000198 	.word	0x20000198

08002ccc <memset>:
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4402      	add	r2, r0
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <memset+0xa>
 8002cd4:	4770      	bx	lr
 8002cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cda:	e7f9      	b.n	8002cd0 <memset+0x4>

08002cdc <_close_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4d05      	ldr	r5, [pc, #20]	@ (8002cf8 <_close_r+0x1c>)
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	602b      	str	r3, [r5, #0]
 8002ce8:	f7fe fbc5 	bl	8001476 <_close>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_close_r+0x1a>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_close_r+0x1a>
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000390 	.word	0x20000390

08002cfc <_lseek_r>:
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	4604      	mov	r4, r0
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	4d05      	ldr	r5, [pc, #20]	@ (8002d1c <_lseek_r+0x20>)
 8002d08:	602a      	str	r2, [r5, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f7fe fbd7 	bl	80014be <_lseek>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d102      	bne.n	8002d1a <_lseek_r+0x1e>
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	b103      	cbz	r3, 8002d1a <_lseek_r+0x1e>
 8002d18:	6023      	str	r3, [r4, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	20000390 	.word	0x20000390

08002d20 <_read_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4d05      	ldr	r5, [pc, #20]	@ (8002d40 <_read_r+0x20>)
 8002d2c:	602a      	str	r2, [r5, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7fe fb84 	bl	800143c <_read>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_read_r+0x1e>
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_read_r+0x1e>
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	20000390 	.word	0x20000390

08002d44 <_write_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4d05      	ldr	r5, [pc, #20]	@ (8002d64 <_write_r+0x20>)
 8002d50:	602a      	str	r2, [r5, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7fe f9aa 	bl	80010ac <_write>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_write_r+0x1e>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_write_r+0x1e>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	20000390 	.word	0x20000390

08002d68 <__errno>:
 8002d68:	4b01      	ldr	r3, [pc, #4]	@ (8002d70 <__errno+0x8>)
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000198 	.word	0x20000198

08002d74 <__libc_init_array>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	2600      	movs	r6, #0
 8002d78:	4d0c      	ldr	r5, [pc, #48]	@ (8002dac <__libc_init_array+0x38>)
 8002d7a:	4c0d      	ldr	r4, [pc, #52]	@ (8002db0 <__libc_init_array+0x3c>)
 8002d7c:	1b64      	subs	r4, r4, r5
 8002d7e:	10a4      	asrs	r4, r4, #2
 8002d80:	42a6      	cmp	r6, r4
 8002d82:	d109      	bne.n	8002d98 <__libc_init_array+0x24>
 8002d84:	f000 fa50 	bl	8003228 <_init>
 8002d88:	2600      	movs	r6, #0
 8002d8a:	4d0a      	ldr	r5, [pc, #40]	@ (8002db4 <__libc_init_array+0x40>)
 8002d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002db8 <__libc_init_array+0x44>)
 8002d8e:	1b64      	subs	r4, r4, r5
 8002d90:	10a4      	asrs	r4, r4, #2
 8002d92:	42a6      	cmp	r6, r4
 8002d94:	d105      	bne.n	8002da2 <__libc_init_array+0x2e>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9c:	4798      	blx	r3
 8002d9e:	3601      	adds	r6, #1
 8002da0:	e7ee      	b.n	8002d80 <__libc_init_array+0xc>
 8002da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da6:	4798      	blx	r3
 8002da8:	3601      	adds	r6, #1
 8002daa:	e7f2      	b.n	8002d92 <__libc_init_array+0x1e>
 8002dac:	080032b0 	.word	0x080032b0
 8002db0:	080032b0 	.word	0x080032b0
 8002db4:	080032b0 	.word	0x080032b0
 8002db8:	080032b4 	.word	0x080032b4

08002dbc <__retarget_lock_init_recursive>:
 8002dbc:	4770      	bx	lr

08002dbe <__retarget_lock_acquire_recursive>:
 8002dbe:	4770      	bx	lr

08002dc0 <__retarget_lock_release_recursive>:
 8002dc0:	4770      	bx	lr
	...

08002dc4 <_free_r>:
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	d040      	beq.n	8002e4e <_free_r+0x8a>
 8002dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd0:	1f0c      	subs	r4, r1, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bfb8      	it	lt
 8002dd6:	18e4      	addlt	r4, r4, r3
 8002dd8:	f000 f8de 	bl	8002f98 <__malloc_lock>
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <_free_r+0x8c>)
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	b933      	cbnz	r3, 8002df0 <_free_r+0x2c>
 8002de2:	6063      	str	r3, [r4, #4]
 8002de4:	6014      	str	r4, [r2, #0]
 8002de6:	4628      	mov	r0, r5
 8002de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dec:	f000 b8da 	b.w	8002fa4 <__malloc_unlock>
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	d908      	bls.n	8002e06 <_free_r+0x42>
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	1821      	adds	r1, r4, r0
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	bf01      	itttt	eq
 8002dfc:	6819      	ldreq	r1, [r3, #0]
 8002dfe:	685b      	ldreq	r3, [r3, #4]
 8002e00:	1809      	addeq	r1, r1, r0
 8002e02:	6021      	streq	r1, [r4, #0]
 8002e04:	e7ed      	b.n	8002de2 <_free_r+0x1e>
 8002e06:	461a      	mov	r2, r3
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b10b      	cbz	r3, 8002e10 <_free_r+0x4c>
 8002e0c:	42a3      	cmp	r3, r4
 8002e0e:	d9fa      	bls.n	8002e06 <_free_r+0x42>
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	1850      	adds	r0, r2, r1
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d10b      	bne.n	8002e30 <_free_r+0x6c>
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	4401      	add	r1, r0
 8002e1c:	1850      	adds	r0, r2, r1
 8002e1e:	4283      	cmp	r3, r0
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	d1e0      	bne.n	8002de6 <_free_r+0x22>
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4408      	add	r0, r1
 8002e2a:	6010      	str	r0, [r2, #0]
 8002e2c:	6053      	str	r3, [r2, #4]
 8002e2e:	e7da      	b.n	8002de6 <_free_r+0x22>
 8002e30:	d902      	bls.n	8002e38 <_free_r+0x74>
 8002e32:	230c      	movs	r3, #12
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	e7d6      	b.n	8002de6 <_free_r+0x22>
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	1821      	adds	r1, r4, r0
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	bf01      	itttt	eq
 8002e40:	6819      	ldreq	r1, [r3, #0]
 8002e42:	685b      	ldreq	r3, [r3, #4]
 8002e44:	1809      	addeq	r1, r1, r0
 8002e46:	6021      	streq	r1, [r4, #0]
 8002e48:	6063      	str	r3, [r4, #4]
 8002e4a:	6054      	str	r4, [r2, #4]
 8002e4c:	e7cb      	b.n	8002de6 <_free_r+0x22>
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	2000039c 	.word	0x2000039c

08002e54 <sbrk_aligned>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4e0f      	ldr	r6, [pc, #60]	@ (8002e94 <sbrk_aligned+0x40>)
 8002e58:	460c      	mov	r4, r1
 8002e5a:	6831      	ldr	r1, [r6, #0]
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b911      	cbnz	r1, 8002e66 <sbrk_aligned+0x12>
 8002e60:	f000 f9d2 	bl	8003208 <_sbrk_r>
 8002e64:	6030      	str	r0, [r6, #0]
 8002e66:	4621      	mov	r1, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 f9cd 	bl	8003208 <_sbrk_r>
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d103      	bne.n	8002e7a <sbrk_aligned+0x26>
 8002e72:	f04f 34ff 	mov.w	r4, #4294967295
 8002e76:	4620      	mov	r0, r4
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
 8002e7a:	1cc4      	adds	r4, r0, #3
 8002e7c:	f024 0403 	bic.w	r4, r4, #3
 8002e80:	42a0      	cmp	r0, r4
 8002e82:	d0f8      	beq.n	8002e76 <sbrk_aligned+0x22>
 8002e84:	1a21      	subs	r1, r4, r0
 8002e86:	4628      	mov	r0, r5
 8002e88:	f000 f9be 	bl	8003208 <_sbrk_r>
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d1f2      	bne.n	8002e76 <sbrk_aligned+0x22>
 8002e90:	e7ef      	b.n	8002e72 <sbrk_aligned+0x1e>
 8002e92:	bf00      	nop
 8002e94:	20000398 	.word	0x20000398

08002e98 <_malloc_r>:
 8002e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e9c:	1ccd      	adds	r5, r1, #3
 8002e9e:	f025 0503 	bic.w	r5, r5, #3
 8002ea2:	3508      	adds	r5, #8
 8002ea4:	2d0c      	cmp	r5, #12
 8002ea6:	bf38      	it	cc
 8002ea8:	250c      	movcc	r5, #12
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	4606      	mov	r6, r0
 8002eae:	db01      	blt.n	8002eb4 <_malloc_r+0x1c>
 8002eb0:	42a9      	cmp	r1, r5
 8002eb2:	d904      	bls.n	8002ebe <_malloc_r+0x26>
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	6033      	str	r3, [r6, #0]
 8002eb8:	2000      	movs	r0, #0
 8002eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f94 <_malloc_r+0xfc>
 8002ec2:	f000 f869 	bl	8002f98 <__malloc_lock>
 8002ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eca:	461c      	mov	r4, r3
 8002ecc:	bb44      	cbnz	r4, 8002f20 <_malloc_r+0x88>
 8002ece:	4629      	mov	r1, r5
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	f7ff ffbf 	bl	8002e54 <sbrk_aligned>
 8002ed6:	1c43      	adds	r3, r0, #1
 8002ed8:	4604      	mov	r4, r0
 8002eda:	d158      	bne.n	8002f8e <_malloc_r+0xf6>
 8002edc:	f8d8 4000 	ldr.w	r4, [r8]
 8002ee0:	4627      	mov	r7, r4
 8002ee2:	2f00      	cmp	r7, #0
 8002ee4:	d143      	bne.n	8002f6e <_malloc_r+0xd6>
 8002ee6:	2c00      	cmp	r4, #0
 8002ee8:	d04b      	beq.n	8002f82 <_malloc_r+0xea>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	4639      	mov	r1, r7
 8002eee:	4630      	mov	r0, r6
 8002ef0:	eb04 0903 	add.w	r9, r4, r3
 8002ef4:	f000 f988 	bl	8003208 <_sbrk_r>
 8002ef8:	4581      	cmp	r9, r0
 8002efa:	d142      	bne.n	8002f82 <_malloc_r+0xea>
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	4630      	mov	r0, r6
 8002f00:	1a6d      	subs	r5, r5, r1
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7ff ffa6 	bl	8002e54 <sbrk_aligned>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d03a      	beq.n	8002f82 <_malloc_r+0xea>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	442b      	add	r3, r5
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	f8d8 3000 	ldr.w	r3, [r8]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	bb62      	cbnz	r2, 8002f74 <_malloc_r+0xdc>
 8002f1a:	f8c8 7000 	str.w	r7, [r8]
 8002f1e:	e00f      	b.n	8002f40 <_malloc_r+0xa8>
 8002f20:	6822      	ldr	r2, [r4, #0]
 8002f22:	1b52      	subs	r2, r2, r5
 8002f24:	d420      	bmi.n	8002f68 <_malloc_r+0xd0>
 8002f26:	2a0b      	cmp	r2, #11
 8002f28:	d917      	bls.n	8002f5a <_malloc_r+0xc2>
 8002f2a:	1961      	adds	r1, r4, r5
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	6025      	str	r5, [r4, #0]
 8002f30:	bf18      	it	ne
 8002f32:	6059      	strne	r1, [r3, #4]
 8002f34:	6863      	ldr	r3, [r4, #4]
 8002f36:	bf08      	it	eq
 8002f38:	f8c8 1000 	streq.w	r1, [r8]
 8002f3c:	5162      	str	r2, [r4, r5]
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	4630      	mov	r0, r6
 8002f42:	f000 f82f 	bl	8002fa4 <__malloc_unlock>
 8002f46:	f104 000b 	add.w	r0, r4, #11
 8002f4a:	1d23      	adds	r3, r4, #4
 8002f4c:	f020 0007 	bic.w	r0, r0, #7
 8002f50:	1ac2      	subs	r2, r0, r3
 8002f52:	bf1c      	itt	ne
 8002f54:	1a1b      	subne	r3, r3, r0
 8002f56:	50a3      	strne	r3, [r4, r2]
 8002f58:	e7af      	b.n	8002eba <_malloc_r+0x22>
 8002f5a:	6862      	ldr	r2, [r4, #4]
 8002f5c:	42a3      	cmp	r3, r4
 8002f5e:	bf0c      	ite	eq
 8002f60:	f8c8 2000 	streq.w	r2, [r8]
 8002f64:	605a      	strne	r2, [r3, #4]
 8002f66:	e7eb      	b.n	8002f40 <_malloc_r+0xa8>
 8002f68:	4623      	mov	r3, r4
 8002f6a:	6864      	ldr	r4, [r4, #4]
 8002f6c:	e7ae      	b.n	8002ecc <_malloc_r+0x34>
 8002f6e:	463c      	mov	r4, r7
 8002f70:	687f      	ldr	r7, [r7, #4]
 8002f72:	e7b6      	b.n	8002ee2 <_malloc_r+0x4a>
 8002f74:	461a      	mov	r2, r3
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	d1fb      	bne.n	8002f74 <_malloc_r+0xdc>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6053      	str	r3, [r2, #4]
 8002f80:	e7de      	b.n	8002f40 <_malloc_r+0xa8>
 8002f82:	230c      	movs	r3, #12
 8002f84:	4630      	mov	r0, r6
 8002f86:	6033      	str	r3, [r6, #0]
 8002f88:	f000 f80c 	bl	8002fa4 <__malloc_unlock>
 8002f8c:	e794      	b.n	8002eb8 <_malloc_r+0x20>
 8002f8e:	6005      	str	r5, [r0, #0]
 8002f90:	e7d6      	b.n	8002f40 <_malloc_r+0xa8>
 8002f92:	bf00      	nop
 8002f94:	2000039c 	.word	0x2000039c

08002f98 <__malloc_lock>:
 8002f98:	4801      	ldr	r0, [pc, #4]	@ (8002fa0 <__malloc_lock+0x8>)
 8002f9a:	f7ff bf10 	b.w	8002dbe <__retarget_lock_acquire_recursive>
 8002f9e:	bf00      	nop
 8002fa0:	20000394 	.word	0x20000394

08002fa4 <__malloc_unlock>:
 8002fa4:	4801      	ldr	r0, [pc, #4]	@ (8002fac <__malloc_unlock+0x8>)
 8002fa6:	f7ff bf0b 	b.w	8002dc0 <__retarget_lock_release_recursive>
 8002faa:	bf00      	nop
 8002fac:	20000394 	.word	0x20000394

08002fb0 <__sflush_r>:
 8002fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	0716      	lsls	r6, r2, #28
 8002fb8:	4605      	mov	r5, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	d454      	bmi.n	8003068 <__sflush_r+0xb8>
 8002fbe:	684b      	ldr	r3, [r1, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dc02      	bgt.n	8002fca <__sflush_r+0x1a>
 8002fc4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dd48      	ble.n	800305c <__sflush_r+0xac>
 8002fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fcc:	2e00      	cmp	r6, #0
 8002fce:	d045      	beq.n	800305c <__sflush_r+0xac>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002fd6:	682f      	ldr	r7, [r5, #0]
 8002fd8:	6a21      	ldr	r1, [r4, #32]
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	d030      	beq.n	8003040 <__sflush_r+0x90>
 8002fde:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	0759      	lsls	r1, r3, #29
 8002fe4:	d505      	bpl.n	8002ff2 <__sflush_r+0x42>
 8002fe6:	6863      	ldr	r3, [r4, #4]
 8002fe8:	1ad2      	subs	r2, r2, r3
 8002fea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002fec:	b10b      	cbz	r3, 8002ff2 <__sflush_r+0x42>
 8002fee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ff8:	6a21      	ldr	r1, [r4, #32]
 8002ffa:	47b0      	blx	r6
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	d106      	bne.n	8003010 <__sflush_r+0x60>
 8003002:	6829      	ldr	r1, [r5, #0]
 8003004:	291d      	cmp	r1, #29
 8003006:	d82b      	bhi.n	8003060 <__sflush_r+0xb0>
 8003008:	4a28      	ldr	r2, [pc, #160]	@ (80030ac <__sflush_r+0xfc>)
 800300a:	40ca      	lsrs	r2, r1
 800300c:	07d6      	lsls	r6, r2, #31
 800300e:	d527      	bpl.n	8003060 <__sflush_r+0xb0>
 8003010:	2200      	movs	r2, #0
 8003012:	6062      	str	r2, [r4, #4]
 8003014:	6922      	ldr	r2, [r4, #16]
 8003016:	04d9      	lsls	r1, r3, #19
 8003018:	6022      	str	r2, [r4, #0]
 800301a:	d504      	bpl.n	8003026 <__sflush_r+0x76>
 800301c:	1c42      	adds	r2, r0, #1
 800301e:	d101      	bne.n	8003024 <__sflush_r+0x74>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b903      	cbnz	r3, 8003026 <__sflush_r+0x76>
 8003024:	6560      	str	r0, [r4, #84]	@ 0x54
 8003026:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003028:	602f      	str	r7, [r5, #0]
 800302a:	b1b9      	cbz	r1, 800305c <__sflush_r+0xac>
 800302c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003030:	4299      	cmp	r1, r3
 8003032:	d002      	beq.n	800303a <__sflush_r+0x8a>
 8003034:	4628      	mov	r0, r5
 8003036:	f7ff fec5 	bl	8002dc4 <_free_r>
 800303a:	2300      	movs	r3, #0
 800303c:	6363      	str	r3, [r4, #52]	@ 0x34
 800303e:	e00d      	b.n	800305c <__sflush_r+0xac>
 8003040:	2301      	movs	r3, #1
 8003042:	4628      	mov	r0, r5
 8003044:	47b0      	blx	r6
 8003046:	4602      	mov	r2, r0
 8003048:	1c50      	adds	r0, r2, #1
 800304a:	d1c9      	bne.n	8002fe0 <__sflush_r+0x30>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0c6      	beq.n	8002fe0 <__sflush_r+0x30>
 8003052:	2b1d      	cmp	r3, #29
 8003054:	d001      	beq.n	800305a <__sflush_r+0xaa>
 8003056:	2b16      	cmp	r3, #22
 8003058:	d11d      	bne.n	8003096 <__sflush_r+0xe6>
 800305a:	602f      	str	r7, [r5, #0]
 800305c:	2000      	movs	r0, #0
 800305e:	e021      	b.n	80030a4 <__sflush_r+0xf4>
 8003060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003064:	b21b      	sxth	r3, r3
 8003066:	e01a      	b.n	800309e <__sflush_r+0xee>
 8003068:	690f      	ldr	r7, [r1, #16]
 800306a:	2f00      	cmp	r7, #0
 800306c:	d0f6      	beq.n	800305c <__sflush_r+0xac>
 800306e:	0793      	lsls	r3, r2, #30
 8003070:	bf18      	it	ne
 8003072:	2300      	movne	r3, #0
 8003074:	680e      	ldr	r6, [r1, #0]
 8003076:	bf08      	it	eq
 8003078:	694b      	ldreq	r3, [r1, #20]
 800307a:	1bf6      	subs	r6, r6, r7
 800307c:	600f      	str	r7, [r1, #0]
 800307e:	608b      	str	r3, [r1, #8]
 8003080:	2e00      	cmp	r6, #0
 8003082:	ddeb      	ble.n	800305c <__sflush_r+0xac>
 8003084:	4633      	mov	r3, r6
 8003086:	463a      	mov	r2, r7
 8003088:	4628      	mov	r0, r5
 800308a:	6a21      	ldr	r1, [r4, #32]
 800308c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003090:	47e0      	blx	ip
 8003092:	2800      	cmp	r0, #0
 8003094:	dc07      	bgt.n	80030a6 <__sflush_r+0xf6>
 8003096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800309a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800309e:	f04f 30ff 	mov.w	r0, #4294967295
 80030a2:	81a3      	strh	r3, [r4, #12]
 80030a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a6:	4407      	add	r7, r0
 80030a8:	1a36      	subs	r6, r6, r0
 80030aa:	e7e9      	b.n	8003080 <__sflush_r+0xd0>
 80030ac:	20400001 	.word	0x20400001

080030b0 <_fflush_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	690b      	ldr	r3, [r1, #16]
 80030b4:	4605      	mov	r5, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	b913      	cbnz	r3, 80030c0 <_fflush_r+0x10>
 80030ba:	2500      	movs	r5, #0
 80030bc:	4628      	mov	r0, r5
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	b118      	cbz	r0, 80030ca <_fflush_r+0x1a>
 80030c2:	6a03      	ldr	r3, [r0, #32]
 80030c4:	b90b      	cbnz	r3, 80030ca <_fflush_r+0x1a>
 80030c6:	f7ff fc95 	bl	80029f4 <__sinit>
 80030ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f3      	beq.n	80030ba <_fflush_r+0xa>
 80030d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80030d4:	07d0      	lsls	r0, r2, #31
 80030d6:	d404      	bmi.n	80030e2 <_fflush_r+0x32>
 80030d8:	0599      	lsls	r1, r3, #22
 80030da:	d402      	bmi.n	80030e2 <_fflush_r+0x32>
 80030dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030de:	f7ff fe6e 	bl	8002dbe <__retarget_lock_acquire_recursive>
 80030e2:	4628      	mov	r0, r5
 80030e4:	4621      	mov	r1, r4
 80030e6:	f7ff ff63 	bl	8002fb0 <__sflush_r>
 80030ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030ec:	4605      	mov	r5, r0
 80030ee:	07da      	lsls	r2, r3, #31
 80030f0:	d4e4      	bmi.n	80030bc <_fflush_r+0xc>
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	059b      	lsls	r3, r3, #22
 80030f6:	d4e1      	bmi.n	80030bc <_fflush_r+0xc>
 80030f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030fa:	f7ff fe61 	bl	8002dc0 <__retarget_lock_release_recursive>
 80030fe:	e7dd      	b.n	80030bc <_fflush_r+0xc>

08003100 <__swhatbuf_r>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	460c      	mov	r4, r1
 8003104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003108:	4615      	mov	r5, r2
 800310a:	2900      	cmp	r1, #0
 800310c:	461e      	mov	r6, r3
 800310e:	b096      	sub	sp, #88	@ 0x58
 8003110:	da0c      	bge.n	800312c <__swhatbuf_r+0x2c>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	2100      	movs	r1, #0
 8003116:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800311a:	bf14      	ite	ne
 800311c:	2340      	movne	r3, #64	@ 0x40
 800311e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003122:	2000      	movs	r0, #0
 8003124:	6031      	str	r1, [r6, #0]
 8003126:	602b      	str	r3, [r5, #0]
 8003128:	b016      	add	sp, #88	@ 0x58
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	466a      	mov	r2, sp
 800312e:	f000 f849 	bl	80031c4 <_fstat_r>
 8003132:	2800      	cmp	r0, #0
 8003134:	dbed      	blt.n	8003112 <__swhatbuf_r+0x12>
 8003136:	9901      	ldr	r1, [sp, #4]
 8003138:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800313c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003140:	4259      	negs	r1, r3
 8003142:	4159      	adcs	r1, r3
 8003144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003148:	e7eb      	b.n	8003122 <__swhatbuf_r+0x22>

0800314a <__smakebuf_r>:
 800314a:	898b      	ldrh	r3, [r1, #12]
 800314c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314e:	079d      	lsls	r5, r3, #30
 8003150:	4606      	mov	r6, r0
 8003152:	460c      	mov	r4, r1
 8003154:	d507      	bpl.n	8003166 <__smakebuf_r+0x1c>
 8003156:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800315a:	6023      	str	r3, [r4, #0]
 800315c:	6123      	str	r3, [r4, #16]
 800315e:	2301      	movs	r3, #1
 8003160:	6163      	str	r3, [r4, #20]
 8003162:	b003      	add	sp, #12
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003166:	466a      	mov	r2, sp
 8003168:	ab01      	add	r3, sp, #4
 800316a:	f7ff ffc9 	bl	8003100 <__swhatbuf_r>
 800316e:	9f00      	ldr	r7, [sp, #0]
 8003170:	4605      	mov	r5, r0
 8003172:	4639      	mov	r1, r7
 8003174:	4630      	mov	r0, r6
 8003176:	f7ff fe8f 	bl	8002e98 <_malloc_r>
 800317a:	b948      	cbnz	r0, 8003190 <__smakebuf_r+0x46>
 800317c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003180:	059a      	lsls	r2, r3, #22
 8003182:	d4ee      	bmi.n	8003162 <__smakebuf_r+0x18>
 8003184:	f023 0303 	bic.w	r3, r3, #3
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	e7e2      	b.n	8003156 <__smakebuf_r+0xc>
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	6020      	str	r0, [r4, #0]
 80031a0:	b15b      	cbz	r3, 80031ba <__smakebuf_r+0x70>
 80031a2:	4630      	mov	r0, r6
 80031a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031a8:	f000 f81e 	bl	80031e8 <_isatty_r>
 80031ac:	b128      	cbz	r0, 80031ba <__smakebuf_r+0x70>
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	f023 0303 	bic.w	r3, r3, #3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	81a3      	strh	r3, [r4, #12]
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	431d      	orrs	r5, r3
 80031be:	81a5      	strh	r5, [r4, #12]
 80031c0:	e7cf      	b.n	8003162 <__smakebuf_r+0x18>
	...

080031c4 <_fstat_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	2300      	movs	r3, #0
 80031c8:	4d06      	ldr	r5, [pc, #24]	@ (80031e4 <_fstat_r+0x20>)
 80031ca:	4604      	mov	r4, r0
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	f7fe f95b 	bl	800148c <_fstat>
 80031d6:	1c43      	adds	r3, r0, #1
 80031d8:	d102      	bne.n	80031e0 <_fstat_r+0x1c>
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	b103      	cbz	r3, 80031e0 <_fstat_r+0x1c>
 80031de:	6023      	str	r3, [r4, #0]
 80031e0:	bd38      	pop	{r3, r4, r5, pc}
 80031e2:	bf00      	nop
 80031e4:	20000390 	.word	0x20000390

080031e8 <_isatty_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	2300      	movs	r3, #0
 80031ec:	4d05      	ldr	r5, [pc, #20]	@ (8003204 <_isatty_r+0x1c>)
 80031ee:	4604      	mov	r4, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fe f959 	bl	80014aa <_isatty>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_isatty_r+0x1a>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_isatty_r+0x1a>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000390 	.word	0x20000390

08003208 <_sbrk_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	2300      	movs	r3, #0
 800320c:	4d05      	ldr	r5, [pc, #20]	@ (8003224 <_sbrk_r+0x1c>)
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	602b      	str	r3, [r5, #0]
 8003214:	f7fe f960 	bl	80014d8 <_sbrk>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d102      	bne.n	8003222 <_sbrk_r+0x1a>
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	b103      	cbz	r3, 8003222 <_sbrk_r+0x1a>
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	20000390 	.word	0x20000390

08003228 <_init>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	bf00      	nop
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr

08003234 <_fini>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

Disassembly of section .mysection:

0801800c <Blink>:
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b082      	sub	sp, #8
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8018014:	2120      	movs	r1, #32
 8018016:	4805      	ldr	r0, [pc, #20]	@ (801802c <Blink+0x20>)
 8018018:	f7e9 fdf0 	bl	8001bfc <HAL_GPIO_TogglePin>
	HAL_Delay(dlyticks);
 801801c:	6878      	ldr	r0, [r7, #4]
 801801e:	f7e9 fb1f 	bl	8001660 <HAL_Delay>
}
 8018022:	bf00      	nop
 8018024:	3708      	adds	r7, #8
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	40010800 	.word	0x40010800

08018030 <TurnOn>:
{
 8018030:	b580      	push	{r7, lr}
 8018032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8018034:	2201      	movs	r2, #1
 8018036:	2120      	movs	r1, #32
 8018038:	4802      	ldr	r0, [pc, #8]	@ (8018044 <TurnOn+0x14>)
 801803a:	f7e9 fdc7 	bl	8001bcc <HAL_GPIO_WritePin>
}
 801803e:	bf00      	nop
 8018040:	bd80      	pop	{r7, pc}
 8018042:	bf00      	nop
 8018044:	40010800 	.word	0x40010800

08018048 <TurnOff>:
{
 8018048:	b580      	push	{r7, lr}
 801804a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 801804c:	2200      	movs	r2, #0
 801804e:	2120      	movs	r1, #32
 8018050:	4802      	ldr	r0, [pc, #8]	@ (801805c <TurnOff+0x14>)
 8018052:	f7e9 fdbb 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8018056:	bf00      	nop
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	40010800 	.word	0x40010800
